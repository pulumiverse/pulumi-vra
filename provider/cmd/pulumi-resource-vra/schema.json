{
    "name": "vra",
    "displayName": "VMWare vra",
    "description": "A Pulumi package for creating and managing VMware VRA cloud resources.",
    "keywords": [
        "pulumi",
        "vra",
        "category/cloud"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`vra` Terraform Provider](https://github.com/vmware/terraform-provider-vra).",
    "repository": "https://github.com/pulumiverse/pulumi-vra",
    "pluginDownloadURL": "github://api.github.com/pulumiverse",
    "publisher": "pulumiverse",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "rootNamespace": "Pulumiverse"
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumiverse/pulumi-vra/sdk/go/vra"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing VMware VRA cloud resources.",
            "packageName": "@pulumiverse/vra",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/vmware/terraform-provider-vra)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-vra` repo](https://github.com/pulumiverse/pulumi-vra/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-vra` repo](https://github.com/vmware/terraform-provider-vra/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "packageName": "pulumiverse_vra",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/vmware/terraform-provider-vra)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-vra` repo](https://github.com/pulumiverse/pulumi-vra/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-vra` repo](https://github.com/vmware/terraform-provider-vra/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    },
    "config": {
        "variables": {
            "accessToken": {
                "type": "string",
                "description": "The access token for API operations.\n",
                "defaultInfo": {
                    "environment": [
                        "VRA_ACCESS_TOKEN"
                    ]
                },
                "secret": true
            },
            "insecure": {
                "type": "boolean",
                "description": "Specify whether to validate TLS certificates.\n",
                "defaultInfo": {
                    "environment": [
                        "VRA_INSECURE",
                        "VRA7_INSECURE"
                    ]
                }
            },
            "reauthorizeTimeout": {
                "type": "string",
                "description": "Specify timeout for how often to reauthorize the access token\n"
            },
            "refreshToken": {
                "type": "string",
                "description": "The refresh token for API operations.\n",
                "defaultInfo": {
                    "environment": [
                        "VRA_REFRESH_TOKEN"
                    ]
                },
                "secret": true
            },
            "url": {
                "type": "string",
                "description": "The base url for API operations.\n",
                "defaultInfo": {
                    "environment": [
                        "VRA_URL"
                    ]
                }
            }
        },
        "defaults": [
            "url"
        ]
    },
    "types": {
        "vra:blockdevice/BlockDeviceConstraint:BlockDeviceConstraint": {
            "properties": {
                "expression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mandatory": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "expression",
                "mandatory"
            ]
        },
        "vra:blockdevice/BlockDeviceLink:BlockDeviceLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ]
        },
        "vra:blockdevice/BlockDeviceSnapshot:BlockDeviceSnapshot": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Date when entity was created. Date and time format is ISO 8601 and UTC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "Describes machine within the scope of your organization and is not propagated to the cloud.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "ID of the block device snapshot.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isCurrent": {
                    "type": "boolean",
                    "description": "Indicates whether snapshot on block device is current.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:blockdevice/BlockDeviceSnapshotLink:BlockDeviceSnapshotLink"
                    },
                    "description": "HATEOAS of the entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Human-friendly name used as an identifier in APIs that support this option.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of organization that block device snapshot belongs to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "owner": {
                    "type": "string",
                    "description": "Email of block device snapshot owner.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date when entity was last updated. Date and time format is ISO 8601 and UTC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "createdAt",
                        "description",
                        "id",
                        "isCurrent",
                        "links",
                        "name",
                        "orgId",
                        "owner",
                        "updatedAt"
                    ]
                }
            }
        },
        "vra:blockdevice/BlockDeviceSnapshotLink:BlockDeviceSnapshotLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ]
        },
        "vra:blockdevice/BlockDeviceTag:BlockDeviceTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vra:blockdevice/SnapshotLink:SnapshotLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ]
        },
        "vra:blockdevice/getBlockDeviceLink:getBlockDeviceLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vra:blockdevice/getBlockDeviceSnapshot:getBlockDeviceSnapshot": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Date when the entity was created. The date is in ISO 6801 and UTC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "Describes machine within the scope of your organization and is not propagated to the cloud.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The id of the block device.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isCurrent": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:blockdevice/getBlockDeviceSnapshotLink:getBlockDeviceSnapshotLink"
                    },
                    "description": "HATEOAS of the entity.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "A human-friendly name used as an identifier in APIs that support this option.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "orgId": {
                    "type": "string",
                    "description": "The id of the organization this entity belongs to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "owner": {
                    "type": "string",
                    "description": "Email of the user that owns the entity.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "description",
                "id",
                "isCurrent",
                "links",
                "name",
                "orgId",
                "owner",
                "updatedAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vra:blockdevice/getBlockDeviceSnapshotLink:getBlockDeviceSnapshotLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vra:blockdevice/getBlockDeviceTag:getBlockDeviceTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Tag’s key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Tag’s value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vra:blockdevice/getSnapshotsSnapshot:getSnapshotsSnapshot": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Date when the entity was created. The date is in ISO 6801 and UTC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "A human-friendly description.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isCurrent": {
                    "type": "boolean",
                    "description": "Indicates whether this snapshot is the current snapshot on the block-device.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:blockdevice/getSnapshotsSnapshotLink:getSnapshotsSnapshotLink"
                    },
                    "description": "HATEOAS of the entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "A human-friendly name used as an identifier in APIs that support this option.  Only one of 'filter', 'id', 'name' or 'region_id' must be specified.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "orgId": {
                    "type": "string",
                    "description": "The id of the organization this entity belongs to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "owner": {
                    "type": "string",
                    "description": "Email of the user that owns the entity.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "description",
                "id",
                "isCurrent",
                "links",
                "name",
                "orgId",
                "owner",
                "updatedAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vra:blockdevice/getSnapshotsSnapshotLink:getSnapshotsSnapshotLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vra:blueprint/BlueprintValidationMessage:BlueprintValidationMessage": {
            "properties": {
                "message": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "message",
                        "path",
                        "resourceName",
                        "type"
                    ]
                }
            }
        },
        "vra:blueprint/getBlueprintValidationMessage:getBlueprintValidationMessage": {
            "properties": {
                "message": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "message",
                "path",
                "resourceName",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vra:catalog/ItemEntitlementDefinition:ItemEntitlementDefinition": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the catalog item.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "iconId": {
                    "type": "string",
                    "description": "Icon id of associated catalog item.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "Id of the catalog item.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the catalog item.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numberOfItems": {
                    "type": "integer",
                    "description": "Number of items in the associated catalog source.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceName": {
                    "type": "string",
                    "description": "Catalog source name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceType": {
                    "type": "string",
                    "description": "Catalog source type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Content definition type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "iconId",
                        "id",
                        "name",
                        "numberOfItems",
                        "sourceName",
                        "sourceType",
                        "type"
                    ]
                }
            }
        },
        "vra:catalog/SourceEntitlementDefinition:SourceEntitlementDefinition": {
            "properties": {
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "iconId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numberOfItems": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "iconId",
                        "id",
                        "name",
                        "numberOfItems",
                        "sourceName",
                        "sourceType",
                        "type"
                    ]
                }
            }
        },
        "vra:catalog/getItemEntitlementDefinition:getItemEntitlementDefinition": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the catalog item.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "iconId": {
                    "type": "string",
                    "description": "Icon id of associated catalog item.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The id of entitlement. One of `catalog_item_id` or `id` must be provided.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the catalog item.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numberOfItems": {
                    "type": "integer",
                    "description": "Number of items in the associated catalog source.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceName": {
                    "type": "string",
                    "description": "Catalog source name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceType": {
                    "type": "string",
                    "description": "Catalog source type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Content definition type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "iconId",
                "id",
                "name",
                "numberOfItems",
                "sourceName",
                "sourceType",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vra:catalog/getItemProject:getItemProject": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A human-friendly description.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The id of catalog item. One of `id`, or `name` must be provided.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the catalog item. One of `id`, or `name` must be provided.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "description": "Version of the entity, if applicable.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "vra:catalog/getItemType:getItemType": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A human-friendly description.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The id of catalog item. One of `id`, or `name` must be provided.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the catalog item. One of `id`, or `name` must be provided.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "description": "Version of the entity, if applicable.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "vra:catalog/getItemVersion:getItemVersion": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Date-time when catalog item version was created at.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "A human-friendly description.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The id of catalog item. One of `id`, or `name` must be provided.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "vra:catalog/getSourceEntitlementDefinition:getSourceEntitlementDefinition": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the catalog source.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "iconId": {
                    "type": "string",
                    "description": "Icon id of associated catalog source.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The id of entitlement. One of `catalog_source_id` or `id` must be provided.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the catalog source.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numberOfItems": {
                    "type": "integer",
                    "description": "Number of items in the associated catalog source.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceName": {
                    "type": "string",
                    "description": "Catalog source name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceType": {
                    "type": "string",
                    "description": "Catalog source type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Content definition type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "iconId",
                "id",
                "name",
                "numberOfItems",
                "sourceName",
                "sourceType",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vra:cloudaccount/AwsLink:AwsLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ]
        },
        "vra:cloudaccount/AwsTag:AwsTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vra:cloudaccount/AzureLink:AzureLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ]
        },
        "vra:cloudaccount/AzureTag:AzureTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vra:cloudaccount/GcpLink:GcpLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ]
        },
        "vra:cloudaccount/GcpTag:GcpTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vra:cloudaccount/NsxtLink:NsxtLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ]
        },
        "vra:cloudaccount/NsxtTag:NsxtTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vra:cloudaccount/NsxvLink:NsxvLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ]
        },
        "vra:cloudaccount/NsxvTag:NsxvTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vra:cloudaccount/VSphereLink:VSphereLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ]
        },
        "vra:cloudaccount/VSphereTag:VSphereTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vra:cloudaccount/VmcLink:VmcLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ]
        },
        "vra:cloudaccount/VmcTag:VmcTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vra:cloudaccount/getAwsLink:getAwsLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vra:cloudaccount/getAwsTag:getAwsTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Tag’s key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Tag’s value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vra:cloudaccount/getAzureLink:getAzureLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vra:cloudaccount/getAzureTag:getAzureTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Tag’s key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Tag’s value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vra:cloudaccount/getGcpLink:getGcpLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vra:cloudaccount/getGcpTag:getGcpTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Tag’s key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Tag’s value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vra:cloudaccount/getNsxtLink:getNsxtLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vra:cloudaccount/getNsxtTag:getNsxtTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Tag’s key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Tag’s value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vra:cloudaccount/getNsxvLink:getNsxvLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vra:cloudaccount/getNsxvTag:getNsxvTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Tag’s key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Tag’s value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vra:cloudaccount/getVSphereLink:getVSphereLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vra:cloudaccount/getVSphereTag:getVSphereTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Tag’s key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Tag’s value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vra:cloudaccount/getVmcLink:getVmcLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vra:cloudaccount/getVmcTag:getVmcTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Tag’s key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Tag’s value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vra:contentsource/ContentSourceConfig:ContentSourceConfig": {
            "properties": {
                "branch": {
                    "type": "string",
                    "description": "Content source branch name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "contentType": {
                    "type": "string",
                    "description": "Content source type. Supported values are `BLUEPRINT`, `IMAGE`, `ABX_SCRIPTS`, `TERRAFORM_CONFIGURATION`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "integrationId": {
                    "type": "string",
                    "description": "Content source integration id as seen in vRA integrations.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "Path to refer to in the content source repository and branch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectName": {
                    "type": "string",
                    "description": "Name of the project.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repository": {
                    "type": "string",
                    "description": "Content source repository.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "integrationId",
                "path",
                "projectName"
            ]
        },
        "vra:deployment/DeploymentExpense:DeploymentExpense": {
            "properties": {
                "additionalExpense": {
                    "type": "number",
                    "description": "Additional expense incurred for the resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "code": {
                    "type": "string",
                    "description": "Expense sync message code if any.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "computeExpense": {
                    "type": "number",
                    "description": "Compute expense of the entity.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastUpdateTime": {
                    "type": "string",
                    "description": "Last expense sync time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "description": "Expense sync message if any.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkExpense": {
                    "type": "number",
                    "description": "Network expense of the entity.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageExpense": {
                    "type": "number",
                    "description": "Storage expense of the entity.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "totalExpense": {
                    "type": "number",
                    "description": "Total expense of the entity.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "unit": {
                    "type": "string",
                    "description": "Monetary unit.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "additionalExpense",
                        "code",
                        "computeExpense",
                        "lastUpdateTime",
                        "message",
                        "networkExpense",
                        "storageExpense",
                        "totalExpense",
                        "unit"
                    ]
                }
            }
        },
        "vra:deployment/DeploymentLastRequest:DeploymentLastRequest": {
            "properties": {
                "actionId": {
                    "type": "string",
                    "description": "Identifier of the requested action.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "approvedAt": {
                    "type": "string",
                    "description": "Time at which the request was approved.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "blueprintId": {
                    "type": "string",
                    "description": "Identifier of the requested blueprint in the form ‘UUID:version’.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cancelable": {
                    "type": "boolean",
                    "description": "Indicates whether request can be canceled or not.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "catalogItemId": {
                    "type": "string",
                    "description": "The id of the vRA catalog item to request the deployment. Conflicts with `blueprint_id` and `blueprint_content`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "completedAt": {
                    "type": "string",
                    "description": "Time at which the request completed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "completedTasks": {
                    "type": "integer",
                    "description": "The number of tasks completed while fulfilling this request.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdAt": {
                    "type": "string",
                    "description": "Creation time (e.g. date format ‘2019-07-13T23:16:49.310Z’).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "details": {
                    "type": "string",
                    "description": "Longer user-friendly details of the request.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dismissed": {
                    "type": "boolean",
                    "description": "Indicates whether request is in dismissed state.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "initializedAt": {
                    "type": "string",
                    "description": "Time at which the request was initialized.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "inputs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Inputs provided by the user. For inputs including those with default values, refer to `inputs_including_defaults`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "A human-friendly name used as an identifier in APIs that support this option.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "outputs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Request outputs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requestedBy": {
                    "type": "string",
                    "description": "The user that initiated the request.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "Deployment status. Supported values are: `CREATE_SUCCESSFUL`, `CREATE_INPROGRESS`, `CREATE_FAILED`, `UPDATE_SUCCESSFUL`, `UPDATE_INPROGRESS`, `UPDATE_FAILED`, `DELETE_SUCCESSFUL`, `DELETE_INPROGRESS`, `DELETE_FAILED`, `ACTION_SUCCESSFUL`, `ACTION_INPROGRESS`, `ACTION_FAILED`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "totalTasks": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Last update time (e.g. date format ‘2019-07-13T23:16:49.310Z’).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "actionId",
                        "approvedAt",
                        "blueprintId",
                        "cancelable",
                        "catalogItemId",
                        "completedAt",
                        "completedTasks",
                        "createdAt",
                        "details",
                        "dismissed",
                        "id",
                        "initializedAt",
                        "inputs",
                        "name",
                        "outputs",
                        "requestedBy",
                        "resourceIds",
                        "status",
                        "totalTasks",
                        "updatedAt"
                    ]
                }
            }
        },
        "vra:deployment/DeploymentProject:DeploymentProject": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A human-friendly description.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "A human-friendly name used as an identifier in APIs that support this option.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "description": "Version of the entity, if applicable.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "vra:deployment/DeploymentResource:DeploymentResource": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Creation time (e.g. date format ‘2019-07-13T23:16:49.310Z’).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dependsOns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of other resources this resource depends on.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "A human-friendly description.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expenses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:deployment/DeploymentResourceExpense:DeploymentResourceExpense"
                    },
                    "description": "Expense incurred for the deployment.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "A human-friendly name used as an identifier in APIs that support this option.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "propertiesJson": {
                    "type": "string",
                    "description": "List of properties in the encoded JSON string format.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "description": "The current state of the resource. Supported values are `PARTIAL`, `TAINTED`, `OK.`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "syncStatus": {
                    "type": "string",
                    "description": "The current sync status. Supported values are `SUCCESS`, `MISSING`, `STALE`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of the resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "expenses",
                        "id",
                        "name"
                    ]
                }
            }
        },
        "vra:deployment/DeploymentResourceExpense:DeploymentResourceExpense": {
            "properties": {
                "additionalExpense": {
                    "type": "number",
                    "description": "Additional expense incurred for the resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "code": {
                    "type": "string",
                    "description": "Expense sync message code if any.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "computeExpense": {
                    "type": "number",
                    "description": "Compute expense of the entity.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastUpdateTime": {
                    "type": "string",
                    "description": "Last expense sync time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "description": "Expense sync message if any.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkExpense": {
                    "type": "number",
                    "description": "Network expense of the entity.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageExpense": {
                    "type": "number",
                    "description": "Storage expense of the entity.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "totalExpense": {
                    "type": "number",
                    "description": "Total expense of the entity.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "unit": {
                    "type": "string",
                    "description": "Monetary unit.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "additionalExpense",
                        "code",
                        "computeExpense",
                        "lastUpdateTime",
                        "message",
                        "networkExpense",
                        "storageExpense",
                        "totalExpense",
                        "unit"
                    ]
                }
            }
        },
        "vra:deployment/getDeploymentExpense:getDeploymentExpense": {
            "properties": {
                "additionalExpense": {
                    "type": "number",
                    "description": "Additional expense incurred for the resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "code": {
                    "type": "string",
                    "description": "Expense sync message code if any.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "computeExpense": {
                    "type": "number",
                    "description": "Compute expense of the entity.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastUpdateTime": {
                    "type": "string",
                    "description": "Last expense sync time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "description": "Expense sync message if any.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkExpense": {
                    "type": "number",
                    "description": "Network expense of the entity.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageExpense": {
                    "type": "number",
                    "description": "Storage expense of the entity.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "totalExpense": {
                    "type": "number",
                    "description": "Total expense of the entity.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "unit": {
                    "type": "string",
                    "description": "Monetary unit.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "additionalExpense",
                "code",
                "computeExpense",
                "lastUpdateTime",
                "message",
                "networkExpense",
                "storageExpense",
                "totalExpense",
                "unit"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vra:deployment/getDeploymentLastRequest:getDeploymentLastRequest": {
            "properties": {
                "actionId": {
                    "type": "string",
                    "description": "Identifier of the requested action.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "approvedAt": {
                    "type": "string",
                    "description": "Time at which the request was approved.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "blueprintId": {
                    "type": "string",
                    "description": "Identifier of the requested blueprint in the form ‘UUID:version’.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cancelable": {
                    "type": "boolean",
                    "description": "Indicates whether request can be canceled or not.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "catalogItemId": {
                    "type": "string",
                    "description": "Identifier of the requested catalog item in the form ‘UUID:version’.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "completedAt": {
                    "type": "string",
                    "description": "Time at which the request completed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "completedTasks": {
                    "type": "integer",
                    "description": "The number of tasks completed while fulfilling this request.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdAt": {
                    "type": "string",
                    "description": "Creation time (e.g. date format ‘2019-07-13T23:16:49.310Z’).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "details": {
                    "type": "string",
                    "description": "Longer user-friendly details of the request.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dismissed": {
                    "type": "boolean",
                    "description": "Indicates whether request is in dismissed state.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The id of the deployment. One of `id` or `name` must be provided.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "initializedAt": {
                    "type": "string",
                    "description": "Time at which the request was initialized.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "inputs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of request inputs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the deployment. One of `id` or `name` must be provided.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "outputs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Request outputs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requestedBy": {
                    "type": "string",
                    "description": "The user that initiated the request.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "Deployment status. Supported values are: `CREATE_SUCCESSFUL`, `CREATE_INPROGRESS`, `CREATE_FAILED`, `UPDATE_SUCCESSFUL`, `UPDATE_INPROGRESS`, `UPDATE_FAILED`, `DELETE_SUCCESSFUL`, `DELETE_INPROGRESS`, `DELETE_FAILED`, `ACTION_SUCCESSFUL`, `ACTION_INPROGRESS`, `ACTION_FAILED`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "totalTasks": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Last update time (e.g. date format ‘2019-07-13T23:16:49.310Z’).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "actionId",
                "approvedAt",
                "blueprintId",
                "cancelable",
                "catalogItemId",
                "completedAt",
                "completedTasks",
                "createdAt",
                "details",
                "dismissed",
                "id",
                "initializedAt",
                "inputs",
                "name",
                "outputs",
                "requestedBy",
                "resourceIds",
                "status",
                "totalTasks",
                "updatedAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vra:deployment/getDeploymentProject:getDeploymentProject": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A description of the resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The id of the deployment. One of `id` or `name` must be provided.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the deployment. One of `id` or `name` must be provided.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "description": "Version of the entity, if applicable.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "vra:deployment/getDeploymentResource:getDeploymentResource": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Creation time (e.g. date format ‘2019-07-13T23:16:49.310Z’).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dependsOns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of other resources this resource depends on.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "A description of the resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expenses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:deployment/getDeploymentResourceExpense:getDeploymentResourceExpense"
                    },
                    "description": "Expense incurred for this resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The id of the deployment. One of `id` or `name` must be provided.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the deployment. One of `id` or `name` must be provided.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "propertiesJson": {
                    "type": "string",
                    "description": "List of properties in the encoded JSON string format.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "description": "The current state of the resource. Supported values are `PARTIAL`, `TAINTED`, `OK.`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "syncStatus": {
                    "type": "string",
                    "description": "The current sync status. Supported values are `SUCCESS`, `MISSING`, `STALE`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of the resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "expenses",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vra:deployment/getDeploymentResourceExpense:getDeploymentResourceExpense": {
            "properties": {
                "additionalExpense": {
                    "type": "number",
                    "description": "Additional expense incurred for the resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "code": {
                    "type": "string",
                    "description": "Expense sync message code if any.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "computeExpense": {
                    "type": "number",
                    "description": "Compute expense of the entity.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastUpdateTime": {
                    "type": "string",
                    "description": "Last expense sync time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "description": "Expense sync message if any.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkExpense": {
                    "type": "number",
                    "description": "Network expense of the entity.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageExpense": {
                    "type": "number",
                    "description": "Storage expense of the entity.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "totalExpense": {
                    "type": "number",
                    "description": "Total expense of the entity.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "unit": {
                    "type": "string",
                    "description": "Monetary unit.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "additionalExpense",
                "code",
                "computeExpense",
                "lastUpdateTime",
                "message",
                "networkExpense",
                "storageExpense",
                "totalExpense",
                "unit"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vra:fabric/ComputeLink:ComputeLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ]
        },
        "vra:fabric/ComputeTag:ComputeTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Tag’s key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Tag’s value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vra:fabric/DatastoreVSphereLink:DatastoreVSphereLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ]
        },
        "vra:fabric/DatastoreVSphereTag:DatastoreVSphereTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Tag’s key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Tag’s value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vra:fabric/NetworkVSphereLink:NetworkVSphereLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ]
        },
        "vra:fabric/NetworkVSphereTag:NetworkVSphereTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vra:fabric/getComputeLink:getComputeLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vra:fabric/getComputeTag:getComputeTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Tag’s key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Tag’s value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vra:fabric/getDatastoreVSphereLink:getDatastoreVSphereLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vra:fabric/getDatastoreVSphereTag:getDatastoreVSphereTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Tag’s key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Tag’s value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vra:fabric/getNetworkLink:getNetworkLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vra:fabric/getNetworkTag:getNetworkTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vra:fabric/getStorageAccountAzureLink:getStorageAccountAzureLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vra:fabric/getStoragePolicyVSphereLink:getStoragePolicyVSphereLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vra:flavor/ProfileFlavorMapping:ProfileFlavorMapping": {
            "properties": {
                "cpuCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memory": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "A human-friendly name used as an identifier in APIs that support this option.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "vra:flavor/ProfileLink:ProfileLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ]
        },
        "vra:image/ProfileImageMapping:ProfileImageMapping": {
            "properties": {
                "cloudConfig": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "constraints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:image/ProfileImageMappingConstraint:ProfileImageMappingConstraint"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "A human-friendly description.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalRegionId": {
                    "type": "string",
                    "description": "The external regionId of the resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imageId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imageName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "A human-friendly name used as an identifier in APIs that support this option.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "organization": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "osFamily": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "owner": {
                    "type": "string",
                    "description": "Email of the user that owns the entity.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "private": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "externalId",
                        "externalRegionId",
                        "name",
                        "organization",
                        "osFamily",
                        "owner",
                        "private"
                    ]
                }
            }
        },
        "vra:image/ProfileImageMappingConstraint:ProfileImageMappingConstraint": {
            "properties": {
                "expression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mandatory": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "expression",
                "mandatory"
            ]
        },
        "vra:image/getProfileImageMapping:getProfileImageMapping": {
            "properties": {
                "cloudConfig": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "constraints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:image/getProfileImageMappingConstraint:getProfileImageMappingConstraint"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "A human-friendly description.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalRegionId": {
                    "type": "string",
                    "description": "The external regionId of the resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imageId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imageName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "A human-friendly name used as an identifier in APIs that support this option.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "organization": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "osFamily": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "owner": {
                    "type": "string",
                    "description": "Email of the user that owns the entity.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "private": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "externalId",
                "externalRegionId",
                "name",
                "organization",
                "osFamily",
                "owner",
                "private"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": [
                        "name"
                    ]
                }
            }
        },
        "vra:image/getProfileImageMappingConstraint:getProfileImageMappingConstraint": {
            "properties": {
                "expression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mandatory": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "expression",
                "mandatory"
            ]
        },
        "vra:loadbalancer/LoadBalancerLink:LoadBalancerLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ]
        },
        "vra:loadbalancer/LoadBalancerNic:LoadBalancerNic": {
            "properties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Additional custom properties that may be used to extend the machine.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "Describes machine within the scope of your organization and is not propagated to the cloud.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deviceIndex": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "A human-friendly name used as an identifier in APIs that support this option.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "networkId"
            ]
        },
        "vra:loadbalancer/LoadBalancerRoute:LoadBalancerRoute": {
            "properties": {
                "healthCheckConfigurations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:loadbalancer/LoadBalancerRouteHealthCheckConfiguration:LoadBalancerRouteHealthCheckConfiguration"
                    },
                    "description": "Load balancer health check configuration.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memberPort": {
                    "type": "string",
                    "description": "Member port where the traffic is routed to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memberProtocol": {
                    "type": "string",
                    "description": "The protocol of the member traffic.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "description": "Port which the load balancer is listening to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol of the incoming load balancer requests.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "memberPort",
                "memberProtocol",
                "port",
                "protocol"
            ]
        },
        "vra:loadbalancer/LoadBalancerRouteHealthCheckConfiguration:LoadBalancerRouteHealthCheckConfiguration": {
            "properties": {
                "healthyThreshold": {
                    "type": "integer",
                    "description": "Number of consecutive successful checks before considering a particular back-end instance as healthy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "intervalSeconds": {
                    "type": "integer",
                    "description": "Interval (in seconds) at which the health checks will be performed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "description": "Port which the load balancer is listening to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol of the incoming load balancer requests.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeoutSeconds": {
                    "type": "integer",
                    "description": "Timeout (in seconds) to wait for a response from the back-end instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "unhealthyThreshold": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "urlPath": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "port",
                "protocol"
            ]
        },
        "vra:loadbalancer/LoadBalancerTag:LoadBalancerTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Tag’s key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Tag’s value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vra:loadbalancer/LoadBalancerTarget:LoadBalancerTarget": {
            "properties": {
                "machineId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkInterfaceId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "machineId"
            ]
        },
        "vra:machine/MachineBootConfig:MachineBootConfig": {
            "properties": {
                "content": {
                    "type": "string",
                    "description": "Calid cloud config data in json-escaped yaml syntax.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "vra:machine/MachineConstraint:MachineConstraint": {
            "properties": {
                "expression": {
                    "type": "string",
                    "description": "Constraint that is conveyed to the policy engine. An expression of the form \"[!]tag-key[:[tag-value]]\", used to indicate a constraint match on keys and values of tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mandatory": {
                    "type": "boolean",
                    "description": "Indicates whether this constraint should be strictly enforced or not.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "expression",
                "mandatory"
            ]
        },
        "vra:machine/MachineDisk:MachineDisk": {
            "properties": {
                "blockDeviceId": {
                    "type": "string",
                    "description": "ID of the existing block device.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "Human-friendly description.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Human-friendly name used as an identifier in APIs that support this option.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "blockDeviceId"
            ]
        },
        "vra:machine/MachineDisksList:MachineDisksList": {
            "properties": {
                "blockDeviceId": {
                    "type": "string",
                    "description": "ID of the existing block device.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "Human-friendly description.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Human-friendly name used as an identifier in APIs that support this option.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "blockDeviceId"
            ]
        },
        "vra:machine/MachineImageDiskConstraint:MachineImageDiskConstraint": {
            "properties": {
                "expression": {
                    "type": "string",
                    "description": "Constraint that is conveyed to the policy engine. An expression of the form \"[!]tag-key[:[tag-value]]\", used to indicate a constraint match on keys and values of tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mandatory": {
                    "type": "boolean",
                    "description": "Indicates whether this constraint should be strictly enforced or not.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "expression",
                "mandatory"
            ]
        },
        "vra:machine/MachineLink:MachineLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ]
        },
        "vra:machine/MachineNic:MachineNic": {
            "properties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IP addresses allocated or in use by this network interface.\nexample:[ \"10.1.2.190\" ]\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Additional properties that may be used to extend the base type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "Human-friendly description.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deviceIndex": {
                    "type": "integer",
                    "description": "The device index of this network interface.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Human-friendly name used as an identifier in APIs that support this option.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkId": {
                    "type": "string",
                    "description": "ID of the network instance that this network interface plugs into.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of security group ids which this network interface will be assigned to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "networkId"
            ]
        },
        "vra:machine/MachineTag:MachineTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Tag’s key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Tag’s value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vra:machine/getMachineLink:getMachineLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vra:machine/getMachineTag:getMachineTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vra:network/IpRangeLink:IpRangeLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ]
        },
        "vra:network/IpRangeTag:IpRangeTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vra:network/NetworkConstraint:NetworkConstraint": {
            "properties": {
                "expression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mandatory": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "expression",
                "mandatory"
            ]
        },
        "vra:network/NetworkLink:NetworkLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ]
        },
        "vra:network/NetworkTag:NetworkTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vra:network/ProfileLink:ProfileLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ]
        },
        "vra:network/ProfileTag:ProfileTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vra:network/getDomainLink:getDomainLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vra:network/getDomainTag:getDomainTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vra:network/getNetworkConstraint:getNetworkConstraint": {
            "properties": {
                "expression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mandatory": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "expression",
                "mandatory"
            ]
        },
        "vra:network/getNetworkLink:getNetworkLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vra:network/getNetworkTag:getNetworkTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vra:network/getProfileLink:getProfileLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vra:network/getProfileTag:getProfileTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vra:project/ProjectAdministratorRole:ProjectAdministratorRole": {
            "properties": {
                "email": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "email"
            ]
        },
        "vra:project/ProjectConstraints:ProjectConstraints": {
            "properties": {
                "extensibilities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:project/ProjectConstraintsExtensibility:ProjectConstraintsExtensibility"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:project/ProjectConstraintsNetwork:ProjectConstraintsNetwork"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:project/ProjectConstraintsStorage:ProjectConstraintsStorage"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "vra:project/ProjectConstraintsExtensibility:ProjectConstraintsExtensibility": {
            "properties": {
                "expression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mandatory": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "expression",
                "mandatory"
            ]
        },
        "vra:project/ProjectConstraintsNetwork:ProjectConstraintsNetwork": {
            "properties": {
                "expression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mandatory": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "expression",
                "mandatory"
            ]
        },
        "vra:project/ProjectConstraintsStorage:ProjectConstraintsStorage": {
            "properties": {
                "expression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mandatory": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "expression",
                "mandatory"
            ]
        },
        "vra:project/ProjectMemberRole:ProjectMemberRole": {
            "properties": {
                "email": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "email"
            ]
        },
        "vra:project/ProjectViewerRole:ProjectViewerRole": {
            "properties": {
                "email": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "email"
            ]
        },
        "vra:project/ProjectZoneAssignment:ProjectZoneAssignment": {
            "properties": {
                "cpuLimit": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxInstances": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memoryLimitMb": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageLimitGb": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "zoneId"
            ]
        },
        "vra:project/getProjectAdministratorRole:getProjectAdministratorRole": {
            "properties": {
                "email": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "email"
            ]
        },
        "vra:project/getProjectConstraints:getProjectConstraints": {
            "properties": {
                "extensibilities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:project/getProjectConstraintsExtensibility:getProjectConstraintsExtensibility"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:project/getProjectConstraintsNetwork:getProjectConstraintsNetwork"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:project/getProjectConstraintsStorage:getProjectConstraintsStorage"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "vra:project/getProjectConstraintsExtensibility:getProjectConstraintsExtensibility": {
            "properties": {
                "expression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mandatory": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "expression",
                "mandatory"
            ]
        },
        "vra:project/getProjectConstraintsNetwork:getProjectConstraintsNetwork": {
            "properties": {
                "expression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mandatory": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "expression",
                "mandatory"
            ]
        },
        "vra:project/getProjectConstraintsStorage:getProjectConstraintsStorage": {
            "properties": {
                "expression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mandatory": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "expression",
                "mandatory"
            ]
        },
        "vra:project/getProjectMemberRole:getProjectMemberRole": {
            "properties": {
                "email": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "email"
            ]
        },
        "vra:project/getProjectViewerRole:getProjectViewerRole": {
            "properties": {
                "email": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "email"
            ]
        },
        "vra:project/getProjectZoneAssignment:getProjectZoneAssignment": {
            "properties": {
                "cpuLimit": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxInstances": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memoryLimitMb": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageLimitGb": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cpuLimit",
                "maxInstances",
                "memoryLimitMb",
                "priority",
                "storageLimitGb",
                "zoneId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vra:securitygroup/getSecurityGroupLink:getSecurityGroupLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vra:securitygroup/getSecurityGroupRule:getSecurityGroupRule": {
            "properties": {
                "access": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "direction": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipRangeCidr": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the security group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ports": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "service": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "access",
                "direction",
                "ipRangeCidr",
                "ports",
                "protocol"
            ]
        },
        "vra:storageprofile/AwsLink:AwsLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ]
        },
        "vra:storageprofile/AwsTag:AwsTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vra:storageprofile/AzureLink:AzureLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ]
        },
        "vra:storageprofile/AzureTag:AzureTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vra:storageprofile/StorageProfileLink:StorageProfileLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ]
        },
        "vra:storageprofile/StorageProfileTag:StorageProfileTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vra:storageprofile/VSphereLink:VSphereLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ]
        },
        "vra:storageprofile/VSphereTag:VSphereTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vra:storageprofile/getAwsLink:getAwsLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vra:storageprofile/getAwsTag:getAwsTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vra:storageprofile/getAzureLink:getAzureLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vra:storageprofile/getAzureTag:getAzureTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vra:storageprofile/getStorageProfileLink:getStorageProfileLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vra:storageprofile/getStorageProfileTag:getStorageProfileTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vra:storageprofile/getVSphereLink:getVSphereLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vra:storageprofile/getVSphereTag:getVSphereTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vra:zone/ZoneLink:ZoneLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ]
        },
        "vra:zone/ZoneTag:ZoneTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Tag’s key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Tag’s value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vra:zone/ZoneTagsToMatch:ZoneTagsToMatch": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Tag’s key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Tag’s value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vra:zone/getZoneLink:getZoneLink": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hrefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rel"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "vra:zone/getZoneTag:getZoneTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Tag’s key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Tag’s value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "vra:zone/getZoneTagsToMatch:getZoneTagsToMatch": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Tag’s key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Tag’s value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        }
    },
    "provider": {
        "description": "The provider type for the vra package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "accessToken": {
                "type": "string",
                "description": "The access token for API operations.\n",
                "secret": true
            },
            "insecure": {
                "type": "boolean",
                "description": "Specify whether to validate TLS certificates.\n"
            },
            "reauthorizeTimeout": {
                "type": "string",
                "description": "Specify timeout for how often to reauthorize the access token\n"
            },
            "refreshToken": {
                "type": "string",
                "description": "The refresh token for API operations.\n",
                "secret": true
            },
            "url": {
                "type": "string",
                "description": "The base url for API operations.\n"
            }
        },
        "inputProperties": {
            "accessToken": {
                "type": "string",
                "description": "The access token for API operations.\n",
                "defaultInfo": {
                    "environment": [
                        "VRA_ACCESS_TOKEN"
                    ]
                },
                "secret": true
            },
            "insecure": {
                "type": "boolean",
                "description": "Specify whether to validate TLS certificates.\n",
                "defaultInfo": {
                    "environment": [
                        "VRA_INSECURE",
                        "VRA7_INSECURE"
                    ]
                }
            },
            "reauthorizeTimeout": {
                "type": "string",
                "description": "Specify timeout for how often to reauthorize the access token\n"
            },
            "refreshToken": {
                "type": "string",
                "description": "The refresh token for API operations.\n",
                "defaultInfo": {
                    "environment": [
                        "VRA_REFRESH_TOKEN"
                    ]
                },
                "secret": true
            },
            "url": {
                "type": "string",
                "description": "The base url for API operations.\n",
                "defaultInfo": {
                    "environment": [
                        "VRA_URL"
                    ]
                }
            }
        }
    },
    "resources": {
        "vra:blockdevice/blockDevice:BlockDevice": {
            "description": "Creates a VMware vRealize Automation block device resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\n\nThe following example shows how to create a block device resource.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumiverse/vra\";\n\nconst disk1 = new vra.blockdevice.BlockDevice(\"disk1\", {\n    capacityInGb: 10,\n    projectId: _var.project_id,\n    persistent: true,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vra as vra\n\ndisk1 = vra.blockdevice.BlockDevice(\"disk1\",\n    capacity_in_gb=10,\n    project_id=var[\"project_id\"],\n    persistent=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumiverse.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var disk1 = new Vra.Blockdevice.BlockDevice(\"disk1\", new()\n    {\n        CapacityInGb = 10,\n        ProjectId = @var.Project_id,\n        Persistent = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/blockdevice\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := blockdevice.NewBlockDevice(ctx, \"disk1\", \u0026blockdevice.BlockDeviceArgs{\n\t\t\tCapacityInGb: pulumi.Int(10),\n\t\t\tProjectId:    pulumi.Any(_var.Project_id),\n\t\t\tPersistent:   pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.blockdevice.BlockDevice;\nimport com.pulumi.vra.blockdevice.BlockDeviceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var disk1 = new BlockDevice(\"disk1\", BlockDeviceArgs.builder()        \n            .capacityInGb(10)\n            .projectId(var_.project_id())\n            .persistent(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  disk1:\n    type: vra:blockdevice:BlockDevice\n    properties:\n      capacityInGb: 10\n      projectId: ${var.project_id}\n      persistent: true\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "capacityInGb": {
                    "type": "integer",
                    "description": "Capacity of block device in GB.\n"
                },
                "constraints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:blockdevice/BlockDeviceConstraint:BlockDeviceConstraint"
                    },
                    "description": "Storage, network, and extensibility constraints to be applied when provisioning through the project.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Date when entity was created. Date and time format is ISO 8601 and UTC.\n"
                },
                "customProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Additional custom properties that may be used to extend the machine.\n"
                },
                "deploymentId": {
                    "type": "string",
                    "description": "ID of deployment associated with resource.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Describes machine within the scope of your organization and is not propagated to the cloud.\n"
                },
                "diskContentBase64": {
                    "type": "string",
                    "description": "Content of a disk, base64 encoded.\n"
                },
                "encrypted": {
                    "type": "boolean",
                    "description": "Indicates whether block device should be encrypted or not.\n"
                },
                "expandSnapshots": {
                    "type": "boolean",
                    "description": "Indicates whether snapshots of block devices should be included in the state. Applies only to first class block devices.\n"
                },
                "externalId": {
                    "type": "string",
                    "description": "External entity ID on provider side.\n"
                },
                "externalRegionId": {
                    "type": "string",
                    "description": "External regionId of resource.\n"
                },
                "externalZoneId": {
                    "type": "string",
                    "description": "External zoneId of resource.\n"
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:blockdevice/BlockDeviceLink:BlockDeviceLink"
                    },
                    "description": "HATEOAS of the entity\n"
                },
                "name": {
                    "type": "string",
                    "description": "Human-friendly name used as an identifier in APIs that support this option.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of organization that block device snapshot belongs to.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Email of block device snapshot owner.\n"
                },
                "persistent": {
                    "type": "boolean",
                    "description": "Indicates whether block device survives a delete action.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of project that current user belongs to.\n"
                },
                "purge": {
                    "type": "boolean",
                    "description": "Indicates if the disk must be completely destroyed or should be kept in the system. Valid only for block devices with ‘persistent’ set to true. Used to destroy the resource.\n"
                },
                "snapshots": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:blockdevice/BlockDeviceSnapshot:BlockDeviceSnapshot"
                    },
                    "description": "Represents a machine snapshot.\n"
                },
                "sourceReference": {
                    "type": "string",
                    "description": "URI to use for block device. Example: ami-0d4cfd66\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of block device.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:blockdevice/BlockDeviceTag:BlockDeviceTag"
                    },
                    "description": "Set of tag keys and values to apply to the resource instance.  \nExample:[ { \"key\" : \"vmware.enumeration.type\", \"value\": \"nebs_block\" } ]\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date when entity was last updated. Date and time format is ISO 8601 and UTC.\n"
                }
            },
            "required": [
                "capacityInGb",
                "createdAt",
                "customProperties",
                "deploymentId",
                "externalId",
                "externalRegionId",
                "externalZoneId",
                "links",
                "name",
                "orgId",
                "owner",
                "projectId",
                "snapshots",
                "status",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "capacityInGb": {
                    "type": "integer",
                    "description": "Capacity of block device in GB.\n"
                },
                "constraints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:blockdevice/BlockDeviceConstraint:BlockDeviceConstraint"
                    },
                    "description": "Storage, network, and extensibility constraints to be applied when provisioning through the project.\n"
                },
                "customProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Additional custom properties that may be used to extend the machine.\n"
                },
                "deploymentId": {
                    "type": "string",
                    "description": "ID of deployment associated with resource.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Describes machine within the scope of your organization and is not propagated to the cloud.\n"
                },
                "diskContentBase64": {
                    "type": "string",
                    "description": "Content of a disk, base64 encoded.\n"
                },
                "encrypted": {
                    "type": "boolean",
                    "description": "Indicates whether block device should be encrypted or not.\n"
                },
                "expandSnapshots": {
                    "type": "boolean",
                    "description": "Indicates whether snapshots of block devices should be included in the state. Applies only to first class block devices.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Human-friendly name used as an identifier in APIs that support this option.\n"
                },
                "persistent": {
                    "type": "boolean",
                    "description": "Indicates whether block device survives a delete action.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of project that current user belongs to.\n"
                },
                "purge": {
                    "type": "boolean",
                    "description": "Indicates if the disk must be completely destroyed or should be kept in the system. Valid only for block devices with ‘persistent’ set to true. Used to destroy the resource.\n"
                },
                "sourceReference": {
                    "type": "string",
                    "description": "URI to use for block device. Example: ami-0d4cfd66\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:blockdevice/BlockDeviceTag:BlockDeviceTag"
                    },
                    "description": "Set of tag keys and values to apply to the resource instance.  \nExample:[ { \"key\" : \"vmware.enumeration.type\", \"value\": \"nebs_block\" } ]\n"
                }
            },
            "requiredInputs": [
                "capacityInGb",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BlockDevice resources.\n",
                "properties": {
                    "capacityInGb": {
                        "type": "integer",
                        "description": "Capacity of block device in GB.\n"
                    },
                    "constraints": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:blockdevice/BlockDeviceConstraint:BlockDeviceConstraint"
                        },
                        "description": "Storage, network, and extensibility constraints to be applied when provisioning through the project.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date when entity was created. Date and time format is ISO 8601 and UTC.\n"
                    },
                    "customProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Additional custom properties that may be used to extend the machine.\n"
                    },
                    "deploymentId": {
                        "type": "string",
                        "description": "ID of deployment associated with resource.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Describes machine within the scope of your organization and is not propagated to the cloud.\n"
                    },
                    "diskContentBase64": {
                        "type": "string",
                        "description": "Content of a disk, base64 encoded.\n"
                    },
                    "encrypted": {
                        "type": "boolean",
                        "description": "Indicates whether block device should be encrypted or not.\n"
                    },
                    "expandSnapshots": {
                        "type": "boolean",
                        "description": "Indicates whether snapshots of block devices should be included in the state. Applies only to first class block devices.\n"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "External entity ID on provider side.\n"
                    },
                    "externalRegionId": {
                        "type": "string",
                        "description": "External regionId of resource.\n"
                    },
                    "externalZoneId": {
                        "type": "string",
                        "description": "External zoneId of resource.\n"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:blockdevice/BlockDeviceLink:BlockDeviceLink"
                        },
                        "description": "HATEOAS of the entity\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Human-friendly name used as an identifier in APIs that support this option.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of organization that block device snapshot belongs to.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Email of block device snapshot owner.\n"
                    },
                    "persistent": {
                        "type": "boolean",
                        "description": "Indicates whether block device survives a delete action.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of project that current user belongs to.\n"
                    },
                    "purge": {
                        "type": "boolean",
                        "description": "Indicates if the disk must be completely destroyed or should be kept in the system. Valid only for block devices with ‘persistent’ set to true. Used to destroy the resource.\n"
                    },
                    "snapshots": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:blockdevice/BlockDeviceSnapshot:BlockDeviceSnapshot"
                        },
                        "description": "Represents a machine snapshot.\n"
                    },
                    "sourceReference": {
                        "type": "string",
                        "description": "URI to use for block device. Example: ami-0d4cfd66\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of block device.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:blockdevice/BlockDeviceTag:BlockDeviceTag"
                        },
                        "description": "Set of tag keys and values to apply to the resource instance.  \nExample:[ { \"key\" : \"vmware.enumeration.type\", \"value\": \"nebs_block\" } ]\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when entity was last updated. Date and time format is ISO 8601 and UTC.\n"
                    }
                },
                "type": "object"
            }
        },
        "vra:blockdevice/snapshot:Snapshot": {
            "description": "Creates a VMware vRealize Automation block device snapshot resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\n\nThe following example shows how to create a block device snapshot resource.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumiverse/vra\";\n\nconst snapshot1 = new vra.blockdevice.Snapshot(\"snapshot1\", {\n    blockDeviceId: _var.block_device_id,\n    description: \"terraform fcd snapshot\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vra as vra\n\nsnapshot1 = vra.blockdevice.Snapshot(\"snapshot1\",\n    block_device_id=var[\"block_device_id\"],\n    description=\"terraform fcd snapshot\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumiverse.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var snapshot1 = new Vra.Blockdevice.Snapshot(\"snapshot1\", new()\n    {\n        BlockDeviceId = @var.Block_device_id,\n        Description = \"terraform fcd snapshot\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/blockdevice\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := blockdevice.NewSnapshot(ctx, \"snapshot1\", \u0026blockdevice.SnapshotArgs{\n\t\t\tBlockDeviceId: pulumi.Any(_var.Block_device_id),\n\t\t\tDescription:   pulumi.String(\"terraform fcd snapshot\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.blockdevice.Snapshot;\nimport com.pulumi.vra.blockdevice.SnapshotArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var snapshot1 = new Snapshot(\"snapshot1\", SnapshotArgs.builder()        \n            .blockDeviceId(var_.block_device_id())\n            .description(\"terraform fcd snapshot\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  snapshot1:\n    type: vra:blockdevice:Snapshot\n    properties:\n      blockDeviceId: ${var.block_device_id}\n      description: terraform fcd snapshot\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "blockDeviceId": {
                    "type": "string",
                    "description": "ID of block device.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Date when entity was created. Date and time format is ISO 8601 and UTC.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Human-friendly description.\n"
                },
                "isCurrent": {
                    "type": "boolean",
                    "description": "Indicates whether snapshot on block device is current.\n"
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:blockdevice/SnapshotLink:SnapshotLink"
                    },
                    "description": "HATEOAS of entity\n"
                },
                "name": {
                    "type": "string",
                    "description": "Human-friendly name used as an identifier in APIs that support this option.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of organization that entity belongs to.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Email of entity owner.\n"
                },
                "updatedAt": {
                    "type": "string"
                }
            },
            "required": [
                "blockDeviceId",
                "createdAt",
                "isCurrent",
                "links",
                "name",
                "orgId",
                "owner",
                "updatedAt"
            ],
            "inputProperties": {
                "blockDeviceId": {
                    "type": "string",
                    "description": "ID of block device.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Human-friendly description.\n"
                }
            },
            "requiredInputs": [
                "blockDeviceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Snapshot resources.\n",
                "properties": {
                    "blockDeviceId": {
                        "type": "string",
                        "description": "ID of block device.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date when entity was created. Date and time format is ISO 8601 and UTC.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Human-friendly description.\n"
                    },
                    "isCurrent": {
                        "type": "boolean",
                        "description": "Indicates whether snapshot on block device is current.\n"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:blockdevice/SnapshotLink:SnapshotLink"
                        },
                        "description": "HATEOAS of entity\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Human-friendly name used as an identifier in APIs that support this option.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of organization that entity belongs to.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Email of entity owner.\n"
                    },
                    "updatedAt": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "vra:blueprint/blueprint:Blueprint": {
            "description": "Creates a VMware vRealize Automation (vRA) cloud template resource, formerly known as a blueprint.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nThe following example shows how to create a blueprint resource.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumiverse/vra\";\n\nconst _this = new vra.blueprint.Blueprint(\"this\", {\n    description: \"Created by vRA terraform provider\",\n    projectId: vra_project[\"this\"].id,\n    content: `formatVersion: 1\ninputs:\n  image:\n    type: string\n    description: \"Image\"\n  flavor:\n    type: string\n    description: \"Flavor\"\nresources:\n  Machine:\n    type: Cloud.Machine\n    properties:\n      image: ${input.image}\n      flavor: ${input.flavor}\n`,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vra as vra\n\nthis = vra.blueprint.Blueprint(\"this\",\n    description=\"Created by vRA terraform provider\",\n    project_id=vra_project[\"this\"][\"id\"],\n    content=f\"\"\"formatVersion: 1\ninputs:\n  image:\n    type: string\n    description: \"Image\"\n  flavor:\n    type: string\n    description: \"Flavor\"\nresources:\n  Machine:\n    type: Cloud.Machine\n    properties:\n      image: {input[\"image\"]}\n      flavor: {input[\"flavor\"]}\n\"\"\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumiverse.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = new Vra.Blueprint.Blueprint(\"this\", new()\n    {\n        Description = \"Created by vRA terraform provider\",\n        ProjectId = vra_project.This.Id,\n        Content = @$\"formatVersion: 1\ninputs:\n  image:\n    type: string\n    description: \"\"Image\"\"\n  flavor:\n    type: string\n    description: \"\"Flavor\"\"\nresources:\n  Machine:\n    type: Cloud.Machine\n    properties:\n      image: {input.Image}\n      flavor: {input.Flavor}\n\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/blueprint\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := blueprint.NewBlueprint(ctx, \"this\", \u0026blueprint.BlueprintArgs{\n\t\t\tDescription: pulumi.String(\"Created by vRA terraform provider\"),\n\t\t\tProjectId:   pulumi.Any(vra_project.This.Id),\n\t\t\tContent: pulumi.String(fmt.Sprintf(`formatVersion: 1\ninputs:\n  image:\n    type: string\n    description: \"Image\"\n  flavor:\n    type: string\n    description: \"Flavor\"\nresources:\n  Machine:\n    type: Cloud.Machine\n    properties:\n      image: %v\n      flavor: %v\n`, input.Image, input.Flavor)),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.blueprint.Blueprint;\nimport com.pulumi.vra.blueprint.BlueprintArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var this_ = new Blueprint(\"this\", BlueprintArgs.builder()        \n            .description(\"Created by vRA terraform provider\")\n            .projectId(vra_project.this().id())\n            .content(\"\"\"\nformatVersion: 1\ninputs:\n  image:\n    type: string\n    description: \"Image\"\n  flavor:\n    type: string\n    description: \"Flavor\"\nresources:\n  Machine:\n    type: Cloud.Machine\n    properties:\n      image: %s\n      flavor: %s\n\", input.image(),input.flavor()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  this:\n    type: vra:blueprint:Blueprint\n    properties:\n      description: Created by vRA terraform provider\n      projectId: ${vra_project.this.id}\n      content: |\n        formatVersion: 1\n        inputs:\n          image:\n            type: string\n            description: \"Image\"\n          flavor:\n            type: string\n            description: \"Flavor\"\n        resources:\n          Machine:\n            type: Cloud.Machine\n            properties:\n              image: ${input.image}\n              flavor: ${input.flavor}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nTo import the cloud template, use the ID as in the following example\n\n```sh\n $ pulumi import vra:blueprint/blueprint:Blueprint this 05956583-6488-4e7d-84c9-92a7b7219a15`\n```\n\n ",
            "properties": {
                "content": {
                    "type": "string",
                    "description": "Blueprint YAML content.\n"
                },
                "contentSourceId": {
                    "type": "string",
                    "description": "ID of content source.\n"
                },
                "contentSourcePath": {
                    "type": "string",
                    "description": "Content source path.\n"
                },
                "contentSourceSyncAt": {
                    "type": "string",
                    "description": "Date when content source was last synced. The date is in ISO 8601 and UTC.\n"
                },
                "contentSourceSyncMessages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Content source last sync messages.\n"
                },
                "contentSourceSyncStatus": {
                    "type": "string",
                    "description": "Content source last sync status. Supported values: `SUCCESSFUL`, `FAILED`.\n"
                },
                "contentSourceType": {
                    "type": "string",
                    "description": "Content source type.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Date when entity was created. The date is in ISO 8601 and UTC.\n"
                },
                "createdBy": {
                    "type": "string",
                    "description": "The user who created entity.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Human-friendly description.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Human-friendly name used as an identifier in APIs that support this option.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of organization that entity belongs to.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of project that entity belongs to.\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "Name of project that entity belongs to.\n"
                },
                "requestScopeOrg": {
                    "type": "boolean",
                    "description": "Flag to indicate whether blueprint can be requested from any project in the organization that entity belongs to.\n"
                },
                "selfLink": {
                    "type": "string",
                    "description": "HATEOAS of entity.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of cloud template. Supported values: `DRAFT`, `VERSIONED`, `RELEASED`.\n"
                },
                "totalReleasedVersions": {
                    "type": "integer",
                    "description": "Total number of released versions.\n"
                },
                "totalVersions": {
                    "type": "integer",
                    "description": "Total number of versions.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date when entity was last updated. Date and time format is ISO 8601 and UTC.\n"
                },
                "updatedBy": {
                    "type": "string",
                    "description": "The user who last updated the entity.\n"
                },
                "valid": {
                    "type": "boolean",
                    "description": "Flag to indicate if the current content of the cloud template/blueprint is valid.\n"
                },
                "validationMessages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:blueprint/BlueprintValidationMessage:BlueprintValidationMessage"
                    },
                    "description": "List of validations messages.\n* message - Validation message.\n"
                }
            },
            "required": [
                "contentSourceId",
                "contentSourcePath",
                "contentSourceSyncAt",
                "contentSourceSyncMessages",
                "contentSourceSyncStatus",
                "contentSourceType",
                "createdAt",
                "createdBy",
                "description",
                "name",
                "orgId",
                "projectId",
                "projectName",
                "requestScopeOrg",
                "selfLink",
                "status",
                "totalReleasedVersions",
                "totalVersions",
                "updatedAt",
                "updatedBy",
                "valid",
                "validationMessages"
            ],
            "inputProperties": {
                "content": {
                    "type": "string",
                    "description": "Blueprint YAML content.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Human-friendly description.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Human-friendly name used as an identifier in APIs that support this option.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of project that entity belongs to.\n"
                },
                "requestScopeOrg": {
                    "type": "boolean",
                    "description": "Flag to indicate whether blueprint can be requested from any project in the organization that entity belongs to.\n"
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Blueprint resources.\n",
                "properties": {
                    "content": {
                        "type": "string",
                        "description": "Blueprint YAML content.\n"
                    },
                    "contentSourceId": {
                        "type": "string",
                        "description": "ID of content source.\n"
                    },
                    "contentSourcePath": {
                        "type": "string",
                        "description": "Content source path.\n"
                    },
                    "contentSourceSyncAt": {
                        "type": "string",
                        "description": "Date when content source was last synced. The date is in ISO 8601 and UTC.\n"
                    },
                    "contentSourceSyncMessages": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Content source last sync messages.\n"
                    },
                    "contentSourceSyncStatus": {
                        "type": "string",
                        "description": "Content source last sync status. Supported values: `SUCCESSFUL`, `FAILED`.\n"
                    },
                    "contentSourceType": {
                        "type": "string",
                        "description": "Content source type.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date when entity was created. The date is in ISO 8601 and UTC.\n"
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "The user who created entity.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Human-friendly description.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Human-friendly name used as an identifier in APIs that support this option.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of organization that entity belongs to.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of project that entity belongs to.\n"
                    },
                    "projectName": {
                        "type": "string",
                        "description": "Name of project that entity belongs to.\n"
                    },
                    "requestScopeOrg": {
                        "type": "boolean",
                        "description": "Flag to indicate whether blueprint can be requested from any project in the organization that entity belongs to.\n"
                    },
                    "selfLink": {
                        "type": "string",
                        "description": "HATEOAS of entity.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of cloud template. Supported values: `DRAFT`, `VERSIONED`, `RELEASED`.\n"
                    },
                    "totalReleasedVersions": {
                        "type": "integer",
                        "description": "Total number of released versions.\n"
                    },
                    "totalVersions": {
                        "type": "integer",
                        "description": "Total number of versions.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when entity was last updated. Date and time format is ISO 8601 and UTC.\n"
                    },
                    "updatedBy": {
                        "type": "string",
                        "description": "The user who last updated the entity.\n"
                    },
                    "valid": {
                        "type": "boolean",
                        "description": "Flag to indicate if the current content of the cloud template/blueprint is valid.\n"
                    },
                    "validationMessages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:blueprint/BlueprintValidationMessage:BlueprintValidationMessage"
                        },
                        "description": "List of validations messages.\n* message - Validation message.\n"
                    }
                },
                "type": "object"
            }
        },
        "vra:blueprint/blueprintVersion:BlueprintVersion": {
            "description": "Creates a VMware vRealize Automation cloud template (blueprint) version resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\n\nThe following example shows how to create a cloud template (blueprint) version resource.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumiverse/vra\";\n\nconst _this = new vra.blueprint.BlueprintVersion(\"this\", {\n    blueprintId: _var.vra_blueprint_id,\n    changeLog: \"First version\",\n    description: \"Released from vRA terraform provider\",\n    release: true,\n    version: random_integer.suffix.result / random_integer.suffix.result,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vra as vra\n\nthis = vra.blueprint.BlueprintVersion(\"this\",\n    blueprint_id=var[\"vra_blueprint_id\"],\n    change_log=\"First version\",\n    description=\"Released from vRA terraform provider\",\n    release=True,\n    version=random_integer[\"suffix\"][\"result\"] / random_integer[\"suffix\"][\"result\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumiverse.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = new Vra.Blueprint.BlueprintVersion(\"this\", new()\n    {\n        BlueprintId = @var.Vra_blueprint_id,\n        ChangeLog = \"First version\",\n        Description = \"Released from vRA terraform provider\",\n        Release = true,\n        Version = random_integer.Suffix.Result / random_integer.Suffix.Result,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/blueprint\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := blueprint.NewBlueprintVersion(ctx, \"this\", \u0026blueprint.BlueprintVersionArgs{\n\t\t\tBlueprintId: pulumi.Any(_var.Vra_blueprint_id),\n\t\t\tChangeLog:   pulumi.String(\"First version\"),\n\t\t\tDescription: pulumi.String(\"Released from vRA terraform provider\"),\n\t\t\tRelease:     pulumi.Bool(true),\n\t\t\tVersion:     random_integer.Suffix.Result / random_integer.Suffix.Result,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.blueprint.BlueprintVersion;\nimport com.pulumi.vra.blueprint.BlueprintVersionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var this_ = new BlueprintVersion(\"this\", BlueprintVersionArgs.builder()        \n            .blueprintId(var_.vra_blueprint_id())\n            .changeLog(\"First version\")\n            .description(\"Released from vRA terraform provider\")\n            .release(true)\n            .version(random_integer.suffix().result() / random_integer.suffix().result())\n            .build());\n\n    }\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nTo import the cloud template (blueprint) version, use the ID as in the following example\n\n```sh\n $ pulumi import vra:blueprint/blueprintVersion:BlueprintVersion this 05956583-6488-4e7d-84c9-92a7b7219a15`\n```\n\n ",
            "properties": {
                "blueprintDescription": {
                    "type": "string",
                    "description": "Description of cloud template (blueprint).\n"
                },
                "blueprintId": {
                    "type": "string",
                    "description": "ID of the cloud template  (blueprint).\n"
                },
                "changeLog": {
                    "type": "string",
                    "description": "Cloud template  (blueprint) version log.\n"
                },
                "content": {
                    "type": "string",
                    "description": "Blueprint YAML content.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Date when the entity was created. Date and time format is ISO 8601 and UTC.\n"
                },
                "createdBy": {
                    "type": "string",
                    "description": "User who created the entity.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Human-friendly description for the cloud template  (blueprint) version.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of cloud template (blueprint) version.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of organization that entity belongs to.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of project that entity belongs to.\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "Name of project that entity belongs to.\n"
                },
                "release": {
                    "type": "boolean",
                    "description": "Flag to indicate whether to release the version.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the cloud template (blueprint). Supported values: `DRAFT`, `VERSIONED`, `RELEASED`.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date when the entity was last updated. Date and time format is ISO 8601 and UTC.\n"
                },
                "updatedBy": {
                    "type": "string",
                    "description": "User who last updated the entity.\n"
                },
                "valid": {
                    "type": "string",
                    "description": "Flag to indicate if the current content of the cloud template (blueprint) is valid.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Cloud template  (blueprint) version.\n"
                }
            },
            "required": [
                "blueprintDescription",
                "blueprintId",
                "content",
                "createdAt",
                "createdBy",
                "name",
                "orgId",
                "projectId",
                "projectName",
                "status",
                "updatedAt",
                "updatedBy",
                "valid",
                "version"
            ],
            "inputProperties": {
                "blueprintId": {
                    "type": "string",
                    "description": "ID of the cloud template  (blueprint).\n"
                },
                "changeLog": {
                    "type": "string",
                    "description": "Cloud template  (blueprint) version log.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Human-friendly description for the cloud template  (blueprint) version.\n"
                },
                "release": {
                    "type": "boolean",
                    "description": "Flag to indicate whether to release the version.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Cloud template  (blueprint) version.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "blueprintId",
                "version"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BlueprintVersion resources.\n",
                "properties": {
                    "blueprintDescription": {
                        "type": "string",
                        "description": "Description of cloud template (blueprint).\n"
                    },
                    "blueprintId": {
                        "type": "string",
                        "description": "ID of the cloud template  (blueprint).\n"
                    },
                    "changeLog": {
                        "type": "string",
                        "description": "Cloud template  (blueprint) version log.\n"
                    },
                    "content": {
                        "type": "string",
                        "description": "Blueprint YAML content.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date when the entity was created. Date and time format is ISO 8601 and UTC.\n"
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "User who created the entity.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Human-friendly description for the cloud template  (blueprint) version.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of cloud template (blueprint) version.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of organization that entity belongs to.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of project that entity belongs to.\n"
                    },
                    "projectName": {
                        "type": "string",
                        "description": "Name of project that entity belongs to.\n"
                    },
                    "release": {
                        "type": "boolean",
                        "description": "Flag to indicate whether to release the version.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the cloud template (blueprint). Supported values: `DRAFT`, `VERSIONED`, `RELEASED`.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when the entity was last updated. Date and time format is ISO 8601 and UTC.\n"
                    },
                    "updatedBy": {
                        "type": "string",
                        "description": "User who last updated the entity.\n"
                    },
                    "valid": {
                        "type": "string",
                        "description": "Flag to indicate if the current content of the cloud template (blueprint) is valid.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "Cloud template  (blueprint) version.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "vra:catalog/itemEntitlement:ItemEntitlement": {
            "description": "This resource provides a way to create a catalog item entitlement in VMware vRealize Automation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumiverse/vra\";\n\nconst _this = new vra.catalog.ItemEntitlement(\"this\", {\n    catalogItemId: _var.catalog_item_id,\n    projectId: _var.project_id,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vra as vra\n\nthis = vra.catalog.ItemEntitlement(\"this\",\n    catalog_item_id=var[\"catalog_item_id\"],\n    project_id=var[\"project_id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumiverse.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = new Vra.Catalog.ItemEntitlement(\"this\", new()\n    {\n        CatalogItemId = @var.Catalog_item_id,\n        ProjectId = @var.Project_id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/catalog\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := catalog.NewItemEntitlement(ctx, \"this\", \u0026catalog.ItemEntitlementArgs{\n\t\t\tCatalogItemId: pulumi.Any(_var.Catalog_item_id),\n\t\t\tProjectId:     pulumi.Any(_var.Project_id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.catalog.ItemEntitlement;\nimport com.pulumi.vra.catalog.ItemEntitlementArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var this_ = new ItemEntitlement(\"this\", ItemEntitlementArgs.builder()        \n            .catalogItemId(var_.catalog_item_id())\n            .projectId(var_.project_id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  this:\n    type: vra:catalog:ItemEntitlement\n    properties:\n      catalogItemId: ${var.catalog_item_id}\n      projectId: ${var.project_id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCatalog item entitlement can be imported using the id, e.g.\n\n```sh\n $ pulumi import vra:catalog/itemEntitlement:ItemEntitlement this 05956583-6488-4e7d-84c9-92a7b7219a15`\n```\n\n ",
            "properties": {
                "catalogItemId": {
                    "type": "string",
                    "description": "The id of the catalog item to create the entitlement.\n"
                },
                "definitions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:catalog/ItemEntitlementDefinition:ItemEntitlementDefinition"
                    },
                    "description": "Represents a catalog item that is linked to a project via an entitlement.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The id of the project this entity belongs to.\n"
                }
            },
            "required": [
                "catalogItemId",
                "definitions",
                "projectId"
            ],
            "inputProperties": {
                "catalogItemId": {
                    "type": "string",
                    "description": "The id of the catalog item to create the entitlement.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The id of the project this entity belongs to.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "catalogItemId",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ItemEntitlement resources.\n",
                "properties": {
                    "catalogItemId": {
                        "type": "string",
                        "description": "The id of the catalog item to create the entitlement.\n",
                        "willReplaceOnChanges": true
                    },
                    "definitions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:catalog/ItemEntitlementDefinition:ItemEntitlementDefinition"
                        },
                        "description": "Represents a catalog item that is linked to a project via an entitlement.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The id of the project this entity belongs to.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "vra:catalog/sourceBlueprint:SourceBlueprint": {
            "description": "Creates a VMware vRealize Automation catalog source resource of type cloud template, formerly known as a blueprint.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\n\nThe following example shows how to create a catalog source resource. \n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumiverse/vra\";\n\nconst _this = new vra.catalog.SourceBlueprint(\"this\", {projectId: _var.vra_project_id});\n```\n```python\nimport pulumi\nimport pulumiverse_vra as vra\n\nthis = vra.catalog.SourceBlueprint(\"this\", project_id=var[\"vra_project_id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumiverse.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = new Vra.Catalog.SourceBlueprint(\"this\", new()\n    {\n        ProjectId = @var.Vra_project_id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/catalog\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := catalog.NewSourceBlueprint(ctx, \"this\", \u0026catalog.SourceBlueprintArgs{\n\t\t\tProjectId: pulumi.Any(_var.Vra_project_id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.catalog.SourceBlueprint;\nimport com.pulumi.vra.catalog.SourceBlueprintArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var this_ = new SourceBlueprint(\"this\", SourceBlueprintArgs.builder()        \n            .projectId(var_.vra_project_id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  this:\n    type: vra:catalog:SourceBlueprint\n    properties:\n      projectId: ${var.vra_project_id}\n```\n\n{{% /example %}}\n{{% /examples %}}\n## Attribute Reference \n\n* `created_at` - Date when entity was created. Date and time format is ISO 8601 and UTC.\n\n* `created_by` - User who created the entity.\n\n* `global` - Flag indicating that all items can be requested across all projects.\n\n* `id` - ID of catalog source.\n\n* `items_found` - Number of items found in the catalog source.\n\n* `items_imported` - Number of items imported from the catalog source.\n\n* `last_import_completed_at` - Time at which the last import completed.\n\n* `last_import_errors` - List of errors seen when the catalog source was last imported.\n\n* `last_import_started_at` - Time at which the last import started.\n\n* `last_updated_by` - User who last updated the catalog source. \n\n* `type_id` - Type of catalog source. Example: `blueprint`, `CFT`, etc.\n\n\n## Import\n\nTo import the cloud template catalog source, use the ID as in the following example\n\n```sh\n $ pulumi import vra:catalog/sourceBlueprint:SourceBlueprint this 05956583-6488-4e7d-84c9-92a7b7219a15`\n```\n\n ",
            "properties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Custom configuration of the catalog source as a map of key values.\n"
                },
                "createdAt": {
                    "type": "string"
                },
                "createdBy": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "Human-friendly description.\n"
                },
                "global": {
                    "type": "boolean"
                },
                "itemsFound": {
                    "type": "string"
                },
                "itemsImported": {
                    "type": "string"
                },
                "lastImportCompletedAt": {
                    "type": "string"
                },
                "lastImportErrors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "lastImportStartedAt": {
                    "type": "string"
                },
                "lastUpdatedBy": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "Human-friendly name used as an identifier in APIs that support this option.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of the project this entity belongs to.\n"
                },
                "typeId": {
                    "type": "string"
                }
            },
            "required": [
                "config",
                "createdAt",
                "createdBy",
                "global",
                "itemsFound",
                "itemsImported",
                "lastImportCompletedAt",
                "lastImportErrors",
                "lastImportStartedAt",
                "lastUpdatedBy",
                "name",
                "projectId",
                "typeId"
            ],
            "inputProperties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Custom configuration of the catalog source as a map of key values.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Human-friendly description.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Human-friendly name used as an identifier in APIs that support this option.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of the project this entity belongs to.\n"
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceBlueprint resources.\n",
                "properties": {
                    "config": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Custom configuration of the catalog source as a map of key values.\n"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "Human-friendly description.\n"
                    },
                    "global": {
                        "type": "boolean"
                    },
                    "itemsFound": {
                        "type": "string"
                    },
                    "itemsImported": {
                        "type": "string"
                    },
                    "lastImportCompletedAt": {
                        "type": "string"
                    },
                    "lastImportErrors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "lastImportStartedAt": {
                        "type": "string"
                    },
                    "lastUpdatedBy": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "Human-friendly name used as an identifier in APIs that support this option.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of the project this entity belongs to.\n"
                    },
                    "typeId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "vra:catalog/sourceEntitlement:SourceEntitlement": {
            "description": "This resource provides a way to create a catalog source entitlement in VMware vRealize Automation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumiverse/vra\";\n\nconst _this = new vra.catalog.SourceEntitlement(\"this\", {\n    catalogSourceId: _var.catalog_source_blueprint_id,\n    projectId: _var.project_id,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vra as vra\n\nthis = vra.catalog.SourceEntitlement(\"this\",\n    catalog_source_id=var[\"catalog_source_blueprint_id\"],\n    project_id=var[\"project_id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumiverse.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = new Vra.Catalog.SourceEntitlement(\"this\", new()\n    {\n        CatalogSourceId = @var.Catalog_source_blueprint_id,\n        ProjectId = @var.Project_id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/catalog\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := catalog.NewSourceEntitlement(ctx, \"this\", \u0026catalog.SourceEntitlementArgs{\n\t\t\tCatalogSourceId: pulumi.Any(_var.Catalog_source_blueprint_id),\n\t\t\tProjectId:       pulumi.Any(_var.Project_id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.catalog.SourceEntitlement;\nimport com.pulumi.vra.catalog.SourceEntitlementArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var this_ = new SourceEntitlement(\"this\", SourceEntitlementArgs.builder()        \n            .catalogSourceId(var_.catalog_source_blueprint_id())\n            .projectId(var_.project_id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  this:\n    type: vra:catalog:SourceEntitlement\n    properties:\n      catalogSourceId: ${var.catalog_source_blueprint_id}\n      projectId: ${var.project_id}\n```\n{{% /example %}}\n{{% /examples %}}\n## Attribute Reference \n\n* `definition` - Represents a catalog source that is linked to a project via an entitlement.\n\n    * `description` - Description of the catalog source.\n\n    * `icon_id` - Icon id of associated catalog source.\n\n    * `id` - Id of the catalog source.\n\n    * `name` - Name of the catalog source.\n\n    * `number_of_items` - Number of items in the associated catalog source.\n\n    * `source_name` - Catalog source name.\n\n    * `source_type` - Catalog source type.\n\n    * `type` - Content definition type.\n\n\n## Import\n\nCatalog source entitlement can be imported using the id, e.g.\n\n```sh\n $ pulumi import vra:catalog/sourceEntitlement:SourceEntitlement this 05956583-6488-4e7d-84c9-92a7b7219a15`\n```\n\n ",
            "properties": {
                "catalogSourceId": {
                    "type": "string",
                    "description": "The id of the catalog source to create the entitlement.\n"
                },
                "definitions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:catalog/SourceEntitlementDefinition:SourceEntitlementDefinition"
                    }
                },
                "projectId": {
                    "type": "string",
                    "description": "The id of the project this entity belongs to.\n"
                }
            },
            "required": [
                "catalogSourceId",
                "definitions",
                "projectId"
            ],
            "inputProperties": {
                "catalogSourceId": {
                    "type": "string",
                    "description": "The id of the catalog source to create the entitlement.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The id of the project this entity belongs to.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "catalogSourceId",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SourceEntitlement resources.\n",
                "properties": {
                    "catalogSourceId": {
                        "type": "string",
                        "description": "The id of the catalog source to create the entitlement.\n",
                        "willReplaceOnChanges": true
                    },
                    "definitions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:catalog/SourceEntitlementDefinition:SourceEntitlementDefinition"
                        }
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The id of the project this entity belongs to.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "vra:cloudaccount/aws:Aws": {
            "description": "Creates a VMware vRealize Automation AWS cloud account resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\n\nThe following example shows how to create an AWS cloud account resource.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumiverse/vra\";\n\nconst _this = new vra.cloudaccount.Aws(\"this\", {\n    description: \"terraform test cloud account aws\",\n    accessKey: _var.access_key,\n    secretKey: _var.secret_key,\n    regions: [\n        \"us-east-1\",\n        \"us-west-1\",\n    ],\n    tags: [{\n        key: \"foo\",\n        value: \"bar\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vra as vra\n\nthis = vra.cloudaccount.Aws(\"this\",\n    description=\"terraform test cloud account aws\",\n    access_key=var[\"access_key\"],\n    secret_key=var[\"secret_key\"],\n    regions=[\n        \"us-east-1\",\n        \"us-west-1\",\n    ],\n    tags=[vra.cloudaccount.AwsTagArgs(\n        key=\"foo\",\n        value=\"bar\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumiverse.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = new Vra.Cloudaccount.Aws(\"this\", new()\n    {\n        Description = \"terraform test cloud account aws\",\n        AccessKey = @var.Access_key,\n        SecretKey = @var.Secret_key,\n        Regions = new[]\n        {\n            \"us-east-1\",\n            \"us-west-1\",\n        },\n        Tags = new[]\n        {\n            new Vra.Cloudaccount.Inputs.AwsTagArgs\n            {\n                Key = \"foo\",\n                Value = \"bar\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/cloudaccount\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/cloudaccount\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudaccount.NewAws(ctx, \"this\", \u0026cloudaccount.AwsArgs{\n\t\t\tDescription: pulumi.String(\"terraform test cloud account aws\"),\n\t\t\tAccessKey:   pulumi.Any(_var.Access_key),\n\t\t\tSecretKey:   pulumi.Any(_var.Secret_key),\n\t\t\tRegions: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"us-east-1\"),\n\t\t\t\tpulumi.String(\"us-west-1\"),\n\t\t\t},\n\t\t\tTags: cloudaccount.AwsTagArray{\n\t\t\t\t\u0026cloudaccount.AwsTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"foo\"),\n\t\t\t\t\tValue: pulumi.String(\"bar\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.cloudaccount.Aws;\nimport com.pulumi.vra.cloudaccount.AwsArgs;\nimport com.pulumi.vra.cloudaccount.inputs.AwsTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var this_ = new Aws(\"this\", AwsArgs.builder()        \n            .description(\"terraform test cloud account aws\")\n            .accessKey(var_.access_key())\n            .secretKey(var_.secret_key())\n            .regions(            \n                \"us-east-1\",\n                \"us-west-1\")\n            .tags(AwsTagArgs.builder()\n                .key(\"foo\")\n                .value(\"bar\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  this:\n    type: vra:cloudaccount:Aws\n    properties:\n      description: terraform test cloud account aws\n      accessKey: ${var.access_key}\n      secretKey: ${var.secret_key}\n      regions: # Regions to be enabled for this cloud account\n        - us-east-1\n        - us-west-1\n      tags:\n        - key: foo\n          value: bar\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nTo import the AWS cloud account, use the ID as in the following example\n\n```sh\n $ pulumi import vra:cloudaccount/aws:Aws new_aws 05956583-6488-4e7d-84c9-92a7b7219a15`\n```\n\n ",
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "Access key ID for AWS.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Date when entity was created. Date and time format is ISO 8601 and UTC.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Human-friendly description.\n"
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:cloudaccount/AwsLink:AwsLink"
                    },
                    "description": "HATEOAS of entity.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of AWS cloud account.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of organization that entity belongs to.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Email of entity owner.\n"
                },
                "regions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of region names enabled for the cloud account.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "AWS Secret Access Key\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:cloudaccount/AwsTag:AwsTag"
                    },
                    "description": "Set of tag keys and values to apply to the cloud account.  \nExample:[ { \"key\" : \"vmware\", \"value\": \"provider\" } ]\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date when entity was last updated. Date and time format is ISO 8601 and UTC.\n"
                }
            },
            "required": [
                "accessKey",
                "createdAt",
                "links",
                "name",
                "orgId",
                "owner",
                "regions",
                "secretKey",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "accessKey": {
                    "type": "string",
                    "description": "Access key ID for AWS.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Human-friendly description.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of AWS cloud account.\n"
                },
                "regions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of region names enabled for the cloud account.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "AWS Secret Access Key\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:cloudaccount/AwsTag:AwsTag"
                    },
                    "description": "Set of tag keys and values to apply to the cloud account.  \nExample:[ { \"key\" : \"vmware\", \"value\": \"provider\" } ]\n"
                }
            },
            "requiredInputs": [
                "accessKey",
                "regions",
                "secretKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Aws resources.\n",
                "properties": {
                    "accessKey": {
                        "type": "string",
                        "description": "Access key ID for AWS.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date when entity was created. Date and time format is ISO 8601 and UTC.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Human-friendly description.\n"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:cloudaccount/AwsLink:AwsLink"
                        },
                        "description": "HATEOAS of entity.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of AWS cloud account.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of organization that entity belongs to.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Email of entity owner.\n"
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of region names enabled for the cloud account.\n"
                    },
                    "secretKey": {
                        "type": "string",
                        "description": "AWS Secret Access Key\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:cloudaccount/AwsTag:AwsTag"
                        },
                        "description": "Set of tag keys and values to apply to the cloud account.  \nExample:[ { \"key\" : \"vmware\", \"value\": \"provider\" } ]\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when entity was last updated. Date and time format is ISO 8601 and UTC.\n"
                    }
                },
                "type": "object"
            }
        },
        "vra:cloudaccount/azure:Azure": {
            "description": "Creates a VMware vRealize Automation Azure cloud account resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\n\nThe following example shows how to create an Azure cloud account resource.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst thisAzure = new vra.cloudaccount.Azure(\"this\", {\n    applicationId: \"sample-application-id\",\n    applicationKey: \"sample-application=key\",\n    description: \"test cloud account\",\n    regions: [\"centralus\"],\n    subscriptionId: \"sample-subscription-id\",\n    tenantId: \"sample-tenant-id\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vra as vra\n\nthis = vra.cloudaccount.Azure(\"this\",\n    application_id=\"sample-application-id\",\n    application_key=\"sample-application=key\",\n    description=\"test cloud account\",\n    regions=[\"centralus\"],\n    subscription_id=\"sample-subscription-id\",\n    tenant_id=\"sample-tenant-id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumiverse.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = new Vra.Cloudaccount.Azure(\"this\", new()\n    {\n        ApplicationId = \"sample-application-id\",\n        ApplicationKey = \"sample-application=key\",\n        Description = \"test cloud account\",\n        Regions = new[]\n        {\n            \"centralus\",\n        },\n        SubscriptionId = \"sample-subscription-id\",\n        TenantId = \"sample-tenant-id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/cloudaccount\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudaccount.NewAzure(ctx, \"this\", \u0026cloudaccount.AzureArgs{\n\t\t\tApplicationId:  pulumi.String(\"sample-application-id\"),\n\t\t\tApplicationKey: pulumi.String(\"sample-application=key\"),\n\t\t\tDescription:    pulumi.String(\"test cloud account\"),\n\t\t\tRegions: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"centralus\"),\n\t\t\t},\n\t\t\tSubscriptionId: pulumi.String(\"sample-subscription-id\"),\n\t\t\tTenantId:       pulumi.String(\"sample-tenant-id\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.cloudaccount.Azure;\nimport com.pulumi.vra.cloudaccount.AzureArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var this_ = new Azure(\"this\", AzureArgs.builder()        \n            .applicationId(\"sample-application-id\")\n            .applicationKey(\"sample-application=key\")\n            .description(\"test cloud account\")\n            .regions(\"centralus\")\n            .subscriptionId(\"sample-subscription-id\")\n            .tenantId(\"sample-tenant-id\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  this:\n    type: vra:cloudaccount:Azure\n    properties:\n      applicationId: sample-application-id\n      applicationKey: sample-application=key\n      description: test cloud account\n      regions:\n        - centralus\n      subscriptionId: sample-subscription-id\n      tenantId: sample-tenant-id\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nTo import the Azure cloud account, use the ID as in the following example\n\n```sh\n $ pulumi import vra:cloudaccount/azure:Azure new_azure 05956583-6488-4e7d-84c9-92a7b7219a15`\n```\n\n ",
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "Azure Client Application ID.\n"
                },
                "applicationKey": {
                    "type": "string",
                    "description": "Azure Client Application Secret Key.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Date when entity was created. Date and time format is ISO 8601 and UTC.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Human-friendly description.\n"
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:cloudaccount/AzureLink:AzureLink"
                    },
                    "description": "HATEOAS of entity.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Azure cloud account.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of organization that entity belongs to.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Email of entity owner.\n"
                },
                "regions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of region names enabled for the cloud account.\n"
                },
                "subscriptionId": {
                    "type": "string",
                    "description": "Azure Subscription ID.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:cloudaccount/AzureTag:AzureTag"
                    },
                    "description": "Set of tag keys and values to apply to the cloud account.  \nExample:[ { \"key\" : \"vmware\", \"value\": \"provider\" } ]\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "Azure Tenant ID.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date when entity was last updated. Date and time format is ISO 8601 and UTC.\n"
                }
            },
            "required": [
                "applicationId",
                "applicationKey",
                "createdAt",
                "links",
                "name",
                "orgId",
                "owner",
                "regions",
                "subscriptionId",
                "tags",
                "tenantId",
                "updatedAt"
            ],
            "inputProperties": {
                "applicationId": {
                    "type": "string",
                    "description": "Azure Client Application ID.\n"
                },
                "applicationKey": {
                    "type": "string",
                    "description": "Azure Client Application Secret Key.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Human-friendly description.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Azure cloud account.\n"
                },
                "regions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of region names enabled for the cloud account.\n"
                },
                "subscriptionId": {
                    "type": "string",
                    "description": "Azure Subscription ID.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:cloudaccount/AzureTag:AzureTag"
                    },
                    "description": "Set of tag keys and values to apply to the cloud account.  \nExample:[ { \"key\" : \"vmware\", \"value\": \"provider\" } ]\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "Azure Tenant ID.\n"
                }
            },
            "requiredInputs": [
                "applicationId",
                "applicationKey",
                "regions",
                "subscriptionId",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Azure resources.\n",
                "properties": {
                    "applicationId": {
                        "type": "string",
                        "description": "Azure Client Application ID.\n"
                    },
                    "applicationKey": {
                        "type": "string",
                        "description": "Azure Client Application Secret Key.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date when entity was created. Date and time format is ISO 8601 and UTC.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Human-friendly description.\n"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:cloudaccount/AzureLink:AzureLink"
                        },
                        "description": "HATEOAS of entity.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of Azure cloud account.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of organization that entity belongs to.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Email of entity owner.\n"
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of region names enabled for the cloud account.\n"
                    },
                    "subscriptionId": {
                        "type": "string",
                        "description": "Azure Subscription ID.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:cloudaccount/AzureTag:AzureTag"
                        },
                        "description": "Set of tag keys and values to apply to the cloud account.  \nExample:[ { \"key\" : \"vmware\", \"value\": \"provider\" } ]\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "Azure Tenant ID.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when entity was last updated. Date and time format is ISO 8601 and UTC.\n"
                    }
                },
                "type": "object"
            }
        },
        "vra:cloudaccount/gcp:Gcp": {
            "description": "Creates a VMware vRealize Automation GCP cloud account resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\n\nThe following example shows how to create a GCP cloud account resource.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst thisGcp = new vra.cloudaccount.Gcp(\"this\", {\n    clientEmail: \"client_email\",\n    description: \"terraform test cloud account gcp\",\n    privateKey: \"private_key\",\n    privateKeyId: \"private_key_id\",\n    projectId: \"project_id\",\n    regions: [\n        \"us-west1\",\n        \"us-west2\",\n    ],\n    tags: [{\n        key: \"foo\",\n        value: \"bar\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vra as vra\n\nthis = vra.cloudaccount.Gcp(\"this\",\n    client_email=\"client_email\",\n    description=\"terraform test cloud account gcp\",\n    private_key=\"private_key\",\n    private_key_id=\"private_key_id\",\n    project_id=\"project_id\",\n    regions=[\n        \"us-west1\",\n        \"us-west2\",\n    ],\n    tags=[vra.cloudaccount.GcpTagArgs(\n        key=\"foo\",\n        value=\"bar\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumiverse.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = new Vra.Cloudaccount.Gcp(\"this\", new()\n    {\n        ClientEmail = \"client_email\",\n        Description = \"terraform test cloud account gcp\",\n        PrivateKey = \"private_key\",\n        PrivateKeyId = \"private_key_id\",\n        ProjectId = \"project_id\",\n        Regions = new[]\n        {\n            \"us-west1\",\n            \"us-west2\",\n        },\n        Tags = new[]\n        {\n            new Vra.Cloudaccount.Inputs.GcpTagArgs\n            {\n                Key = \"foo\",\n                Value = \"bar\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/cloudaccount\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/cloudaccount\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudaccount.NewGcp(ctx, \"this\", \u0026cloudaccount.GcpArgs{\n\t\t\tClientEmail:  pulumi.String(\"client_email\"),\n\t\t\tDescription:  pulumi.String(\"terraform test cloud account gcp\"),\n\t\t\tPrivateKey:   pulumi.String(\"private_key\"),\n\t\t\tPrivateKeyId: pulumi.String(\"private_key_id\"),\n\t\t\tProjectId:    pulumi.String(\"project_id\"),\n\t\t\tRegions: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"us-west1\"),\n\t\t\t\tpulumi.String(\"us-west2\"),\n\t\t\t},\n\t\t\tTags: cloudaccount.GcpTagArray{\n\t\t\t\t\u0026cloudaccount.GcpTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"foo\"),\n\t\t\t\t\tValue: pulumi.String(\"bar\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.cloudaccount.Gcp;\nimport com.pulumi.vra.cloudaccount.GcpArgs;\nimport com.pulumi.vra.cloudaccount.inputs.GcpTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var this_ = new Gcp(\"this\", GcpArgs.builder()        \n            .clientEmail(\"client_email\")\n            .description(\"terraform test cloud account gcp\")\n            .privateKey(\"private_key\")\n            .privateKeyId(\"private_key_id\")\n            .projectId(\"project_id\")\n            .regions(            \n                \"us-west1\",\n                \"us-west2\")\n            .tags(GcpTagArgs.builder()\n                .key(\"foo\")\n                .value(\"bar\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  this:\n    type: vra:cloudaccount:Gcp\n    properties:\n      clientEmail: client_email\n      description: terraform test cloud account gcp\n      privateKey: private_key\n      privateKeyId: private_key_id\n      projectId: project_id\n      regions:\n        - us-west1\n        - us-west2\n      tags:\n        - key: foo\n          value: bar\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nTo import the GCP cloud account, use the ID as in the following example\n\n```sh\n $ pulumi import vra:cloudaccount/gcp:Gcp new_gcp 05956583-6488-4e7d-84c9-92a7b7219a15`\n```\n\n ",
            "properties": {
                "clientEmail": {
                    "type": "string",
                    "description": "GCP Client email.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Date when entity was created. Date and time format is ISO 8601 and UTC.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Human-friendly description.\n"
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:cloudaccount/GcpLink:GcpLink"
                    },
                    "description": "HATEOAS of entity.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of GCP cloud account.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of organization that entity belongs to.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Email of entity owner.\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "GCP Private key.\n"
                },
                "privateKeyId": {
                    "type": "string",
                    "description": "GCP Private key ID.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "GCP Project ID.\n"
                },
                "regions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of region names enabled for the cloud account.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:cloudaccount/GcpTag:GcpTag"
                    },
                    "description": "Set of tag keys and values to apply to the cloud account.  \nExample:[ { \"key\" : \"vmware\", \"value\": \"provider\" } ]\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date when entity was last updated. Date and time format is ISO 8601 and UTC.\n"
                }
            },
            "required": [
                "clientEmail",
                "createdAt",
                "links",
                "name",
                "orgId",
                "owner",
                "privateKey",
                "privateKeyId",
                "projectId",
                "regions",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "clientEmail": {
                    "type": "string",
                    "description": "GCP Client email.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Human-friendly description.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of GCP cloud account.\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "GCP Private key.\n"
                },
                "privateKeyId": {
                    "type": "string",
                    "description": "GCP Private key ID.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "GCP Project ID.\n"
                },
                "regions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of region names enabled for the cloud account.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:cloudaccount/GcpTag:GcpTag"
                    },
                    "description": "Set of tag keys and values to apply to the cloud account.  \nExample:[ { \"key\" : \"vmware\", \"value\": \"provider\" } ]\n"
                }
            },
            "requiredInputs": [
                "clientEmail",
                "privateKey",
                "privateKeyId",
                "projectId",
                "regions"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Gcp resources.\n",
                "properties": {
                    "clientEmail": {
                        "type": "string",
                        "description": "GCP Client email.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date when entity was created. Date and time format is ISO 8601 and UTC.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Human-friendly description.\n"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:cloudaccount/GcpLink:GcpLink"
                        },
                        "description": "HATEOAS of entity.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of GCP cloud account.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of organization that entity belongs to.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Email of entity owner.\n"
                    },
                    "privateKey": {
                        "type": "string",
                        "description": "GCP Private key.\n"
                    },
                    "privateKeyId": {
                        "type": "string",
                        "description": "GCP Private key ID.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "GCP Project ID.\n"
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of region names enabled for the cloud account.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:cloudaccount/GcpTag:GcpTag"
                        },
                        "description": "Set of tag keys and values to apply to the cloud account.  \nExample:[ { \"key\" : \"vmware\", \"value\": \"provider\" } ]\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when entity was last updated. Date and time format is ISO 8601 and UTC.\n"
                    }
                },
                "type": "object"
            }
        },
        "vra:cloudaccount/nsxt:Nsxt": {
            "description": "Creates a VMware vRealize Automation NSX-T cloud account resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\n\nThe following example shows how to create an NSX-T cloud account resource.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumiverse/vra\";\n\nconst _this = new vra.cloudaccount.Nsxt(\"this\", {\n    description: \"foobar\",\n    username: _var.username,\n    password: _var.password,\n    hostname: _var.hostname,\n    dcId: _var.vra_data_collector_id,\n    acceptSelfSignedCert: true,\n    tags: [{\n        key: \"foo\",\n        value: \"bar\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vra as vra\n\nthis = vra.cloudaccount.Nsxt(\"this\",\n    description=\"foobar\",\n    username=var[\"username\"],\n    password=var[\"password\"],\n    hostname=var[\"hostname\"],\n    dc_id=var[\"vra_data_collector_id\"],\n    accept_self_signed_cert=True,\n    tags=[vra.cloudaccount.NsxtTagArgs(\n        key=\"foo\",\n        value=\"bar\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumiverse.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = new Vra.Cloudaccount.Nsxt(\"this\", new()\n    {\n        Description = \"foobar\",\n        Username = @var.Username,\n        Password = @var.Password,\n        Hostname = @var.Hostname,\n        DcId = @var.Vra_data_collector_id,\n        AcceptSelfSignedCert = true,\n        Tags = new[]\n        {\n            new Vra.Cloudaccount.Inputs.NsxtTagArgs\n            {\n                Key = \"foo\",\n                Value = \"bar\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/cloudaccount\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/cloudaccount\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudaccount.NewNsxt(ctx, \"this\", \u0026cloudaccount.NsxtArgs{\n\t\t\tDescription:          pulumi.String(\"foobar\"),\n\t\t\tUsername:             pulumi.Any(_var.Username),\n\t\t\tPassword:             pulumi.Any(_var.Password),\n\t\t\tHostname:             pulumi.Any(_var.Hostname),\n\t\t\tDcId:                 pulumi.Any(_var.Vra_data_collector_id),\n\t\t\tAcceptSelfSignedCert: pulumi.Bool(true),\n\t\t\tTags: cloudaccount.NsxtTagArray{\n\t\t\t\t\u0026cloudaccount.NsxtTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"foo\"),\n\t\t\t\t\tValue: pulumi.String(\"bar\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.cloudaccount.Nsxt;\nimport com.pulumi.vra.cloudaccount.NsxtArgs;\nimport com.pulumi.vra.cloudaccount.inputs.NsxtTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var this_ = new Nsxt(\"this\", NsxtArgs.builder()        \n            .description(\"foobar\")\n            .username(var_.username())\n            .password(var_.password())\n            .hostname(var_.hostname())\n            .dcId(var_.vra_data_collector_id())\n            .acceptSelfSignedCert(true)\n            .tags(NsxtTagArgs.builder()\n                .key(\"foo\")\n                .value(\"bar\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  this:\n    type: vra:cloudaccount:Nsxt\n    properties:\n      description: foobar\n      username: ${var.username}\n      password: ${var.password}\n      hostname: ${var.hostname}\n      dcId: ${var.vra_data_collector_id}\n      acceptSelfSignedCert: true\n      tags:\n        - key: foo\n          value: bar\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nTo import the NSX-T cloud account, use the ID as in the following example\n\n```sh\n $ pulumi import vra:cloudaccount/nsxt:Nsxt new_gcp 05956583-6488-4e7d-84c9-92a7b7219a15`\n```\n\n ",
            "properties": {
                "acceptSelfSignedCert": {
                    "type": "boolean",
                    "description": "Accept self-signed certificate when connecting to the cloud account.\n"
                },
                "associatedCloudAccountIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Cloud accounts associated with the cloud account.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Date when entity was created. Date and time format is ISO 8601 and UTC.\n"
                },
                "dcId": {
                    "type": "string",
                    "description": "Identifier of a data collector VM deployed in the on premise infrastructure.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Human-friendly description.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Host name for NSX-T cloud account.\n"
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:cloudaccount/NsxtLink:NsxtLink"
                    },
                    "description": "HATEOAS of entity.\n"
                },
                "managerMode": {
                    "type": "boolean",
                    "description": "Create NSX-T cloud account in Manager (legacy) mode. When set to true, NSX-T cloud account is created in Manager mode.\nMode cannot be changed after cloud account is created. Default value is false.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of NSX-T cloud account.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of organization that entity belongs to.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Email of entity owner.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password used to authenticate to the cloud Account.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:cloudaccount/NsxtTag:NsxtTag"
                    },
                    "description": "Set of tag keys and values to apply to the cloud account.  \nExample:[ { \"key\" : \"vmware\", \"value\": \"provider\" } ]\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date when entity was last updated. Date and time format is ISO 8601 and UTC.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username used to authenticate to the cloud account.\n"
                }
            },
            "required": [
                "associatedCloudAccountIds",
                "createdAt",
                "hostname",
                "links",
                "name",
                "orgId",
                "owner",
                "password",
                "tags",
                "updatedAt",
                "username"
            ],
            "inputProperties": {
                "acceptSelfSignedCert": {
                    "type": "boolean",
                    "description": "Accept self-signed certificate when connecting to the cloud account.\n"
                },
                "dcId": {
                    "type": "string",
                    "description": "Identifier of a data collector VM deployed in the on premise infrastructure.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Human-friendly description.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Host name for NSX-T cloud account.\n"
                },
                "managerMode": {
                    "type": "boolean",
                    "description": "Create NSX-T cloud account in Manager (legacy) mode. When set to true, NSX-T cloud account is created in Manager mode.\nMode cannot be changed after cloud account is created. Default value is false.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of NSX-T cloud account.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password used to authenticate to the cloud Account.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:cloudaccount/NsxtTag:NsxtTag"
                    },
                    "description": "Set of tag keys and values to apply to the cloud account.  \nExample:[ { \"key\" : \"vmware\", \"value\": \"provider\" } ]\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username used to authenticate to the cloud account.\n"
                }
            },
            "requiredInputs": [
                "hostname",
                "password",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Nsxt resources.\n",
                "properties": {
                    "acceptSelfSignedCert": {
                        "type": "boolean",
                        "description": "Accept self-signed certificate when connecting to the cloud account.\n"
                    },
                    "associatedCloudAccountIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Cloud accounts associated with the cloud account.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date when entity was created. Date and time format is ISO 8601 and UTC.\n"
                    },
                    "dcId": {
                        "type": "string",
                        "description": "Identifier of a data collector VM deployed in the on premise infrastructure.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Human-friendly description.\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "Host name for NSX-T cloud account.\n"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:cloudaccount/NsxtLink:NsxtLink"
                        },
                        "description": "HATEOAS of entity.\n"
                    },
                    "managerMode": {
                        "type": "boolean",
                        "description": "Create NSX-T cloud account in Manager (legacy) mode. When set to true, NSX-T cloud account is created in Manager mode.\nMode cannot be changed after cloud account is created. Default value is false.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of NSX-T cloud account.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of organization that entity belongs to.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Email of entity owner.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password used to authenticate to the cloud Account.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:cloudaccount/NsxtTag:NsxtTag"
                        },
                        "description": "Set of tag keys and values to apply to the cloud account.  \nExample:[ { \"key\" : \"vmware\", \"value\": \"provider\" } ]\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when entity was last updated. Date and time format is ISO 8601 and UTC.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username used to authenticate to the cloud account.\n"
                    }
                },
                "type": "object"
            }
        },
        "vra:cloudaccount/nsxv:Nsxv": {
            "description": "Creates a VMware vRealize Automation NSX-V cloud account resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\n\nThe following example shows how to create an NSX-V cloud account resource.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumiverse/vra\";\n\nconst _this = new vra.cloudaccount.Nsxv(\"this\", {\n    description: \"foobar\",\n    username: _var.username,\n    password: _var.password,\n    hostname: _var.hostname,\n    dcId: _var.vra_data_collector_id,\n    acceptSelfSignedCert: true,\n    tags: [{\n        key: \"foo\",\n        value: \"bar\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vra as vra\n\nthis = vra.cloudaccount.Nsxv(\"this\",\n    description=\"foobar\",\n    username=var[\"username\"],\n    password=var[\"password\"],\n    hostname=var[\"hostname\"],\n    dc_id=var[\"vra_data_collector_id\"],\n    accept_self_signed_cert=True,\n    tags=[vra.cloudaccount.NsxvTagArgs(\n        key=\"foo\",\n        value=\"bar\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumiverse.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = new Vra.Cloudaccount.Nsxv(\"this\", new()\n    {\n        Description = \"foobar\",\n        Username = @var.Username,\n        Password = @var.Password,\n        Hostname = @var.Hostname,\n        DcId = @var.Vra_data_collector_id,\n        AcceptSelfSignedCert = true,\n        Tags = new[]\n        {\n            new Vra.Cloudaccount.Inputs.NsxvTagArgs\n            {\n                Key = \"foo\",\n                Value = \"bar\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/cloudaccount\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/cloudaccount\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudaccount.NewNsxv(ctx, \"this\", \u0026cloudaccount.NsxvArgs{\n\t\t\tDescription:          pulumi.String(\"foobar\"),\n\t\t\tUsername:             pulumi.Any(_var.Username),\n\t\t\tPassword:             pulumi.Any(_var.Password),\n\t\t\tHostname:             pulumi.Any(_var.Hostname),\n\t\t\tDcId:                 pulumi.Any(_var.Vra_data_collector_id),\n\t\t\tAcceptSelfSignedCert: pulumi.Bool(true),\n\t\t\tTags: cloudaccount.NsxvTagArray{\n\t\t\t\t\u0026cloudaccount.NsxvTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"foo\"),\n\t\t\t\t\tValue: pulumi.String(\"bar\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.cloudaccount.Nsxv;\nimport com.pulumi.vra.cloudaccount.NsxvArgs;\nimport com.pulumi.vra.cloudaccount.inputs.NsxvTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var this_ = new Nsxv(\"this\", NsxvArgs.builder()        \n            .description(\"foobar\")\n            .username(var_.username())\n            .password(var_.password())\n            .hostname(var_.hostname())\n            .dcId(var_.vra_data_collector_id())\n            .acceptSelfSignedCert(true)\n            .tags(NsxvTagArgs.builder()\n                .key(\"foo\")\n                .value(\"bar\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  this:\n    type: vra:cloudaccount:Nsxv\n    properties:\n      description: foobar\n      username: ${var.username}\n      password: ${var.password}\n      hostname: ${var.hostname}\n      dcId: ${var.vra_data_collector_id}\n      acceptSelfSignedCert: true\n      tags:\n        - key: foo\n          value: bar\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nTo import the NSX-V cloud account, use the ID as in the following example\n\n```sh\n $ pulumi import vra:cloudaccount/nsxv:Nsxv new_gcp 05956583-6488-4e7d-84c9-92a7b7219a15`\n```\n\n ",
            "properties": {
                "acceptSelfSignedCert": {
                    "type": "boolean",
                    "description": "Accept self-signed certificate when connecting to the cloud account.\n"
                },
                "associatedCloudAccountIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Cloud accounts associated to the cloud account.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Date when entity was created. Date and time format is ISO 8601 and UTC.\n"
                },
                "dcId": {
                    "type": "string",
                    "description": "Identifier of a data collector VM deployed in the on premise infrastructure.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Human-friendly description.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Host name for NSX-V cloud account.\n"
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:cloudaccount/NsxvLink:NsxvLink"
                    },
                    "description": "HATEOAS of entity.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of NSX-V cloud account.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of organization that entity belongs to.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Email of entity owner.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password used to authenticate to the cloud account.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:cloudaccount/NsxvTag:NsxvTag"
                    },
                    "description": "Set of tag keys and values to apply to the cloud account.  \nExample: [ { \"key\" : \"vmware\", \"value\": \"provider\" } ]\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date when entity was last updated. Date and time format is ISO 8601 and UTC.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username used to authenticate with the cloud account.\n"
                }
            },
            "required": [
                "associatedCloudAccountIds",
                "createdAt",
                "hostname",
                "links",
                "name",
                "orgId",
                "owner",
                "password",
                "tags",
                "updatedAt",
                "username"
            ],
            "inputProperties": {
                "acceptSelfSignedCert": {
                    "type": "boolean",
                    "description": "Accept self-signed certificate when connecting to the cloud account.\n"
                },
                "dcId": {
                    "type": "string",
                    "description": "Identifier of a data collector VM deployed in the on premise infrastructure.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Human-friendly description.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Host name for NSX-V cloud account.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of NSX-V cloud account.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password used to authenticate to the cloud account.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:cloudaccount/NsxvTag:NsxvTag"
                    },
                    "description": "Set of tag keys and values to apply to the cloud account.  \nExample: [ { \"key\" : \"vmware\", \"value\": \"provider\" } ]\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username used to authenticate with the cloud account.\n"
                }
            },
            "requiredInputs": [
                "hostname",
                "password",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Nsxv resources.\n",
                "properties": {
                    "acceptSelfSignedCert": {
                        "type": "boolean",
                        "description": "Accept self-signed certificate when connecting to the cloud account.\n"
                    },
                    "associatedCloudAccountIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Cloud accounts associated to the cloud account.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date when entity was created. Date and time format is ISO 8601 and UTC.\n"
                    },
                    "dcId": {
                        "type": "string",
                        "description": "Identifier of a data collector VM deployed in the on premise infrastructure.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Human-friendly description.\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "Host name for NSX-V cloud account.\n"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:cloudaccount/NsxvLink:NsxvLink"
                        },
                        "description": "HATEOAS of entity.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of NSX-V cloud account.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of organization that entity belongs to.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Email of entity owner.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password used to authenticate to the cloud account.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:cloudaccount/NsxvTag:NsxvTag"
                        },
                        "description": "Set of tag keys and values to apply to the cloud account.  \nExample: [ { \"key\" : \"vmware\", \"value\": \"provider\" } ]\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when entity was last updated. Date and time format is ISO 8601 and UTC.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username used to authenticate with the cloud account.\n"
                    }
                },
                "type": "object"
            }
        },
        "vra:cloudaccount/vSphere:VSphere": {
            "description": "Creates a VMware vRealize Automation vSphere cloud account resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\n\nThe following example shows how to create a vSphere cloud account resource.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumiverse/vra\";\n\nconst _this = new vra.cloudaccount.VSphere(\"this\", {\n    description: \"foobar\",\n    username: _var.username,\n    password: _var.password,\n    hostname: _var.hostname,\n    dcid: _var.vra_data_collector_id,\n    regions: _var.regions,\n    associatedCloudAccountIds: [_var.vra_cloud_account_nsxt_id],\n    acceptSelfSignedCert: true,\n    tags: [{\n        key: \"foo\",\n        value: \"bar\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vra as vra\n\nthis = vra.cloudaccount.VSphere(\"this\",\n    description=\"foobar\",\n    username=var[\"username\"],\n    password=var[\"password\"],\n    hostname=var[\"hostname\"],\n    dcid=var[\"vra_data_collector_id\"],\n    regions=var[\"regions\"],\n    associated_cloud_account_ids=[var[\"vra_cloud_account_nsxt_id\"]],\n    accept_self_signed_cert=True,\n    tags=[vra.cloudaccount.VSphereTagArgs(\n        key=\"foo\",\n        value=\"bar\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumiverse.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = new Vra.Cloudaccount.VSphere(\"this\", new()\n    {\n        Description = \"foobar\",\n        Username = @var.Username,\n        Password = @var.Password,\n        Hostname = @var.Hostname,\n        Dcid = @var.Vra_data_collector_id,\n        Regions = @var.Regions,\n        AssociatedCloudAccountIds = new[]\n        {\n            @var.Vra_cloud_account_nsxt_id,\n        },\n        AcceptSelfSignedCert = true,\n        Tags = new[]\n        {\n            new Vra.Cloudaccount.Inputs.VSphereTagArgs\n            {\n                Key = \"foo\",\n                Value = \"bar\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/cloudaccount\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/cloudaccount\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudaccount.NewVSphere(ctx, \"this\", \u0026cloudaccount.VSphereArgs{\n\t\t\tDescription: pulumi.String(\"foobar\"),\n\t\t\tUsername:    pulumi.Any(_var.Username),\n\t\t\tPassword:    pulumi.Any(_var.Password),\n\t\t\tHostname:    pulumi.Any(_var.Hostname),\n\t\t\tDcid:        pulumi.Any(_var.Vra_data_collector_id),\n\t\t\tRegions:     pulumi.Any(_var.Regions),\n\t\t\tAssociatedCloudAccountIds: pulumi.StringArray{\n\t\t\t\tpulumi.Any(_var.Vra_cloud_account_nsxt_id),\n\t\t\t},\n\t\t\tAcceptSelfSignedCert: pulumi.Bool(true),\n\t\t\tTags: cloudaccount.VSphereTagArray{\n\t\t\t\t\u0026cloudaccount.VSphereTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"foo\"),\n\t\t\t\t\tValue: pulumi.String(\"bar\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.cloudaccount.VSphere;\nimport com.pulumi.vra.cloudaccount.VSphereArgs;\nimport com.pulumi.vra.cloudaccount.inputs.VSphereTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var this_ = new VSphere(\"this\", VSphereArgs.builder()        \n            .description(\"foobar\")\n            .username(var_.username())\n            .password(var_.password())\n            .hostname(var_.hostname())\n            .dcid(var_.vra_data_collector_id())\n            .regions(var_.regions())\n            .associatedCloudAccountIds(var_.vra_cloud_account_nsxt_id())\n            .acceptSelfSignedCert(true)\n            .tags(VSphereTagArgs.builder()\n                .key(\"foo\")\n                .value(\"bar\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  this:\n    type: vra:cloudaccount:VSphere\n    properties:\n      description: foobar\n      username: ${var.username}\n      password: ${var.password}\n      hostname: ${var.hostname}\n      dcid: ${var.vra_data_collector_id}\n      # Required for vRA Cloud, Optional for vRA 8.X\n      regions: ${var.regions}\n      associatedCloudAccountIds:\n        - ${var.vra_cloud_account_nsxt_id}\n      acceptSelfSignedCert: true\n      tags:\n        - key: foo\n          value: bar\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nTo import the vSphere cloud account, use the ID as in the following example\n\n```sh\n $ pulumi import vra:cloudaccount/vSphere:VSphere new_vsphere 05956583-6488-4e7d-84c9-92a7b7219a15`\n```\n\n ",
            "properties": {
                "acceptSelfSignedCert": {
                    "type": "boolean",
                    "description": "Accept self-signed certificate when connecting to the cloud account.\n"
                },
                "associatedCloudAccountIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Cloud accounts associated with the cloud account.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Date when  entity was created. Date and time format is ISO 8601 and UTC.\n"
                },
                "dcid": {
                    "type": "string",
                    "description": "Identifier of a data collector vm deployed in the on premise infrastructure.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Human-friendly description.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "IP address or FQDN of the vCenter Server. The cloud proxy belongs on this vCenter.\n"
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:cloudaccount/VSphereLink:VSphereLink"
                    },
                    "description": "HATEOAS of entity.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the vSphere cloud account.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of organization that entity belongs to.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Email of entity owner.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password used to authenticate to the cloud account.\n"
                },
                "regions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of region names that are enabled for the cloud account.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:cloudaccount/VSphereTag:VSphereTag"
                    },
                    "description": "A set of tag keys and optional values to apply to the cloud account.  \nExample:[ { \"key\" : \"vmware\", \"value\": \"provider\" } ]\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date when the entity was last updated. Date and time format is ISO 8601 and UTC.\n"
                },
                "username": {
                    "type": "string",
                    "description": "vSphere username used to authenticate to the cloud account.\n"
                }
            },
            "required": [
                "createdAt",
                "hostname",
                "links",
                "name",
                "orgId",
                "owner",
                "password",
                "regions",
                "tags",
                "updatedAt",
                "username"
            ],
            "inputProperties": {
                "acceptSelfSignedCert": {
                    "type": "boolean",
                    "description": "Accept self-signed certificate when connecting to the cloud account.\n"
                },
                "associatedCloudAccountIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Cloud accounts associated with the cloud account.\n"
                },
                "dcid": {
                    "type": "string",
                    "description": "Identifier of a data collector vm deployed in the on premise infrastructure.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Human-friendly description.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "IP address or FQDN of the vCenter Server. The cloud proxy belongs on this vCenter.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the vSphere cloud account.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password used to authenticate to the cloud account.\n"
                },
                "regions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of region names that are enabled for the cloud account.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:cloudaccount/VSphereTag:VSphereTag"
                    },
                    "description": "A set of tag keys and optional values to apply to the cloud account.  \nExample:[ { \"key\" : \"vmware\", \"value\": \"provider\" } ]\n"
                },
                "username": {
                    "type": "string",
                    "description": "vSphere username used to authenticate to the cloud account.\n"
                }
            },
            "requiredInputs": [
                "hostname",
                "password",
                "regions",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VSphere resources.\n",
                "properties": {
                    "acceptSelfSignedCert": {
                        "type": "boolean",
                        "description": "Accept self-signed certificate when connecting to the cloud account.\n"
                    },
                    "associatedCloudAccountIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Cloud accounts associated with the cloud account.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date when  entity was created. Date and time format is ISO 8601 and UTC.\n"
                    },
                    "dcid": {
                        "type": "string",
                        "description": "Identifier of a data collector vm deployed in the on premise infrastructure.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Human-friendly description.\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "IP address or FQDN of the vCenter Server. The cloud proxy belongs on this vCenter.\n"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:cloudaccount/VSphereLink:VSphereLink"
                        },
                        "description": "HATEOAS of entity.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the vSphere cloud account.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of organization that entity belongs to.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Email of entity owner.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password used to authenticate to the cloud account.\n"
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of region names that are enabled for the cloud account.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:cloudaccount/VSphereTag:VSphereTag"
                        },
                        "description": "A set of tag keys and optional values to apply to the cloud account.  \nExample:[ { \"key\" : \"vmware\", \"value\": \"provider\" } ]\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when the entity was last updated. Date and time format is ISO 8601 and UTC.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "vSphere username used to authenticate to the cloud account.\n"
                    }
                },
                "type": "object"
            }
        },
        "vra:cloudaccount/vmc:Vmc": {
            "description": "Creates a VMware vRealize Automation VMC cloud account resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\n\n**Create VMC cloud account:**\n\nThe following example shows how to create a VMC cloud account resource.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumiverse/vra\";\n\nconst _this = new vra.cloudaccount.Vmc(\"this\", {\n    description: \"tf test vmc cloud account\",\n    apiToken: _var.api_token,\n    sddcName: _var.sddc_name,\n    vcenterHostname: _var.vcenter_hostname,\n    vcenterPassword: _var.vcenter_password,\n    vcenterUsername: _var.vcenter_username,\n    nsxHostname: _var.nsx_hostname,\n    dcId: _var.data_collector_id,\n    regions: _var.regions,\n    acceptSelfSignedCert: true,\n    tags: [{\n        key: \"foo\",\n        value: \"bar\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vra as vra\n\nthis = vra.cloudaccount.Vmc(\"this\",\n    description=\"tf test vmc cloud account\",\n    api_token=var[\"api_token\"],\n    sddc_name=var[\"sddc_name\"],\n    vcenter_hostname=var[\"vcenter_hostname\"],\n    vcenter_password=var[\"vcenter_password\"],\n    vcenter_username=var[\"vcenter_username\"],\n    nsx_hostname=var[\"nsx_hostname\"],\n    dc_id=var[\"data_collector_id\"],\n    regions=var[\"regions\"],\n    accept_self_signed_cert=True,\n    tags=[vra.cloudaccount.VmcTagArgs(\n        key=\"foo\",\n        value=\"bar\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumiverse.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = new Vra.Cloudaccount.Vmc(\"this\", new()\n    {\n        Description = \"tf test vmc cloud account\",\n        ApiToken = @var.Api_token,\n        SddcName = @var.Sddc_name,\n        VcenterHostname = @var.Vcenter_hostname,\n        VcenterPassword = @var.Vcenter_password,\n        VcenterUsername = @var.Vcenter_username,\n        NsxHostname = @var.Nsx_hostname,\n        DcId = @var.Data_collector_id,\n        Regions = @var.Regions,\n        AcceptSelfSignedCert = true,\n        Tags = new[]\n        {\n            new Vra.Cloudaccount.Inputs.VmcTagArgs\n            {\n                Key = \"foo\",\n                Value = \"bar\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/cloudaccount\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/cloudaccount\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudaccount.NewVmc(ctx, \"this\", \u0026cloudaccount.VmcArgs{\n\t\t\tDescription:          pulumi.String(\"tf test vmc cloud account\"),\n\t\t\tApiToken:             pulumi.Any(_var.Api_token),\n\t\t\tSddcName:             pulumi.Any(_var.Sddc_name),\n\t\t\tVcenterHostname:      pulumi.Any(_var.Vcenter_hostname),\n\t\t\tVcenterPassword:      pulumi.Any(_var.Vcenter_password),\n\t\t\tVcenterUsername:      pulumi.Any(_var.Vcenter_username),\n\t\t\tNsxHostname:          pulumi.Any(_var.Nsx_hostname),\n\t\t\tDcId:                 pulumi.Any(_var.Data_collector_id),\n\t\t\tRegions:              pulumi.Any(_var.Regions),\n\t\t\tAcceptSelfSignedCert: pulumi.Bool(true),\n\t\t\tTags: cloudaccount.VmcTagArray{\n\t\t\t\t\u0026cloudaccount.VmcTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"foo\"),\n\t\t\t\t\tValue: pulumi.String(\"bar\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.cloudaccount.Vmc;\nimport com.pulumi.vra.cloudaccount.VmcArgs;\nimport com.pulumi.vra.cloudaccount.inputs.VmcTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var this_ = new Vmc(\"this\", VmcArgs.builder()        \n            .description(\"tf test vmc cloud account\")\n            .apiToken(var_.api_token())\n            .sddcName(var_.sddc_name())\n            .vcenterHostname(var_.vcenter_hostname())\n            .vcenterPassword(var_.vcenter_password())\n            .vcenterUsername(var_.vcenter_username())\n            .nsxHostname(var_.nsx_hostname())\n            .dcId(var_.data_collector_id())\n            .regions(var_.regions())\n            .acceptSelfSignedCert(true)\n            .tags(VmcTagArgs.builder()\n                .key(\"foo\")\n                .value(\"bar\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  this:\n    type: vra:cloudaccount:Vmc\n    properties:\n      description: tf test vmc cloud account\n      apiToken: ${var.api_token}\n      sddcName: ${var.sddc_name}\n      vcenterHostname: ${var.vcenter_hostname}\n      vcenterPassword: ${var.vcenter_password}\n      vcenterUsername: ${var.vcenter_username}\n      nsxHostname: ${var.nsx_hostname}\n      dcId: ${var.data_collector_id}\n      # Required for vRA Cloud, Optional for vRA on-prem\n      regions: ${var.regions}\n      acceptSelfSignedCert: true\n      tags:\n        - key: foo\n          value: bar\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nTo import the VMC cloud account, use the ID as in the following example\n\n```sh\n $ pulumi import vra:cloudaccount/vmc:Vmc new_vmc 05956583-6488-4e7d-84c9-92a7b7219a15`\n```\n\n ",
            "properties": {
                "acceptSelfSignedCert": {
                    "type": "boolean",
                    "description": "Accept self-signed certificate when connecting to the cloud account.\n"
                },
                "apiToken": {
                    "type": "string",
                    "description": "VMC API access key.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Date when entity was created. Date and time format is ISO 8601 and UTC.\n"
                },
                "dcId": {
                    "type": "string",
                    "description": "Identifier of a data collector VM deployed in the on premise infrastructure. Refer to the data-collector API to create or list data collector.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Human-friendly description.\n"
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:cloudaccount/VmcLink:VmcLink"
                    },
                    "description": "HATEOAS of entity.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Human-friendly name used as an identifier in APIs that support this option.\n"
                },
                "nsxHostname": {
                    "type": "string",
                    "description": "IP address of the NSX Manager server in the specified SDDC / FQDN.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of organization that entity belongs to.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Email of entity owner.\n"
                },
                "regions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of region names enabled for the cloud account.\n"
                },
                "sddcName": {
                    "type": "string",
                    "description": "Identifier of the on-premise SDDC to be used by the cloud account. Note that NSX-V SDDCs are not supported.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:cloudaccount/VmcTag:VmcTag"
                    },
                    "description": "Set of tag keys and values to apply to the cloud account.  \nExample:[ { \"key\" : \"vmware\", \"value\": \"provider\" } ]\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date when the entity was last updated. Date and time format is ISO 8601 and UTC.\n"
                },
                "vcenterHostname": {
                    "type": "string",
                    "description": "IP address or FQDN of the vCenter Server in the specified SDDC. The cloud proxy belongs on this vCenter.\n"
                },
                "vcenterPassword": {
                    "type": "string",
                    "description": "Password used to authenticate to the cloud Account.\n"
                },
                "vcenterUsername": {
                    "type": "string",
                    "description": "vCenter user name for the specified SDDC. The user requires CloudAdmin credentials. The user does not require CloudGlobalAdmin credentials.\n"
                }
            },
            "required": [
                "apiToken",
                "createdAt",
                "links",
                "name",
                "nsxHostname",
                "orgId",
                "owner",
                "regions",
                "sddcName",
                "tags",
                "updatedAt",
                "vcenterHostname",
                "vcenterPassword",
                "vcenterUsername"
            ],
            "inputProperties": {
                "acceptSelfSignedCert": {
                    "type": "boolean",
                    "description": "Accept self-signed certificate when connecting to the cloud account.\n"
                },
                "apiToken": {
                    "type": "string",
                    "description": "VMC API access key.\n"
                },
                "dcId": {
                    "type": "string",
                    "description": "Identifier of a data collector VM deployed in the on premise infrastructure. Refer to the data-collector API to create or list data collector.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Human-friendly description.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Human-friendly name used as an identifier in APIs that support this option.\n"
                },
                "nsxHostname": {
                    "type": "string",
                    "description": "IP address of the NSX Manager server in the specified SDDC / FQDN.\n"
                },
                "regions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of region names enabled for the cloud account.\n"
                },
                "sddcName": {
                    "type": "string",
                    "description": "Identifier of the on-premise SDDC to be used by the cloud account. Note that NSX-V SDDCs are not supported.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:cloudaccount/VmcTag:VmcTag"
                    },
                    "description": "Set of tag keys and values to apply to the cloud account.  \nExample:[ { \"key\" : \"vmware\", \"value\": \"provider\" } ]\n"
                },
                "vcenterHostname": {
                    "type": "string",
                    "description": "IP address or FQDN of the vCenter Server in the specified SDDC. The cloud proxy belongs on this vCenter.\n"
                },
                "vcenterPassword": {
                    "type": "string",
                    "description": "Password used to authenticate to the cloud Account.\n"
                },
                "vcenterUsername": {
                    "type": "string",
                    "description": "vCenter user name for the specified SDDC. The user requires CloudAdmin credentials. The user does not require CloudGlobalAdmin credentials.\n"
                }
            },
            "requiredInputs": [
                "apiToken",
                "nsxHostname",
                "regions",
                "sddcName",
                "vcenterHostname",
                "vcenterPassword",
                "vcenterUsername"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Vmc resources.\n",
                "properties": {
                    "acceptSelfSignedCert": {
                        "type": "boolean",
                        "description": "Accept self-signed certificate when connecting to the cloud account.\n"
                    },
                    "apiToken": {
                        "type": "string",
                        "description": "VMC API access key.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date when entity was created. Date and time format is ISO 8601 and UTC.\n"
                    },
                    "dcId": {
                        "type": "string",
                        "description": "Identifier of a data collector VM deployed in the on premise infrastructure. Refer to the data-collector API to create or list data collector.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Human-friendly description.\n"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:cloudaccount/VmcLink:VmcLink"
                        },
                        "description": "HATEOAS of entity.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Human-friendly name used as an identifier in APIs that support this option.\n"
                    },
                    "nsxHostname": {
                        "type": "string",
                        "description": "IP address of the NSX Manager server in the specified SDDC / FQDN.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of organization that entity belongs to.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Email of entity owner.\n"
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of region names enabled for the cloud account.\n"
                    },
                    "sddcName": {
                        "type": "string",
                        "description": "Identifier of the on-premise SDDC to be used by the cloud account. Note that NSX-V SDDCs are not supported.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:cloudaccount/VmcTag:VmcTag"
                        },
                        "description": "Set of tag keys and values to apply to the cloud account.  \nExample:[ { \"key\" : \"vmware\", \"value\": \"provider\" } ]\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when the entity was last updated. Date and time format is ISO 8601 and UTC.\n"
                    },
                    "vcenterHostname": {
                        "type": "string",
                        "description": "IP address or FQDN of the vCenter Server in the specified SDDC. The cloud proxy belongs on this vCenter.\n"
                    },
                    "vcenterPassword": {
                        "type": "string",
                        "description": "Password used to authenticate to the cloud Account.\n"
                    },
                    "vcenterUsername": {
                        "type": "string",
                        "description": "vCenter user name for the specified SDDC. The user requires CloudAdmin credentials. The user does not require CloudGlobalAdmin credentials.\n"
                    }
                },
                "type": "object"
            }
        },
        "vra:contentsource/contentSource:ContentSource": {
            "description": "This resource provides a way to create a content source vRealize Automation(vRA).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumiverse/vra\";\n\nconst _this = new vra.contentsource.ContentSource(\"this\", {\n    projectId: _var.project_id,\n    typeId: \"com.gitlab\",\n    description: \"Some content Source\",\n    syncEnabled: false,\n    config: {\n        path: \"blueprint01\",\n        branch: \"master\",\n        repository: \"vracontent/vra8_content_source_test\",\n        contentType: \"BLUEPRINT\",\n        projectName: _var.project_name,\n        integrationId: _var.integration_id,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vra as vra\n\nthis = vra.contentsource.ContentSource(\"this\",\n    project_id=var[\"project_id\"],\n    type_id=\"com.gitlab\",\n    description=\"Some content Source\",\n    sync_enabled=False,\n    config=vra.contentsource.ContentSourceConfigArgs(\n        path=\"blueprint01\",\n        branch=\"master\",\n        repository=\"vracontent/vra8_content_source_test\",\n        content_type=\"BLUEPRINT\",\n        project_name=var[\"project_name\"],\n        integration_id=var[\"integration_id\"],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumiverse.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = new Vra.Contentsource.ContentSource(\"this\", new()\n    {\n        ProjectId = @var.Project_id,\n        TypeId = \"com.gitlab\",\n        Description = \"Some content Source\",\n        SyncEnabled = false,\n        Config = new Vra.Contentsource.Inputs.ContentSourceConfigArgs\n        {\n            Path = \"blueprint01\",\n            Branch = \"master\",\n            Repository = \"vracontent/vra8_content_source_test\",\n            ContentType = \"BLUEPRINT\",\n            ProjectName = @var.Project_name,\n            IntegrationId = @var.Integration_id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/contentsource\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/contentsource\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := contentsource.NewContentSource(ctx, \"this\", \u0026contentsource.ContentSourceArgs{\n\t\t\tProjectId:   pulumi.Any(_var.Project_id),\n\t\t\tTypeId:      pulumi.String(\"com.gitlab\"),\n\t\t\tDescription: pulumi.String(\"Some content Source\"),\n\t\t\tSyncEnabled: pulumi.Bool(false),\n\t\t\tConfig: \u0026contentsource.ContentSourceConfigArgs{\n\t\t\t\tPath:          pulumi.String(\"blueprint01\"),\n\t\t\t\tBranch:        pulumi.String(\"master\"),\n\t\t\t\tRepository:    pulumi.String(\"vracontent/vra8_content_source_test\"),\n\t\t\t\tContentType:   pulumi.String(\"BLUEPRINT\"),\n\t\t\t\tProjectName:   pulumi.Any(_var.Project_name),\n\t\t\t\tIntegrationId: pulumi.Any(_var.Integration_id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.contentsource.ContentSource;\nimport com.pulumi.vra.contentsource.ContentSourceArgs;\nimport com.pulumi.vra.contentsource.inputs.ContentSourceConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var this_ = new ContentSource(\"this\", ContentSourceArgs.builder()        \n            .projectId(var_.project_id())\n            .typeId(\"com.gitlab\")\n            .description(\"Some content Source\")\n            .syncEnabled(\"false\")\n            .config(ContentSourceConfigArgs.builder()\n                .path(\"blueprint01\")\n                .branch(\"master\")\n                .repository(\"vracontent/vra8_content_source_test\")\n                .contentType(\"BLUEPRINT\")\n                .projectName(var_.project_name())\n                .integrationId(var_.integration_id())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  this:\n    type: vra:contentsource:ContentSource\n    properties:\n      projectId: ${var.project_id}\n      # type_id needs to be one of com.gitlab, com.github or com.vmware.marketplace\n      typeId: com.gitlab\n      description: Some content Source\n      # whether automatically sync content or not\n      syncEnabled: false\n      config:\n        path: blueprint01\n        branch: master\n        repository: vracontent/vra8_content_source_test\n        contentType: BLUEPRINT\n        projectName: ${var.project_name}\n        integrationId: ${var.integration_id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nContent source can be imported using the id, e.g.\n\n```sh\n $ pulumi import vra:contentsource/contentSource:ContentSource this 05956583-6488-4e7d-84c9-92a7b7219a15`\n```\n\n ",
            "properties": {
                "config": {
                    "$ref": "#/types/vra:contentsource/ContentSourceConfig:ContentSourceConfig",
                    "description": "Content source custom configuration.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Date when the entity was created. The date is in ISO 6801 and UTC.\n"
                },
                "createdBy": {
                    "type": "string",
                    "description": "The user the entity was created by.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A human-friendly description.\n"
                },
                "lastUpdatedAt": {
                    "type": "string",
                    "description": "Date when the entity was last updated. The date is in ISO 6801 and UTC.\n"
                },
                "lastUpdatedBy": {
                    "type": "string",
                    "description": "The user the entity was last updated by.\n"
                },
                "name": {
                    "type": "string",
                    "description": "A human-friendly name for content source used as an identifier in APIs that support this option.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "The id of the organization this entity belongs to.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The id of the project this entity belongs to.\n"
                },
                "syncEnabled": {
                    "type": "boolean",
                    "description": "Flag indicating whether sync is enabled for this content source.\n"
                },
                "typeId": {
                    "type": "string",
                    "description": "Content Source type. Supported values are `com.gitlab`, `com.github`, `com.vmware.marketplace`, `org.bitbucket`.\n"
                }
            },
            "required": [
                "config",
                "createdAt",
                "createdBy",
                "lastUpdatedAt",
                "lastUpdatedBy",
                "name",
                "orgId",
                "projectId",
                "syncEnabled",
                "typeId"
            ],
            "inputProperties": {
                "config": {
                    "$ref": "#/types/vra:contentsource/ContentSourceConfig:ContentSourceConfig",
                    "description": "Content source custom configuration.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "A human-friendly description.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "A human-friendly name for content source used as an identifier in APIs that support this option.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The id of the project this entity belongs to.\n",
                    "willReplaceOnChanges": true
                },
                "syncEnabled": {
                    "type": "boolean",
                    "description": "Flag indicating whether sync is enabled for this content source.\n",
                    "willReplaceOnChanges": true
                },
                "typeId": {
                    "type": "string",
                    "description": "Content Source type. Supported values are `com.gitlab`, `com.github`, `com.vmware.marketplace`, `org.bitbucket`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "config",
                "projectId",
                "syncEnabled",
                "typeId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ContentSource resources.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/vra:contentsource/ContentSourceConfig:ContentSourceConfig",
                        "description": "Content source custom configuration.\n",
                        "willReplaceOnChanges": true
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date when the entity was created. The date is in ISO 6801 and UTC.\n"
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "The user the entity was created by.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A human-friendly description.\n",
                        "willReplaceOnChanges": true
                    },
                    "lastUpdatedAt": {
                        "type": "string",
                        "description": "Date when the entity was last updated. The date is in ISO 6801 and UTC.\n"
                    },
                    "lastUpdatedBy": {
                        "type": "string",
                        "description": "The user the entity was last updated by.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A human-friendly name for content source used as an identifier in APIs that support this option.\n",
                        "willReplaceOnChanges": true
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The id of the organization this entity belongs to.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The id of the project this entity belongs to.\n",
                        "willReplaceOnChanges": true
                    },
                    "syncEnabled": {
                        "type": "boolean",
                        "description": "Flag indicating whether sync is enabled for this content source.\n",
                        "willReplaceOnChanges": true
                    },
                    "typeId": {
                        "type": "string",
                        "description": "Content Source type. Supported values are `com.gitlab`, `com.github`, `com.vmware.marketplace`, `org.bitbucket`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "vra:deployment/deployment:Deployment": {
            "description": "This resource provides a way to create a deployment in vRealize Automation(vRA) by either using a blueprint, or catalog item, or an inline blueprint.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\n\nThis is an example of how to create a deployment using a catalog item.\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.deployment.Deployment;\nimport com.pulumi.vra.deployment.DeploymentArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var this_ = new Deployment(\"this\", DeploymentArgs.builder()        \n            .description(\"Deployment description\")\n            .catalogItemId(var_.catalog_item_id())\n            .catalogItemVersion(var_.catalog_item_version())\n            .projectId(var_.project_id())\n            .inputs(Map.ofEntries(\n                Map.entry(\"flavor\", \"small\"),\n                Map.entry(\"image\", \"centos\"),\n                Map.entry(\"count\", 1),\n                Map.entry(\"flag\", false),\n                Map.entry(\"number\", 10),\n                Map.entry(\"arrayProp\", serializeJson(\n                    jsonArray(\n                        \"foo\", \n                        \"bar\", \n                        \"where\", \n                        \"waldo\"\n                    ))),\n                Map.entry(\"objectProp\", serializeJson(\n                    jsonObject(\n                        jsonProperty(\"key1\", \"value1\"),\n                        jsonProperty(\"key2\", jsonArray(\n                            1, \n                            2, \n                            3, \n                            4\n                        ))\n                    )))\n            ))\n            .timeouts(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  this:\n    type: vra:deployment:Deployment\n    properties:\n      description: Deployment description\n      catalogItemId: ${var.catalog_item_id}\n      catalogItemVersion: ${var.catalog_item_version}\n      projectId: ${var.project_id}\n      inputs:\n        flavor: small\n        image: centos\n        count: 1\n        flag: false\n        number: 10\n        arrayProp:\n          Fn::ToJSON:\n            - foo\n            - bar\n            - where\n            - waldo\n        objectProp:\n          Fn::ToJSON:\n            key1: value1\n            key2:\n              - 1\n              - 2\n              - 3\n              - 4\n      timeouts:\n        - create: 30m\n          delete: 30m\n          update: 30m\n```\n\nThis is an example of how to create a deployment using a cloud template.\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.deployment.Deployment;\nimport com.pulumi.vra.deployment.DeploymentArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var this_ = new Deployment(\"this\", DeploymentArgs.builder()        \n            .description(\"Deployment description\")\n            .blueprintId(var_.blueprint_id())\n            .blueprintVersion(var_.blueprint_version())\n            .projectId(var_.project_id())\n            .inputs(Map.ofEntries(\n                Map.entry(\"flavor\", \"small\"),\n                Map.entry(\"image\", \"centos\"),\n                Map.entry(\"count\", 1),\n                Map.entry(\"flag\", true),\n                Map.entry(\"arrayProp\", serializeJson(\n                    jsonArray(\n                        \"foo\", \n                        \"bar\", \n                        \"baz\"\n                    ))),\n                Map.entry(\"objectProp\", serializeJson(\n                    jsonObject(\n                        jsonProperty(\"key\", \"value\"),\n                        jsonProperty(\"key2\", jsonArray(\n                            1, \n                            2, \n                            3\n                        ))\n                    )))\n            ))\n            .timeouts(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  this:\n    type: vra:deployment:Deployment\n    properties:\n      description: Deployment description\n      blueprintId: ${var.blueprint_id}\n      blueprintVersion: ${var.blueprint_version}\n      projectId: ${var.project_id}\n      inputs:\n        flavor: small\n        image: centos\n        count: 1\n        flag: true\n        arrayProp:\n          Fn::ToJSON:\n            - foo\n            - bar\n            - baz\n        objectProp:\n          Fn::ToJSON:\n            key: value\n            key2:\n              - 1\n              - 2\n              - 3\n      timeouts:\n        - create: 30m\n          delete: 30m\n          update: 30m\n```\n\nThis is an example of how to create a deployment without any resources so that it may be attached to other IaaS resources like `vra.machine.Machine`, `vra.network.Network`, etc.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumiverse/vra\";\n\nconst _this = new vra.deployment.Deployment(\"this\", {\n    description: \"Deployment description\",\n    projectId: _var.project_id,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vra as vra\n\nthis = vra.deployment.Deployment(\"this\",\n    description=\"Deployment description\",\n    project_id=var[\"project_id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumiverse.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = new Vra.Deployment.Deployment(\"this\", new()\n    {\n        Description = \"Deployment description\",\n        ProjectId = @var.Project_id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/deployment\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := deployment.NewDeployment(ctx, \"this\", \u0026deployment.DeploymentArgs{\n\t\t\tDescription: pulumi.String(\"Deployment description\"),\n\t\t\tProjectId:   pulumi.Any(_var.Project_id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.deployment.Deployment;\nimport com.pulumi.vra.deployment.DeploymentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var this_ = new Deployment(\"this\", DeploymentArgs.builder()        \n            .description(\"Deployment description\")\n            .projectId(var_.project_id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  this:\n    type: vra:deployment:Deployment\n    properties:\n      description: Deployment description\n      projectId: ${var.project_id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nDeployment can be imported using the id, e.g.\n\n```sh\n $ pulumi import vra:deployment/deployment:Deployment this 05956583-6488-4e7d-84c9-92a7b7219a15`\n```\n\n ",
            "properties": {
                "blueprintContent": {
                    "type": "string",
                    "description": "vRA Cloud template content. Conflicts with `blueprint_id` and `catalog_item_id`.\n"
                },
                "blueprintId": {
                    "type": "string",
                    "description": "Identifier of the requested blueprint in the form ‘UUID:version’.\n"
                },
                "blueprintVersion": {
                    "type": "string",
                    "description": "The version of the vRA cloud template to request the deployment. Used only when `blueprint_id` is provided.\n"
                },
                "catalogItemId": {
                    "type": "string",
                    "description": "The id of the vRA catalog item to request the deployment. Conflicts with `blueprint_id` and `blueprint_content`.\n"
                },
                "catalogItemVersion": {
                    "type": "string",
                    "description": "The version of the vRA catalog item to request the deployment. Used only when `catalog_item_id` is provided.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Creation time (e.g. date format ‘2019-07-13T23:16:49.310Z’).\n"
                },
                "createdBy": {
                    "type": "string",
                    "description": "The user the entity was created by.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A human-friendly description.\n"
                },
                "expandLastRequest": {
                    "type": "boolean",
                    "deprecationMessage": "Deprecated. True by default even if not provided."
                },
                "expandProject": {
                    "type": "boolean",
                    "description": "Flag to indicate whether to expand project information.\n"
                },
                "expandResources": {
                    "type": "boolean",
                    "deprecationMessage": "Deprecated. True by default even if not provided."
                },
                "expenses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:deployment/DeploymentExpense:DeploymentExpense"
                    },
                    "description": "Expense incurred for the deployment.\n"
                },
                "inputs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Inputs provided by the user. For inputs including those with default values, refer to `inputs_including_defaults`.\n"
                },
                "inputsIncludingDefaults": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "All the inputs applied during last create/update operation, including those with default values. For the list of inputs provided by the user in the configuration, refer to `inputs`.\n"
                },
                "lastRequests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:deployment/DeploymentLastRequest:DeploymentLastRequest"
                    },
                    "description": "Represents deployment requests.\n"
                },
                "lastUpdatedAt": {
                    "type": "string",
                    "description": "Time at which the deployment was last updated.\n"
                },
                "lastUpdatedBy": {
                    "type": "string",
                    "description": "The user that last updated the deployment.\n"
                },
                "leaseExpireAt": {
                    "type": "string",
                    "description": "Time at which the deployment lease expires.\n"
                },
                "name": {
                    "type": "string",
                    "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "The ID of the organization this deployment belongs to.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "The user this deployment belongs to. At create, the owner is ignored but is used to update during next apply.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The id of the project this entity belongs to.\n"
                },
                "projects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:deployment/DeploymentProject:DeploymentProject"
                    },
                    "description": "The project this entity belongs to.\n"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:deployment/DeploymentResource:DeploymentResource"
                    },
                    "description": "Expanded resources for the deployment. Content of this property will not be maintained backward compatible.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Deployment status. Supported values are: `CREATE_SUCCESSFUL`, `CREATE_INPROGRESS`, `CREATE_FAILED`, `UPDATE_SUCCESSFUL`, `UPDATE_INPROGRESS`, `UPDATE_FAILED`, `DELETE_SUCCESSFUL`, `DELETE_INPROGRESS`, `DELETE_FAILED`, `ACTION_SUCCESSFUL`, `ACTION_INPROGRESS`, `ACTION_FAILED`.\n"
                }
            },
            "required": [
                "blueprintId",
                "blueprintVersion",
                "catalogItemId",
                "catalogItemVersion",
                "createdAt",
                "createdBy",
                "expenses",
                "inputsIncludingDefaults",
                "lastRequests",
                "lastUpdatedAt",
                "lastUpdatedBy",
                "leaseExpireAt",
                "name",
                "orgId",
                "owner",
                "projects",
                "projectId",
                "resources",
                "status"
            ],
            "inputProperties": {
                "blueprintContent": {
                    "type": "string",
                    "description": "vRA Cloud template content. Conflicts with `blueprint_id` and `catalog_item_id`.\n"
                },
                "blueprintId": {
                    "type": "string",
                    "description": "Identifier of the requested blueprint in the form ‘UUID:version’.\n"
                },
                "blueprintVersion": {
                    "type": "string",
                    "description": "The version of the vRA cloud template to request the deployment. Used only when `blueprint_id` is provided.\n"
                },
                "catalogItemId": {
                    "type": "string",
                    "description": "The id of the vRA catalog item to request the deployment. Conflicts with `blueprint_id` and `blueprint_content`.\n",
                    "willReplaceOnChanges": true
                },
                "catalogItemVersion": {
                    "type": "string",
                    "description": "The version of the vRA catalog item to request the deployment. Used only when `catalog_item_id` is provided.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "A human-friendly description.\n"
                },
                "expandLastRequest": {
                    "type": "boolean",
                    "deprecationMessage": "Deprecated. True by default even if not provided."
                },
                "expandProject": {
                    "type": "boolean",
                    "description": "Flag to indicate whether to expand project information.\n"
                },
                "expandResources": {
                    "type": "boolean",
                    "deprecationMessage": "Deprecated. True by default even if not provided."
                },
                "inputs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Inputs provided by the user. For inputs including those with default values, refer to `inputs_including_defaults`.\n"
                },
                "leaseExpireAt": {
                    "type": "string",
                    "description": "Time at which the deployment lease expires.\n"
                },
                "name": {
                    "type": "string",
                    "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "The user this deployment belongs to. At create, the owner is ignored but is used to update during next apply.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The id of the project this entity belongs to.\n"
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Deployment resources.\n",
                "properties": {
                    "blueprintContent": {
                        "type": "string",
                        "description": "vRA Cloud template content. Conflicts with `blueprint_id` and `catalog_item_id`.\n"
                    },
                    "blueprintId": {
                        "type": "string",
                        "description": "Identifier of the requested blueprint in the form ‘UUID:version’.\n"
                    },
                    "blueprintVersion": {
                        "type": "string",
                        "description": "The version of the vRA cloud template to request the deployment. Used only when `blueprint_id` is provided.\n"
                    },
                    "catalogItemId": {
                        "type": "string",
                        "description": "The id of the vRA catalog item to request the deployment. Conflicts with `blueprint_id` and `blueprint_content`.\n",
                        "willReplaceOnChanges": true
                    },
                    "catalogItemVersion": {
                        "type": "string",
                        "description": "The version of the vRA catalog item to request the deployment. Used only when `catalog_item_id` is provided.\n",
                        "willReplaceOnChanges": true
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Creation time (e.g. date format ‘2019-07-13T23:16:49.310Z’).\n"
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "The user the entity was created by.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A human-friendly description.\n"
                    },
                    "expandLastRequest": {
                        "type": "boolean",
                        "deprecationMessage": "Deprecated. True by default even if not provided."
                    },
                    "expandProject": {
                        "type": "boolean",
                        "description": "Flag to indicate whether to expand project information.\n"
                    },
                    "expandResources": {
                        "type": "boolean",
                        "deprecationMessage": "Deprecated. True by default even if not provided."
                    },
                    "expenses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:deployment/DeploymentExpense:DeploymentExpense"
                        },
                        "description": "Expense incurred for the deployment.\n"
                    },
                    "inputs": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Inputs provided by the user. For inputs including those with default values, refer to `inputs_including_defaults`.\n"
                    },
                    "inputsIncludingDefaults": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "All the inputs applied during last create/update operation, including those with default values. For the list of inputs provided by the user in the configuration, refer to `inputs`.\n"
                    },
                    "lastRequests": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:deployment/DeploymentLastRequest:DeploymentLastRequest"
                        },
                        "description": "Represents deployment requests.\n"
                    },
                    "lastUpdatedAt": {
                        "type": "string",
                        "description": "Time at which the deployment was last updated.\n"
                    },
                    "lastUpdatedBy": {
                        "type": "string",
                        "description": "The user that last updated the deployment.\n"
                    },
                    "leaseExpireAt": {
                        "type": "string",
                        "description": "Time at which the deployment lease expires.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The ID of the organization this deployment belongs to.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "The user this deployment belongs to. At create, the owner is ignored but is used to update during next apply.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The id of the project this entity belongs to.\n"
                    },
                    "projects": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:deployment/DeploymentProject:DeploymentProject"
                        },
                        "description": "The project this entity belongs to.\n"
                    },
                    "resources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:deployment/DeploymentResource:DeploymentResource"
                        },
                        "description": "Expanded resources for the deployment. Content of this property will not be maintained backward compatible.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Deployment status. Supported values are: `CREATE_SUCCESSFUL`, `CREATE_INPROGRESS`, `CREATE_FAILED`, `UPDATE_SUCCESSFUL`, `UPDATE_INPROGRESS`, `UPDATE_FAILED`, `DELETE_SUCCESSFUL`, `DELETE_INPROGRESS`, `DELETE_FAILED`, `ACTION_SUCCESSFUL`, `ACTION_INPROGRESS`, `ACTION_FAILED`.\n"
                    }
                },
                "type": "object"
            }
        },
        "vra:fabric/compute:Compute": {
            "description": "Updates a VMware vRealize Automation fabric_compute resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\n\nYou cannot create a fabric compute resource, however you can import it using the command specified in the import section below.\n\nOnce a resource is imported, you can update it as shown below:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst thisCompute = new vra.fabric.Compute(\"this\", {\n    tags: [{\n        key: \"foo\",\n        value: \"bar\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vra as vra\n\nthis = vra.fabric.Compute(\"this\", tags=[vra.fabric.ComputeTagArgs(\n    key=\"foo\",\n    value=\"bar\",\n)])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumiverse.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = new Vra.Fabric.Compute(\"this\", new()\n    {\n        Tags = new[]\n        {\n            new Vra.Fabric.Inputs.ComputeTagArgs\n            {\n                Key = \"foo\",\n                Value = \"bar\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/fabric\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/fabric\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := fabric.NewCompute(ctx, \"this\", \u0026fabric.ComputeArgs{\n\t\t\tTags: fabric.ComputeTagArray{\n\t\t\t\t\u0026fabric.ComputeTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"foo\"),\n\t\t\t\t\tValue: pulumi.String(\"bar\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.fabric.Compute;\nimport com.pulumi.vra.fabric.ComputeArgs;\nimport com.pulumi.vra.fabric.inputs.ComputeTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var this_ = new Compute(\"this\", ComputeArgs.builder()        \n            .tags(ComputeTagArgs.builder()\n                .key(\"foo\")\n                .value(\"bar\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  this:\n    type: vra:fabric:Compute\n    properties:\n      tags:\n        - key: foo\n          value: bar\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nTo import the fabric compute resource, use the ID as in the following example\n\n```sh\n $ pulumi import vra:fabric/compute:Compute this 88fdea8b-92ed-4aa9-b6ee-4670412961b0\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Date when the entity was created. The date is in ISO 8601 and UTC.\n"
                },
                "customProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "A list of key value pair of custom properties for the fabric compute resource.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A human-friendly description.\n"
                },
                "externalId": {
                    "type": "string",
                    "description": "The id of the external entity on the provider side.\n"
                },
                "externalRegionId": {
                    "type": "string",
                    "description": "The external region id of the fabric compute.\n"
                },
                "externalZoneId": {
                    "type": "string",
                    "description": "The external zone id of the fabric compute.\n"
                },
                "lifecycleState": {
                    "type": "string",
                    "description": "Lifecycle status of the compute instance.\n"
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:fabric/ComputeLink:ComputeLink"
                    },
                    "description": "HATEOAS of the entity.\n"
                },
                "name": {
                    "type": "string",
                    "description": "A human-friendly name used as an identifier for the fabric compute resource instance.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "The id of the organization this entity belongs to.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Email of the user that owns the entity.\n"
                },
                "powerState": {
                    "type": "string",
                    "description": "Power state of fabric compute instance.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:fabric/ComputeTag:ComputeTag"
                    },
                    "description": "A set of tag keys and optional values that were set on this resource:\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the fabric compute instance.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                }
            },
            "required": [
                "createdAt",
                "customProperties",
                "description",
                "externalId",
                "externalRegionId",
                "externalZoneId",
                "lifecycleState",
                "links",
                "name",
                "orgId",
                "owner",
                "powerState",
                "tags",
                "type",
                "updatedAt"
            ],
            "inputProperties": {
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:fabric/ComputeTag:ComputeTag"
                    },
                    "description": "A set of tag keys and optional values that were set on this resource:\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Compute resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Date when the entity was created. The date is in ISO 8601 and UTC.\n"
                    },
                    "customProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "A list of key value pair of custom properties for the fabric compute resource.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A human-friendly description.\n"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "The id of the external entity on the provider side.\n"
                    },
                    "externalRegionId": {
                        "type": "string",
                        "description": "The external region id of the fabric compute.\n"
                    },
                    "externalZoneId": {
                        "type": "string",
                        "description": "The external zone id of the fabric compute.\n"
                    },
                    "lifecycleState": {
                        "type": "string",
                        "description": "Lifecycle status of the compute instance.\n"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:fabric/ComputeLink:ComputeLink"
                        },
                        "description": "HATEOAS of the entity.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A human-friendly name used as an identifier for the fabric compute resource instance.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The id of the organization this entity belongs to.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Email of the user that owns the entity.\n"
                    },
                    "powerState": {
                        "type": "string",
                        "description": "Power state of fabric compute instance.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:fabric/ComputeTag:ComputeTag"
                        },
                        "description": "A set of tag keys and optional values that were set on this resource:\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the fabric compute instance.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                    }
                },
                "type": "object"
            }
        },
        "vra:fabric/datastoreVSphere:DatastoreVSphere": {
            "description": "Updates a VMware vRealize Automation fabric_datastore_vsphere resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\n\nYou cannot create a fabric datastore vSphere resource, however you can import it using the command specified in the import section below.\n\nOnce a resource is imported, you can update it as shown below:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst thisDatastoreVSphere = new vra.fabric.DatastoreVSphere(\"this\", {\n    tags: [{\n        key: \"foo\",\n        value: \"bar\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vra as vra\n\nthis = vra.fabric.DatastoreVSphere(\"this\", tags=[vra.fabric.DatastoreVSphereTagArgs(\n    key=\"foo\",\n    value=\"bar\",\n)])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumiverse.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = new Vra.Fabric.DatastoreVSphere(\"this\", new()\n    {\n        Tags = new[]\n        {\n            new Vra.Fabric.Inputs.DatastoreVSphereTagArgs\n            {\n                Key = \"foo\",\n                Value = \"bar\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/fabric\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/fabric\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := fabric.NewDatastoreVSphere(ctx, \"this\", \u0026fabric.DatastoreVSphereArgs{\n\t\t\tTags: fabric.DatastoreVSphereTagArray{\n\t\t\t\t\u0026fabric.DatastoreVSphereTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"foo\"),\n\t\t\t\t\tValue: pulumi.String(\"bar\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.fabric.DatastoreVSphere;\nimport com.pulumi.vra.fabric.DatastoreVSphereArgs;\nimport com.pulumi.vra.fabric.inputs.DatastoreVSphereTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var this_ = new DatastoreVSphere(\"this\", DatastoreVSphereArgs.builder()        \n            .tags(DatastoreVSphereTagArgs.builder()\n                .key(\"foo\")\n                .value(\"bar\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  this:\n    type: vra:fabric:DatastoreVSphere\n    properties:\n      tags:\n        - key: foo\n          value: bar\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nTo import the fabric datastore vSphere resource, use the ID as in the following example\n\n```sh\n $ pulumi import vra:fabric/datastoreVSphere:DatastoreVSphere this 8e0c9a4c-3ab8-48e8-b9d5-0751c871e282\n```\n\n ",
            "properties": {
                "cloudAccountIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of ids of the cloud accounts this entity belongs to.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Date when the entity was created. The date is in ISO 8601 and UTC.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A human-friendly description.\n"
                },
                "externalId": {
                    "type": "string",
                    "description": "External entity Id on the provider side.\n"
                },
                "externalRegionId": {
                    "type": "string",
                    "description": "Id of datacenter in which the datastore is present.\n"
                },
                "freeSizeGb": {
                    "type": "string",
                    "description": "Indicates free size available in datastore.\n"
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:fabric/DatastoreVSphereLink:DatastoreVSphereLink"
                    },
                    "description": "HATEOAS of the entity\n"
                },
                "name": {
                    "type": "string",
                    "description": "A human-friendly name used as an identifier for the vSphere fabric datastore resource instance.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "The id of the organization this entity belongs to.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Email of the user that owns the entity.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:fabric/DatastoreVSphereTag:DatastoreVSphereTag"
                    },
                    "description": "A set of tag keys and optional values that were set on this resource:\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of datastore.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                }
            },
            "required": [
                "cloudAccountIds",
                "createdAt",
                "description",
                "externalId",
                "externalRegionId",
                "freeSizeGb",
                "links",
                "name",
                "orgId",
                "owner",
                "tags",
                "type",
                "updatedAt"
            ],
            "inputProperties": {
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:fabric/DatastoreVSphereTag:DatastoreVSphereTag"
                    },
                    "description": "A set of tag keys and optional values that were set on this resource:\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DatastoreVSphere resources.\n",
                "properties": {
                    "cloudAccountIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of ids of the cloud accounts this entity belongs to.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date when the entity was created. The date is in ISO 8601 and UTC.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A human-friendly description.\n"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "External entity Id on the provider side.\n"
                    },
                    "externalRegionId": {
                        "type": "string",
                        "description": "Id of datacenter in which the datastore is present.\n"
                    },
                    "freeSizeGb": {
                        "type": "string",
                        "description": "Indicates free size available in datastore.\n"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:fabric/DatastoreVSphereLink:DatastoreVSphereLink"
                        },
                        "description": "HATEOAS of the entity\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A human-friendly name used as an identifier for the vSphere fabric datastore resource instance.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The id of the organization this entity belongs to.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Email of the user that owns the entity.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:fabric/DatastoreVSphereTag:DatastoreVSphereTag"
                        },
                        "description": "A set of tag keys and optional values that were set on this resource:\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of datastore.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                    }
                },
                "type": "object"
            }
        },
        "vra:fabric/networkVSphere:NetworkVSphere": {
            "description": "Updates a VMware vRealize Automation fabric_network_vsphere resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\n\nYou cannot create a vSphere fabric network resource, however you can import using the command specified in the import section below.\nOnce a resource is imported, you can update it as shown below:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumiverse/vra\";\n\nconst simple = new vra.fabric.NetworkVSphere(\"simple\", {\n    cidr: _var.cidr,\n    defaultGateway: _var.gateway,\n    domain: _var.domain,\n    tags: [{\n        key: \"foo\",\n        value: \"bar\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vra as vra\n\nsimple = vra.fabric.NetworkVSphere(\"simple\",\n    cidr=var[\"cidr\"],\n    default_gateway=var[\"gateway\"],\n    domain=var[\"domain\"],\n    tags=[vra.fabric.NetworkVSphereTagArgs(\n        key=\"foo\",\n        value=\"bar\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumiverse.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var simple = new Vra.Fabric.NetworkVSphere(\"simple\", new()\n    {\n        Cidr = @var.Cidr,\n        DefaultGateway = @var.Gateway,\n        Domain = @var.Domain,\n        Tags = new[]\n        {\n            new Vra.Fabric.Inputs.NetworkVSphereTagArgs\n            {\n                Key = \"foo\",\n                Value = \"bar\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/fabric\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/fabric\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := fabric.NewNetworkVSphere(ctx, \"simple\", \u0026fabric.NetworkVSphereArgs{\n\t\t\tCidr:           pulumi.Any(_var.Cidr),\n\t\t\tDefaultGateway: pulumi.Any(_var.Gateway),\n\t\t\tDomain:         pulumi.Any(_var.Domain),\n\t\t\tTags: fabric.NetworkVSphereTagArray{\n\t\t\t\t\u0026fabric.NetworkVSphereTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"foo\"),\n\t\t\t\t\tValue: pulumi.String(\"bar\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.fabric.NetworkVSphere;\nimport com.pulumi.vra.fabric.NetworkVSphereArgs;\nimport com.pulumi.vra.fabric.inputs.NetworkVSphereTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var simple = new NetworkVSphere(\"simple\", NetworkVSphereArgs.builder()        \n            .cidr(var_.cidr())\n            .defaultGateway(var_.gateway())\n            .domain(var_.domain())\n            .tags(NetworkVSphereTagArgs.builder()\n                .key(\"foo\")\n                .value(\"bar\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  simple:\n    type: vra:fabric:NetworkVSphere\n    properties:\n      cidr: ${var.cidr}\n      defaultGateway: ${var.gateway}\n      domain: ${var.domain}\n      tags:\n        - key: foo\n          value: bar\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nTo import the vSphere fabric network resource, use the ID as in the following example\n\n```sh\n $ pulumi import vra:fabric/networkVSphere:NetworkVSphere new_fabric_network_vsphere 05956583-6488-4e7d-84c9-92a7b7219a15`\n```\n\n ",
            "properties": {
                "cidr": {
                    "type": "string",
                    "description": "Network CIDR to be used.\n"
                },
                "cloudAccountIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of ids of the cloud accounts this entity belongs to.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Date when the entity was created. The date is in ISO 6801 and UTC.\n"
                },
                "customProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "defaultGateway": {
                    "type": "string",
                    "description": "IPv4 default gateway to be used.\n"
                },
                "defaultIpv6Gateway": {
                    "type": "string",
                    "description": "IPv6 default gateway to be used.\n"
                },
                "dnsSearchDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of dns search domains for the vSphere network.\n"
                },
                "dnsServerAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "Domain for the vSphere network.\n"
                },
                "externalId": {
                    "type": "string",
                    "description": "External entity Id on the provider side.\n"
                },
                "externalRegionId": {
                    "type": "string",
                    "description": "The id of the region for which this network is defined.\n"
                },
                "ipv6Cidr": {
                    "type": "string",
                    "description": "Network IPv6 CIDR to be used.\n"
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "Indicates whether this is the default subnet for the zone.\n"
                },
                "isPublic": {
                    "type": "boolean",
                    "description": "Indicates whether the sub-network supports public IP assignment.\n"
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:fabric/NetworkVSphereLink:NetworkVSphereLink"
                    },
                    "description": "HATEOAS of the entity\n"
                },
                "name": {
                    "type": "string",
                    "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                },
                "orgId": {
                    "type": "string"
                },
                "organizationId": {
                    "type": "string",
                    "description": "ID of organization that entity belongs to.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:fabric/NetworkVSphereTag:NetworkVSphereTag"
                    },
                    "description": "Set of tag keys and values to apply to the resource.\nExample:[ { \"key\" : \"vmware\", \"value\": \"provider\" } ]\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                }
            },
            "required": [
                "cidr",
                "cloudAccountIds",
                "createdAt",
                "customProperties",
                "defaultGateway",
                "defaultIpv6Gateway",
                "dnsSearchDomains",
                "dnsServerAddresses",
                "externalId",
                "externalRegionId",
                "links",
                "name",
                "orgId",
                "organizationId",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "cidr": {
                    "type": "string",
                    "description": "Network CIDR to be used.\n"
                },
                "defaultGateway": {
                    "type": "string",
                    "description": "IPv4 default gateway to be used.\n"
                },
                "defaultIpv6Gateway": {
                    "type": "string",
                    "description": "IPv6 default gateway to be used.\n"
                },
                "dnsSearchDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of dns search domains for the vSphere network.\n"
                },
                "dnsServerAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "Domain for the vSphere network.\n"
                },
                "ipv6Cidr": {
                    "type": "string",
                    "description": "Network IPv6 CIDR to be used.\n"
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "Indicates whether this is the default subnet for the zone.\n"
                },
                "isPublic": {
                    "type": "boolean",
                    "description": "Indicates whether the sub-network supports public IP assignment.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:fabric/NetworkVSphereTag:NetworkVSphereTag"
                    },
                    "description": "Set of tag keys and values to apply to the resource.\nExample:[ { \"key\" : \"vmware\", \"value\": \"provider\" } ]\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkVSphere resources.\n",
                "properties": {
                    "cidr": {
                        "type": "string",
                        "description": "Network CIDR to be used.\n"
                    },
                    "cloudAccountIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of ids of the cloud accounts this entity belongs to.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date when the entity was created. The date is in ISO 6801 and UTC.\n"
                    },
                    "customProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "defaultGateway": {
                        "type": "string",
                        "description": "IPv4 default gateway to be used.\n"
                    },
                    "defaultIpv6Gateway": {
                        "type": "string",
                        "description": "IPv6 default gateway to be used.\n"
                    },
                    "dnsSearchDomains": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of dns search domains for the vSphere network.\n"
                    },
                    "dnsServerAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "Domain for the vSphere network.\n"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "External entity Id on the provider side.\n"
                    },
                    "externalRegionId": {
                        "type": "string",
                        "description": "The id of the region for which this network is defined.\n"
                    },
                    "ipv6Cidr": {
                        "type": "string",
                        "description": "Network IPv6 CIDR to be used.\n"
                    },
                    "isDefault": {
                        "type": "boolean",
                        "description": "Indicates whether this is the default subnet for the zone.\n"
                    },
                    "isPublic": {
                        "type": "boolean",
                        "description": "Indicates whether the sub-network supports public IP assignment.\n"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:fabric/NetworkVSphereLink:NetworkVSphereLink"
                        },
                        "description": "HATEOAS of the entity\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "ID of organization that entity belongs to.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:fabric/NetworkVSphereTag:NetworkVSphereTag"
                        },
                        "description": "Set of tag keys and values to apply to the resource.\nExample:[ { \"key\" : \"vmware\", \"value\": \"provider\" } ]\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                    }
                },
                "type": "object"
            }
        },
        "vra:flavor/profile:Profile": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\nThis is an example of how to create a flavor profile resource.\n\n**Flavor profile:**\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst my_flavor_profile = new vra.flavor.Profile(\"my-flavor-profile\", {\n    description: \"my flavor\",\n    flavorMappings: [\n        {\n            instanceType: \"t2.small\",\n            name: \"small\",\n        },\n        {\n            instanceType: \"t2.medium\",\n            name: \"medium\",\n        },\n    ],\n    regionId: vra_region_us_east_1_region.id,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vra as vra\n\nmy_flavor_profile = vra.flavor.Profile(\"my-flavor-profile\",\n    description=\"my flavor\",\n    flavor_mappings=[\n        vra.flavor.ProfileFlavorMappingArgs(\n            instance_type=\"t2.small\",\n            name=\"small\",\n        ),\n        vra.flavor.ProfileFlavorMappingArgs(\n            instance_type=\"t2.medium\",\n            name=\"medium\",\n        ),\n    ],\n    region_id=data[\"vra_region\"][\"us-east-1-region\"][\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumiverse.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_flavor_profile = new Vra.Flavor.Profile(\"my-flavor-profile\", new()\n    {\n        Description = \"my flavor\",\n        FlavorMappings = new[]\n        {\n            new Vra.Flavor.Inputs.ProfileFlavorMappingArgs\n            {\n                InstanceType = \"t2.small\",\n                Name = \"small\",\n            },\n            new Vra.Flavor.Inputs.ProfileFlavorMappingArgs\n            {\n                InstanceType = \"t2.medium\",\n                Name = \"medium\",\n            },\n        },\n        RegionId = data.Vra_region.Us_east_1_region.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/flavor\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/flavor\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := flavor.NewProfile(ctx, \"my-flavor-profile\", \u0026flavor.ProfileArgs{\n\t\t\tDescription: pulumi.String(\"my flavor\"),\n\t\t\tFlavorMappings: flavor.ProfileFlavorMappingArray{\n\t\t\t\t\u0026flavor.ProfileFlavorMappingArgs{\n\t\t\t\t\tInstanceType: pulumi.String(\"t2.small\"),\n\t\t\t\t\tName:         pulumi.String(\"small\"),\n\t\t\t\t},\n\t\t\t\t\u0026flavor.ProfileFlavorMappingArgs{\n\t\t\t\t\tInstanceType: pulumi.String(\"t2.medium\"),\n\t\t\t\t\tName:         pulumi.String(\"medium\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tRegionId: pulumi.Any(data.Vra_region.Us - east - 1 - region.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.flavor.Profile;\nimport com.pulumi.vra.flavor.ProfileArgs;\nimport com.pulumi.vra.flavor.inputs.ProfileFlavorMappingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var my_flavor_profile = new Profile(\"my-flavor-profile\", ProfileArgs.builder()        \n            .description(\"my flavor\")\n            .flavorMappings(            \n                ProfileFlavorMappingArgs.builder()\n                    .instanceType(\"t2.small\")\n                    .name(\"small\")\n                    .build(),\n                ProfileFlavorMappingArgs.builder()\n                    .instanceType(\"t2.medium\")\n                    .name(\"medium\")\n                    .build())\n            .regionId(data.vra_region().us-east-1-region().id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  my-flavor-profile:\n    type: vra:flavor:Profile\n    properties:\n      description: my flavor\n      flavorMappings:\n        - instanceType: t2.small\n          name: small\n        - instanceType: t2.medium\n          name: medium\n      regionId: ${data.vra_region\"us-east-1-region\"[%!s(MISSING)].id}\n```\n\nAn flavor profile resource supports the following arguments:\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "cloudAccountId": {
                    "type": "string",
                    "description": "The ID of the cloud account this entity belongs to.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Date when  entity was created. Date and time format is ISO 8601 and UTC.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A human-friendly description.\n"
                },
                "externalRegionId": {
                    "type": "string",
                    "description": "The ID of the external region that is associated with the flavor profile.\n"
                },
                "flavorMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:flavor/ProfileFlavorMapping:ProfileFlavorMapping"
                    },
                    "description": "Map between global fabric flavor keys and fabric flavor descriptions.\n"
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:flavor/ProfileLink:ProfileLink"
                    },
                    "description": "HATEOAS of entity.\n"
                },
                "name": {
                    "type": "string",
                    "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of organization that entity belongs to.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Email of entity owner.\n"
                },
                "regionId": {
                    "type": "string",
                    "description": "The id of the region for which this profile is defined as in vRealize Automation(vRA).\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date when the entity was last updated. Date and time format is ISO 8601 and UTC.\n"
                }
            },
            "required": [
                "cloudAccountId",
                "createdAt",
                "externalRegionId",
                "links",
                "name",
                "orgId",
                "owner",
                "regionId",
                "updatedAt"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A human-friendly description.\n"
                },
                "flavorMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:flavor/ProfileFlavorMapping:ProfileFlavorMapping"
                    },
                    "description": "Map between global fabric flavor keys and fabric flavor descriptions.\n"
                },
                "name": {
                    "type": "string",
                    "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                },
                "regionId": {
                    "type": "string",
                    "description": "The id of the region for which this profile is defined as in vRealize Automation(vRA).\n"
                }
            },
            "requiredInputs": [
                "regionId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Profile resources.\n",
                "properties": {
                    "cloudAccountId": {
                        "type": "string",
                        "description": "The ID of the cloud account this entity belongs to.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date when  entity was created. Date and time format is ISO 8601 and UTC.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A human-friendly description.\n"
                    },
                    "externalRegionId": {
                        "type": "string",
                        "description": "The ID of the external region that is associated with the flavor profile.\n"
                    },
                    "flavorMappings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:flavor/ProfileFlavorMapping:ProfileFlavorMapping"
                        },
                        "description": "Map between global fabric flavor keys and fabric flavor descriptions.\n"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:flavor/ProfileLink:ProfileLink"
                        },
                        "description": "HATEOAS of entity.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of organization that entity belongs to.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Email of entity owner.\n"
                    },
                    "regionId": {
                        "type": "string",
                        "description": "The id of the region for which this profile is defined as in vRealize Automation(vRA).\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when the entity was last updated. Date and time format is ISO 8601 and UTC.\n"
                    }
                },
                "type": "object"
            }
        },
        "vra:image/profile:Profile": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\nThis is an example of how to create an image profile resource.\n\n**Image profile:**\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumiverse/vra\";\n\nconst _this = new vra.image.Profile(\"this\", {\n    description: \"test image profile\",\n    regionId: data.vra_region[\"this\"].id,\n    imageMappings: [\n        {\n            name: \"centos\",\n            imageId: data.vra_image.centos.id,\n            constraints: [\n                {\n                    mandatory: true,\n                    expression: \"!env:Test\",\n                },\n                {\n                    mandatory: false,\n                    expression: \"foo:bar\",\n                },\n            ],\n        },\n        {\n            name: \"photon\",\n            imageId: data.vra_image.photon.id,\n            cloudConfig: \"runcmd echo 'Hello'\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vra as vra\n\nthis = vra.image.Profile(\"this\",\n    description=\"test image profile\",\n    region_id=data[\"vra_region\"][\"this\"][\"id\"],\n    image_mappings=[\n        vra.image.ProfileImageMappingArgs(\n            name=\"centos\",\n            image_id=data[\"vra_image\"][\"centos\"][\"id\"],\n            constraints=[\n                vra.image.ProfileImageMappingConstraintArgs(\n                    mandatory=True,\n                    expression=\"!env:Test\",\n                ),\n                vra.image.ProfileImageMappingConstraintArgs(\n                    mandatory=False,\n                    expression=\"foo:bar\",\n                ),\n            ],\n        ),\n        vra.image.ProfileImageMappingArgs(\n            name=\"photon\",\n            image_id=data[\"vra_image\"][\"photon\"][\"id\"],\n            cloud_config=\"runcmd echo 'Hello'\",\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumiverse.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = new Vra.Image.Profile(\"this\", new()\n    {\n        Description = \"test image profile\",\n        RegionId = data.Vra_region.This.Id,\n        ImageMappings = new[]\n        {\n            new Vra.Image.Inputs.ProfileImageMappingArgs\n            {\n                Name = \"centos\",\n                ImageId = data.Vra_image.Centos.Id,\n                Constraints = new[]\n                {\n                    new Vra.Image.Inputs.ProfileImageMappingConstraintArgs\n                    {\n                        Mandatory = true,\n                        Expression = \"!env:Test\",\n                    },\n                    new Vra.Image.Inputs.ProfileImageMappingConstraintArgs\n                    {\n                        Mandatory = false,\n                        Expression = \"foo:bar\",\n                    },\n                },\n            },\n            new Vra.Image.Inputs.ProfileImageMappingArgs\n            {\n                Name = \"photon\",\n                ImageId = data.Vra_image.Photon.Id,\n                CloudConfig = \"runcmd echo 'Hello'\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/image\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/image\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := image.NewProfile(ctx, \"this\", \u0026image.ProfileArgs{\n\t\t\tDescription: pulumi.String(\"test image profile\"),\n\t\t\tRegionId:    pulumi.Any(data.Vra_region.This.Id),\n\t\t\tImageMappings: image.ProfileImageMappingArray{\n\t\t\t\t\u0026image.ProfileImageMappingArgs{\n\t\t\t\t\tName:    pulumi.String(\"centos\"),\n\t\t\t\t\tImageId: pulumi.Any(data.Vra_image.Centos.Id),\n\t\t\t\t\tConstraints: image.ProfileImageMappingConstraintArray{\n\t\t\t\t\t\t\u0026image.ProfileImageMappingConstraintArgs{\n\t\t\t\t\t\t\tMandatory:  pulumi.Bool(true),\n\t\t\t\t\t\t\tExpression: pulumi.String(\"!env:Test\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026image.ProfileImageMappingConstraintArgs{\n\t\t\t\t\t\t\tMandatory:  pulumi.Bool(false),\n\t\t\t\t\t\t\tExpression: pulumi.String(\"foo:bar\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026image.ProfileImageMappingArgs{\n\t\t\t\t\tName:        pulumi.String(\"photon\"),\n\t\t\t\t\tImageId:     pulumi.Any(data.Vra_image.Photon.Id),\n\t\t\t\t\tCloudConfig: pulumi.String(\"runcmd echo 'Hello'\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.image.Profile;\nimport com.pulumi.vra.image.ProfileArgs;\nimport com.pulumi.vra.image.inputs.ProfileImageMappingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var this_ = new Profile(\"this\", ProfileArgs.builder()        \n            .description(\"test image profile\")\n            .regionId(data.vra_region().this().id())\n            .imageMappings(            \n                ProfileImageMappingArgs.builder()\n                    .name(\"centos\")\n                    .imageId(data.vra_image().centos().id())\n                    .constraints(                    \n                        ProfileImageMappingConstraintArgs.builder()\n                            .mandatory(true)\n                            .expression(\"!env:Test\")\n                            .build(),\n                        ProfileImageMappingConstraintArgs.builder()\n                            .mandatory(false)\n                            .expression(\"foo:bar\")\n                            .build())\n                    .build(),\n                ProfileImageMappingArgs.builder()\n                    .name(\"photon\")\n                    .imageId(data.vra_image().photon().id())\n                    .cloudConfig(\"runcmd echo 'Hello'\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  this:\n    type: vra:image:Profile\n    properties:\n      description: test image profile\n      regionId: ${data.vra_region.this.id}\n      imageMappings:\n        - name: centos\n          imageId: ${data.vra_image.centos.id}\n          constraints:\n            - mandatory: true\n              expression: '!env:Test'\n            - mandatory: false\n              expression: foo:bar\n        - name: photon\n          imageId: ${data.vra_image.photon.id}\n          cloudConfig: runcmd echo 'Hello'\n```\n\nAn image profile resource supports the following arguments:\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Date when the entity was created. The date is in ISO 6801 and UTC.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A human-friendly description.\n"
                },
                "externalRegionId": {
                    "type": "string",
                    "description": "The external regionId of the resource.\n"
                },
                "imageMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:image/ProfileImageMapping:ProfileImageMapping"
                    },
                    "description": "Image mapping defined for the corresponding region.\n"
                },
                "name": {
                    "type": "string",
                    "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Email of the user that owns the entity.\n"
                },
                "regionId": {
                    "type": "string",
                    "description": "The id of the region for which this profile is defined as in vRealize Automation(vRA).\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                }
            },
            "required": [
                "createdAt",
                "externalRegionId",
                "name",
                "owner",
                "regionId",
                "updatedAt"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A human-friendly description.\n"
                },
                "imageMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:image/ProfileImageMapping:ProfileImageMapping"
                    },
                    "description": "Image mapping defined for the corresponding region.\n"
                },
                "name": {
                    "type": "string",
                    "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                },
                "regionId": {
                    "type": "string",
                    "description": "The id of the region for which this profile is defined as in vRealize Automation(vRA).\n"
                }
            },
            "requiredInputs": [
                "regionId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Profile resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Date when the entity was created. The date is in ISO 6801 and UTC.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A human-friendly description.\n"
                    },
                    "externalRegionId": {
                        "type": "string",
                        "description": "The external regionId of the resource.\n"
                    },
                    "imageMappings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:image/ProfileImageMapping:ProfileImageMapping"
                        },
                        "description": "Image mapping defined for the corresponding region.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Email of the user that owns the entity.\n"
                    },
                    "regionId": {
                        "type": "string",
                        "description": "The id of the region for which this profile is defined as in vRealize Automation(vRA).\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                    }
                },
                "type": "object"
            }
        },
        "vra:loadbalancer/loadBalancer:LoadBalancer": {
            "description": "Creates a VMware vRealize Automation load balancer resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\n\nThe following example shows how to create a load balancer resource.\n\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumiverse/vra\";\n\nconst _this = new vra.loadbalancer.LoadBalancer(\"this\", {\n    projectId: vra_project[\"my-project\"].id,\n    description: \"My Load Balancer\",\n    customProperties: {\n        edgeClusterRouterStateLink: \"/resources/routers/\u003cuuid\u003e\",\n        tier0LogicalRouterStateLink: \"/resources/routers/\u003cuuid\u003e\",\n    },\n    targets: [{\n        machineId: vra_machine.my_machine.id,\n    }],\n    nics: [{\n        networkId: data.vra_network[\"my-network\"].id,\n    }],\n    routes: [{\n        protocol: \"TCP\",\n        port: \"80\",\n        memberProtocol: \"TCP\",\n        memberPort: \"80\",\n        healthCheckConfigurations: [{\n            protocol: \"TCP\",\n            port: \"80\",\n            intervalSeconds: 30,\n            timeoutSeconds: 10,\n            unhealthyThreshold: 2,\n            healthyThreshold: 10,\n        }],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vra as vra\n\nthis = vra.loadbalancer.LoadBalancer(\"this\",\n    project_id=vra_project[\"my-project\"][\"id\"],\n    description=\"My Load Balancer\",\n    custom_properties={\n        \"edgeClusterRouterStateLink\": \"/resources/routers/\u003cuuid\u003e\",\n        \"tier0LogicalRouterStateLink\": \"/resources/routers/\u003cuuid\u003e\",\n    },\n    targets=[vra.loadbalancer.LoadBalancerTargetArgs(\n        machine_id=vra_machine[\"my_machine\"][\"id\"],\n    )],\n    nics=[vra.loadbalancer.LoadBalancerNicArgs(\n        network_id=data[\"vra_network\"][\"my-network\"][\"id\"],\n    )],\n    routes=[vra.loadbalancer.LoadBalancerRouteArgs(\n        protocol=\"TCP\",\n        port=\"80\",\n        member_protocol=\"TCP\",\n        member_port=\"80\",\n        health_check_configurations=[vra.loadbalancer.LoadBalancerRouteHealthCheckConfigurationArgs(\n            protocol=\"TCP\",\n            port=\"80\",\n            interval_seconds=30,\n            timeout_seconds=10,\n            unhealthy_threshold=2,\n            healthy_threshold=10,\n        )],\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumiverse.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = new Vra.Loadbalancer.LoadBalancer(\"this\", new()\n    {\n        ProjectId = vra_project.My_project.Id,\n        Description = \"My Load Balancer\",\n        CustomProperties = \n        {\n            { \"edgeClusterRouterStateLink\", \"/resources/routers/\u003cuuid\u003e\" },\n            { \"tier0LogicalRouterStateLink\", \"/resources/routers/\u003cuuid\u003e\" },\n        },\n        Targets = new[]\n        {\n            new Vra.Loadbalancer.Inputs.LoadBalancerTargetArgs\n            {\n                MachineId = vra_machine.My_machine.Id,\n            },\n        },\n        Nics = new[]\n        {\n            new Vra.Loadbalancer.Inputs.LoadBalancerNicArgs\n            {\n                NetworkId = data.Vra_network.My_network.Id,\n            },\n        },\n        Routes = new[]\n        {\n            new Vra.Loadbalancer.Inputs.LoadBalancerRouteArgs\n            {\n                Protocol = \"TCP\",\n                Port = \"80\",\n                MemberProtocol = \"TCP\",\n                MemberPort = \"80\",\n                HealthCheckConfigurations = new[]\n                {\n                    new Vra.Loadbalancer.Inputs.LoadBalancerRouteHealthCheckConfigurationArgs\n                    {\n                        Protocol = \"TCP\",\n                        Port = \"80\",\n                        IntervalSeconds = 30,\n                        TimeoutSeconds = 10,\n                        UnhealthyThreshold = 2,\n                        HealthyThreshold = 10,\n                    },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/loadbalancer\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/loadbalancer\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := loadbalancer.NewLoadBalancer(ctx, \"this\", \u0026loadbalancer.LoadBalancerArgs{\n\t\t\tProjectId:   pulumi.Any(vra_project.My - project.Id),\n\t\t\tDescription: pulumi.String(\"My Load Balancer\"),\n\t\t\tCustomProperties: pulumi.AnyMap{\n\t\t\t\t\"edgeClusterRouterStateLink\":  pulumi.Any(\"/resources/routers/\u003cuuid\u003e\"),\n\t\t\t\t\"tier0LogicalRouterStateLink\": pulumi.Any(\"/resources/routers/\u003cuuid\u003e\"),\n\t\t\t},\n\t\t\tTargets: loadbalancer.LoadBalancerTargetArray{\n\t\t\t\t\u0026loadbalancer.LoadBalancerTargetArgs{\n\t\t\t\t\tMachineId: pulumi.Any(vra_machine.My_machine.Id),\n\t\t\t\t},\n\t\t\t},\n\t\t\tNics: loadbalancer.LoadBalancerNicArray{\n\t\t\t\t\u0026loadbalancer.LoadBalancerNicArgs{\n\t\t\t\t\tNetworkId: pulumi.Any(data.Vra_network.My - network.Id),\n\t\t\t\t},\n\t\t\t},\n\t\t\tRoutes: loadbalancer.LoadBalancerRouteArray{\n\t\t\t\t\u0026loadbalancer.LoadBalancerRouteArgs{\n\t\t\t\t\tProtocol:       pulumi.String(\"TCP\"),\n\t\t\t\t\tPort:           pulumi.String(\"80\"),\n\t\t\t\t\tMemberProtocol: pulumi.String(\"TCP\"),\n\t\t\t\t\tMemberPort:     pulumi.String(\"80\"),\n\t\t\t\t\tHealthCheckConfigurations: loadbalancer.LoadBalancerRouteHealthCheckConfigurationArray{\n\t\t\t\t\t\t\u0026loadbalancer.LoadBalancerRouteHealthCheckConfigurationArgs{\n\t\t\t\t\t\t\tProtocol:           pulumi.String(\"TCP\"),\n\t\t\t\t\t\t\tPort:               pulumi.String(\"80\"),\n\t\t\t\t\t\t\tIntervalSeconds:    pulumi.Int(30),\n\t\t\t\t\t\t\tTimeoutSeconds:     pulumi.Int(10),\n\t\t\t\t\t\t\tUnhealthyThreshold: pulumi.Int(2),\n\t\t\t\t\t\t\tHealthyThreshold:   pulumi.Int(10),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.loadbalancer.LoadBalancer;\nimport com.pulumi.vra.loadbalancer.LoadBalancerArgs;\nimport com.pulumi.vra.loadbalancer.inputs.LoadBalancerTargetArgs;\nimport com.pulumi.vra.loadbalancer.inputs.LoadBalancerNicArgs;\nimport com.pulumi.vra.loadbalancer.inputs.LoadBalancerRouteArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var this_ = new LoadBalancer(\"this\", LoadBalancerArgs.builder()        \n            .projectId(vra_project.my-project().id())\n            .description(\"My Load Balancer\")\n            .customProperties(Map.ofEntries(\n                Map.entry(\"edgeClusterRouterStateLink\", \"/resources/routers/\u003cuuid\u003e\"),\n                Map.entry(\"tier0LogicalRouterStateLink\", \"/resources/routers/\u003cuuid\u003e\")\n            ))\n            .targets(LoadBalancerTargetArgs.builder()\n                .machineId(vra_machine.my_machine().id())\n                .build())\n            .nics(LoadBalancerNicArgs.builder()\n                .networkId(data.vra_network().my-network().id())\n                .build())\n            .routes(LoadBalancerRouteArgs.builder()\n                .protocol(\"TCP\")\n                .port(\"80\")\n                .memberProtocol(\"TCP\")\n                .memberPort(\"80\")\n                .healthCheckConfigurations(LoadBalancerRouteHealthCheckConfigurationArgs.builder()\n                    .protocol(\"TCP\")\n                    .port(\"80\")\n                    .intervalSeconds(30)\n                    .timeoutSeconds(10)\n                    .unhealthyThreshold(2)\n                    .healthyThreshold(10)\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  this:\n    type: vra:loadbalancer:LoadBalancer\n    properties:\n      projectId: ${vra_project\"my-project\"[%!s(MISSING)].id}\n      description: My Load Balancer\n      customProperties:\n        edgeClusterRouterStateLink: /resources/routers/\u003cuuid\u003e\n        tier0LogicalRouterStateLink: /resources/routers/\u003cuuid\u003e\n      targets:\n        - machineId: ${vra_machine.my_machine.id}\n      nics:\n        - networkId: ${data.vra_network\"my-network\"[%!s(MISSING)].id}\n      routes:\n        - protocol: TCP\n          port: 80\n          memberProtocol: TCP\n          memberPort: 80\n          healthCheckConfigurations:\n            - protocol: TCP\n              port: 80\n              intervalSeconds: 30\n              timeoutSeconds: 10\n              unhealthyThreshold: 2\n              healthyThreshold: 10\n```\n\nA block device resource supports the following arguments:\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "Primary address allocated or in use by this load balancer. The address could be an in the form of a publicly resolvable DNS name or an IP address.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Date when the entity was created. The date is in ISO 6801 and UTC.\n"
                },
                "customProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Additional custom properties that may be used to extend the machine.\n"
                },
                "deploymentId": {
                    "type": "string",
                    "description": "The id of the deployment that is associated with this resource.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Describes machine within the scope of your organization and is not propagated to the cloud.\n"
                },
                "externalId": {
                    "type": "string",
                    "description": "External entity Id on the provider side.\n"
                },
                "externalRegionId": {
                    "type": "string",
                    "description": "The external regionId of the resource.\n"
                },
                "externalZoneId": {
                    "type": "string",
                    "description": "The external regionId of the resource.\n"
                },
                "internetFacing": {
                    "type": "boolean",
                    "description": "An Internet-facing load balancer has a publicly resolvable DNS name, so it can route requests from clients over the Internet to the instances that are registered with the load balancer.\n"
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:loadbalancer/LoadBalancerLink:LoadBalancerLink"
                    },
                    "description": "HATEOAS of the entity.\n"
                },
                "name": {
                    "type": "string",
                    "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                },
                "nics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:loadbalancer/LoadBalancerNic:LoadBalancerNic"
                    },
                    "description": "A set of network interface specifications for this load balancer.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The id of the organization this entity belongs to.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Email of the user that owns the entity.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The id of the project the current user belongs to.\n"
                },
                "routes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:loadbalancer/LoadBalancerRoute:LoadBalancerRoute"
                    },
                    "description": "The load balancer route configuration regarding ports and protocols.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:loadbalancer/LoadBalancerTag:LoadBalancerTag"
                    },
                    "description": "A set of tag keys and optional values that were set on this resource instance.\nexample:[ { \"key\" : \"vmware.enumeration.type\", \"value\": \"nebs_block\" } ]\n"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:loadbalancer/LoadBalancerTarget:LoadBalancerTarget"
                    },
                    "description": "A list of links to target load balancer pool members. Links can be to either a machine or a machine's network interface.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                }
            },
            "required": [
                "address",
                "createdAt",
                "customProperties",
                "deploymentId",
                "externalId",
                "externalRegionId",
                "externalZoneId",
                "links",
                "name",
                "nics",
                "organizationId",
                "owner",
                "projectId",
                "routes",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "customProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Additional custom properties that may be used to extend the machine.\n"
                },
                "deploymentId": {
                    "type": "string",
                    "description": "The id of the deployment that is associated with this resource.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Describes machine within the scope of your organization and is not propagated to the cloud.\n"
                },
                "internetFacing": {
                    "type": "boolean",
                    "description": "An Internet-facing load balancer has a publicly resolvable DNS name, so it can route requests from clients over the Internet to the instances that are registered with the load balancer.\n"
                },
                "name": {
                    "type": "string",
                    "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                },
                "nics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:loadbalancer/LoadBalancerNic:LoadBalancerNic"
                    },
                    "description": "A set of network interface specifications for this load balancer.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The id of the project the current user belongs to.\n"
                },
                "routes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:loadbalancer/LoadBalancerRoute:LoadBalancerRoute"
                    },
                    "description": "The load balancer route configuration regarding ports and protocols.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:loadbalancer/LoadBalancerTag:LoadBalancerTag"
                    },
                    "description": "A set of tag keys and optional values that were set on this resource instance.\nexample:[ { \"key\" : \"vmware.enumeration.type\", \"value\": \"nebs_block\" } ]\n"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:loadbalancer/LoadBalancerTarget:LoadBalancerTarget"
                    },
                    "description": "A list of links to target load balancer pool members. Links can be to either a machine or a machine's network interface.\n"
                }
            },
            "requiredInputs": [
                "nics",
                "projectId",
                "routes"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LoadBalancer resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "Primary address allocated or in use by this load balancer. The address could be an in the form of a publicly resolvable DNS name or an IP address.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date when the entity was created. The date is in ISO 6801 and UTC.\n"
                    },
                    "customProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Additional custom properties that may be used to extend the machine.\n"
                    },
                    "deploymentId": {
                        "type": "string",
                        "description": "The id of the deployment that is associated with this resource.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Describes machine within the scope of your organization and is not propagated to the cloud.\n"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "External entity Id on the provider side.\n"
                    },
                    "externalRegionId": {
                        "type": "string",
                        "description": "The external regionId of the resource.\n"
                    },
                    "externalZoneId": {
                        "type": "string",
                        "description": "The external regionId of the resource.\n"
                    },
                    "internetFacing": {
                        "type": "boolean",
                        "description": "An Internet-facing load balancer has a publicly resolvable DNS name, so it can route requests from clients over the Internet to the instances that are registered with the load balancer.\n"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:loadbalancer/LoadBalancerLink:LoadBalancerLink"
                        },
                        "description": "HATEOAS of the entity.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                    },
                    "nics": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:loadbalancer/LoadBalancerNic:LoadBalancerNic"
                        },
                        "description": "A set of network interface specifications for this load balancer.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The id of the organization this entity belongs to.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Email of the user that owns the entity.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The id of the project the current user belongs to.\n"
                    },
                    "routes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:loadbalancer/LoadBalancerRoute:LoadBalancerRoute"
                        },
                        "description": "The load balancer route configuration regarding ports and protocols.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:loadbalancer/LoadBalancerTag:LoadBalancerTag"
                        },
                        "description": "A set of tag keys and optional values that were set on this resource instance.\nexample:[ { \"key\" : \"vmware.enumeration.type\", \"value\": \"nebs_block\" } ]\n"
                    },
                    "targets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:loadbalancer/LoadBalancerTarget:LoadBalancerTarget"
                        },
                        "description": "A list of links to target load balancer pool members. Links can be to either a machine or a machine's network interface.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                    }
                },
                "type": "object"
            }
        },
        "vra:machine/machine:Machine": {
            "description": "Creates a VMware vRealize Automation machine resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\n\nThe following example shows how to create a machine resource.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumiverse/vra\";\n\nconst _this = new vra.machine.Machine(\"this\", {\n    description: \"terrafrom test machine\",\n    projectId: data.vra_project[\"this\"].id,\n    image: \"ubuntu2\",\n    flavor: \"medium\",\n    bootConfig: {\n        content: `#cloud-config\n  users:\n  - default\n  - name: myuser\n    sudo: ['ALL=(ALL) NOPASSWD:ALL']\n    groups: [wheel, sudo, admin]\n    shell: '/bin/bash'\n    ssh-authorized-keys: |\n      ssh-rsa your-ssh-rsa:\n    - sudo sed -e 's/.*PasswordAuthentication yes.*/PasswordAuthentication no/' -i /etc/ssh/sshd_config\n    - sudo service sshd restart\n`,\n    },\n    nics: [{\n        networkId: data.vra_network[\"this\"].id,\n    }],\n    constraints: [{\n        mandatory: true,\n        expression: \"AWS\",\n    }],\n    tags: [{\n        key: \"foo\",\n        value: \"bar\",\n    }],\n    disks: [\n        {\n            blockDeviceId: vra_block_device.disk1.id,\n        },\n        {\n            blockDeviceId: vra_block_device.disk2.id,\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vra as vra\n\nthis = vra.machine.Machine(\"this\",\n    description=\"terrafrom test machine\",\n    project_id=data[\"vra_project\"][\"this\"][\"id\"],\n    image=\"ubuntu2\",\n    flavor=\"medium\",\n    boot_config=vra.machine.MachineBootConfigArgs(\n        content=\"\"\"#cloud-config\n  users:\n  - default\n  - name: myuser\n    sudo: ['ALL=(ALL) NOPASSWD:ALL']\n    groups: [wheel, sudo, admin]\n    shell: '/bin/bash'\n    ssh-authorized-keys: |\n      ssh-rsa your-ssh-rsa:\n    - sudo sed -e 's/.*PasswordAuthentication yes.*/PasswordAuthentication no/' -i /etc/ssh/sshd_config\n    - sudo service sshd restart\n\"\"\",\n    ),\n    nics=[vra.machine.MachineNicArgs(\n        network_id=data[\"vra_network\"][\"this\"][\"id\"],\n    )],\n    constraints=[vra.machine.MachineConstraintArgs(\n        mandatory=True,\n        expression=\"AWS\",\n    )],\n    tags=[vra.machine.MachineTagArgs(\n        key=\"foo\",\n        value=\"bar\",\n    )],\n    disks=[\n        vra.machine.MachineDiskArgs(\n            block_device_id=vra_block_device[\"disk1\"][\"id\"],\n        ),\n        vra.machine.MachineDiskArgs(\n            block_device_id=vra_block_device[\"disk2\"][\"id\"],\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumiverse.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = new Vra.Machine.Machine(\"this\", new()\n    {\n        Description = \"terrafrom test machine\",\n        ProjectId = data.Vra_project.This.Id,\n        Image = \"ubuntu2\",\n        Flavor = \"medium\",\n        BootConfig = new Vra.Machine.Inputs.MachineBootConfigArgs\n        {\n            Content = @\"#cloud-config\n  users:\n  - default\n  - name: myuser\n    sudo: ['ALL=(ALL) NOPASSWD:ALL']\n    groups: [wheel, sudo, admin]\n    shell: '/bin/bash'\n    ssh-authorized-keys: |\n      ssh-rsa your-ssh-rsa:\n    - sudo sed -e 's/.*PasswordAuthentication yes.*/PasswordAuthentication no/' -i /etc/ssh/sshd_config\n    - sudo service sshd restart\n\",\n        },\n        Nics = new[]\n        {\n            new Vra.Machine.Inputs.MachineNicArgs\n            {\n                NetworkId = data.Vra_network.This.Id,\n            },\n        },\n        Constraints = new[]\n        {\n            new Vra.Machine.Inputs.MachineConstraintArgs\n            {\n                Mandatory = true,\n                Expression = \"AWS\",\n            },\n        },\n        Tags = new[]\n        {\n            new Vra.Machine.Inputs.MachineTagArgs\n            {\n                Key = \"foo\",\n                Value = \"bar\",\n            },\n        },\n        Disks = new[]\n        {\n            new Vra.Machine.Inputs.MachineDiskArgs\n            {\n                BlockDeviceId = vra_block_device.Disk1.Id,\n            },\n            new Vra.Machine.Inputs.MachineDiskArgs\n            {\n                BlockDeviceId = vra_block_device.Disk2.Id,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/machine\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/machine\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := machine.NewMachine(ctx, \"this\", \u0026machine.MachineArgs{\n\t\t\tDescription: pulumi.String(\"terrafrom test machine\"),\n\t\t\tProjectId:   pulumi.Any(data.Vra_project.This.Id),\n\t\t\tImage:       pulumi.String(\"ubuntu2\"),\n\t\t\tFlavor:      pulumi.String(\"medium\"),\n\t\t\tBootConfig: \u0026machine.MachineBootConfigArgs{\n\t\t\t\tContent: pulumi.String(fmt.Sprintf(`#cloud-config\n  users:\n  - default\n  - name: myuser\n    sudo: ['ALL=(ALL) NOPASSWD:ALL']\n    groups: [wheel, sudo, admin]\n    shell: '/bin/bash'\n    ssh-authorized-keys: |\n      ssh-rsa your-ssh-rsa:\n    - sudo sed -e 's/.*PasswordAuthentication yes.*/PasswordAuthentication no/' -i /etc/ssh/sshd_config\n    - sudo service sshd restart\n`)),\n\t\t\t},\n\t\t\tNics: machine.MachineNicArray{\n\t\t\t\t\u0026machine.MachineNicArgs{\n\t\t\t\t\tNetworkId: pulumi.Any(data.Vra_network.This.Id),\n\t\t\t\t},\n\t\t\t},\n\t\t\tConstraints: machine.MachineConstraintArray{\n\t\t\t\t\u0026machine.MachineConstraintArgs{\n\t\t\t\t\tMandatory:  pulumi.Bool(true),\n\t\t\t\t\tExpression: pulumi.String(\"AWS\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTags: machine.MachineTagArray{\n\t\t\t\t\u0026machine.MachineTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"foo\"),\n\t\t\t\t\tValue: pulumi.String(\"bar\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tDisks: machine.MachineDiskArray{\n\t\t\t\t\u0026machine.MachineDiskArgs{\n\t\t\t\t\tBlockDeviceId: pulumi.Any(vra_block_device.Disk1.Id),\n\t\t\t\t},\n\t\t\t\t\u0026machine.MachineDiskArgs{\n\t\t\t\t\tBlockDeviceId: pulumi.Any(vra_block_device.Disk2.Id),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.machine.Machine;\nimport com.pulumi.vra.machine.MachineArgs;\nimport com.pulumi.vra.machine.inputs.MachineBootConfigArgs;\nimport com.pulumi.vra.machine.inputs.MachineNicArgs;\nimport com.pulumi.vra.machine.inputs.MachineConstraintArgs;\nimport com.pulumi.vra.machine.inputs.MachineTagArgs;\nimport com.pulumi.vra.machine.inputs.MachineDiskArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var this_ = new Machine(\"this\", MachineArgs.builder()        \n            .description(\"terrafrom test machine\")\n            .projectId(data.vra_project().this().id())\n            .image(\"ubuntu2\")\n            .flavor(\"medium\")\n            .bootConfig(MachineBootConfigArgs.builder()\n                .content(\"\"\"\n#cloud-config\n  users:\n  - default\n  - name: myuser\n    sudo: ['ALL=(ALL) NOPASSWD:ALL']\n    groups: [wheel, sudo, admin]\n    shell: '/bin/bash'\n    ssh-authorized-keys: |\n      ssh-rsa your-ssh-rsa:\n    - sudo sed -e 's/.*PasswordAuthentication yes.*/PasswordAuthentication no/' -i /etc/ssh/sshd_config\n    - sudo service sshd restart\n                \"\"\")\n                .build())\n            .nics(MachineNicArgs.builder()\n                .networkId(data.vra_network().this().id())\n                .build())\n            .constraints(MachineConstraintArgs.builder()\n                .mandatory(true)\n                .expression(\"AWS\")\n                .build())\n            .tags(MachineTagArgs.builder()\n                .key(\"foo\")\n                .value(\"bar\")\n                .build())\n            .disks(            \n                MachineDiskArgs.builder()\n                    .blockDeviceId(vra_block_device.disk1().id())\n                    .build(),\n                MachineDiskArgs.builder()\n                    .blockDeviceId(vra_block_device.disk2().id())\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  this:\n    type: vra:machine:Machine\n    properties:\n      description: terrafrom test machine\n      projectId: ${data.vra_project.this.id}\n      image: ubuntu2\n      flavor: medium\n      bootConfig:\n        content: |\n          #cloud-config\n            users:\n            - default\n            - name: myuser\n              sudo: ['ALL=(ALL) NOPASSWD:ALL']\n              groups: [wheel, sudo, admin]\n              shell: '/bin/bash'\n              ssh-authorized-keys: |\n                ssh-rsa your-ssh-rsa:\n              - sudo sed -e 's/.*PasswordAuthentication yes.*/PasswordAuthentication no/' -i /etc/ssh/sshd_config\n              - sudo service sshd restart\n      nics:\n        - networkId: ${data.vra_network.this.id}\n      constraints:\n        - mandatory: true\n          expression: AWS\n      tags:\n        - key: foo\n          value: bar\n      disks:\n        - blockDeviceId: ${vra_block_device.disk1.id}\n        - blockDeviceId: ${vra_block_device.disk2.id}\n```\nA machine resource supports the following resource:\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "Primary address allocated or in use by this machine. The actual type of the address depends on the adapter type. Typically it is either the public or the external IP address.\n"
                },
                "bootConfig": {
                    "$ref": "#/types/vra:machine/MachineBootConfig:MachineBootConfig",
                    "description": "Machine boot config that will be passed to the instance. Used to perform common automated configuration tasks and even run scripts after instance starts.\n"
                },
                "constraints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:machine/MachineConstraint:MachineConstraint"
                    },
                    "description": "Constraints used to drive placement policies for the virtual machine produced from the specification. Constraint expressions are matched against tags on existing placement targets.  \nExample:[{\"mandatory\" : \"true\", \"expression\": \"environment\":\"prod\"}, {\"mandatory\" : \"false\", \"expression\": \"pci\"}]\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Date when the entity was created. Date and time format is ISO 8601 and UTC.\n"
                },
                "customProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Additional properties that may be used to extend the base type.\n"
                },
                "deploymentId": {
                    "type": "string",
                    "description": "Describes machine within the scope of your organization and is not propagated to the cloud.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Human-friendly description.\n"
                },
                "disks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:machine/MachineDisk:MachineDisk"
                    },
                    "description": "Specification for attaching/detaching disks to a machine.\n"
                },
                "disksLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:machine/MachineDisksList:MachineDisksList"
                    },
                    "description": "List of all disks attached to a machine including boot disk, and additional block devices attached using the disks attribute.\n"
                },
                "externalId": {
                    "type": "string",
                    "description": "External entity ID on the provider side.\n"
                },
                "externalRegionId": {
                    "type": "string",
                    "description": "External regionId of the resource.\n"
                },
                "externalZoneId": {
                    "type": "string",
                    "description": "External zoneId of the resource.\n"
                },
                "flavor": {
                    "type": "string",
                    "description": "Flavor of machine instance.\n"
                },
                "image": {
                    "type": "string",
                    "description": "Type of image used for this machine.\n"
                },
                "imageDiskConstraints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:machine/MachineImageDiskConstraint:MachineImageDiskConstraint"
                    },
                    "description": "Constraints that are used to drive placement policies for the image disk. Constraint expressions are matched against tags on existing placement targets. example:[{\"mandatory\" : \"true\", \"expression\": \"environment:prod\"}, {\"mandatory\" : \"false\", \"expression\": \"pci\"}]. It is nested argument with the following properties.\n"
                },
                "imageRef": {
                    "type": "string",
                    "description": "Direct image reference used for this machine (name, path, location, uri, etc.). Valid if no image property is provided\n"
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:machine/MachineLink:MachineLink"
                    },
                    "description": "HATEOAS of the entity\n"
                },
                "name": {
                    "type": "string",
                    "description": "Human-friendly name used as an identifier in APIs that support this option.\n"
                },
                "nics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:machine/MachineNic:MachineNic"
                    },
                    "description": "Set of network interface controller specifications for this machine. If not specified, then a default network connection will be created.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "ID of the organization this entity belongs to.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Email of entity owner.\n"
                },
                "powerState": {
                    "type": "string",
                    "description": "Power state of machine.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of project that resource belongs to.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:machine/MachineTag:MachineTag"
                    },
                    "description": "Set of tag keys and optional values that should be set on any resource that is produced from this specification. example:[ { \"key\" : \"ownedBy\", \"value\": \"Rainpole\" } ]. It is nested argument with the following properties.\n"
                },
                "updatedAt": {
                    "type": "string"
                }
            },
            "required": [
                "address",
                "createdAt",
                "customProperties",
                "deploymentId",
                "disksLists",
                "externalId",
                "externalRegionId",
                "externalZoneId",
                "flavor",
                "links",
                "name",
                "organizationId",
                "owner",
                "powerState",
                "projectId",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "bootConfig": {
                    "$ref": "#/types/vra:machine/MachineBootConfig:MachineBootConfig",
                    "description": "Machine boot config that will be passed to the instance. Used to perform common automated configuration tasks and even run scripts after instance starts.\n"
                },
                "constraints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:machine/MachineConstraint:MachineConstraint"
                    },
                    "description": "Constraints used to drive placement policies for the virtual machine produced from the specification. Constraint expressions are matched against tags on existing placement targets.  \nExample:[{\"mandatory\" : \"true\", \"expression\": \"environment\":\"prod\"}, {\"mandatory\" : \"false\", \"expression\": \"pci\"}]\n"
                },
                "customProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Additional properties that may be used to extend the base type.\n"
                },
                "deploymentId": {
                    "type": "string",
                    "description": "Describes machine within the scope of your organization and is not propagated to the cloud.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Human-friendly description.\n"
                },
                "disks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:machine/MachineDisk:MachineDisk"
                    },
                    "description": "Specification for attaching/detaching disks to a machine.\n"
                },
                "flavor": {
                    "type": "string",
                    "description": "Flavor of machine instance.\n"
                },
                "image": {
                    "type": "string",
                    "description": "Type of image used for this machine.\n",
                    "willReplaceOnChanges": true
                },
                "imageDiskConstraints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:machine/MachineImageDiskConstraint:MachineImageDiskConstraint"
                    },
                    "description": "Constraints that are used to drive placement policies for the image disk. Constraint expressions are matched against tags on existing placement targets. example:[{\"mandatory\" : \"true\", \"expression\": \"environment:prod\"}, {\"mandatory\" : \"false\", \"expression\": \"pci\"}]. It is nested argument with the following properties.\n"
                },
                "imageRef": {
                    "type": "string",
                    "description": "Direct image reference used for this machine (name, path, location, uri, etc.). Valid if no image property is provided\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Human-friendly name used as an identifier in APIs that support this option.\n"
                },
                "nics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:machine/MachineNic:MachineNic"
                    },
                    "description": "Set of network interface controller specifications for this machine. If not specified, then a default network connection will be created.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of project that resource belongs to.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:machine/MachineTag:MachineTag"
                    },
                    "description": "Set of tag keys and optional values that should be set on any resource that is produced from this specification. example:[ { \"key\" : \"ownedBy\", \"value\": \"Rainpole\" } ]. It is nested argument with the following properties.\n"
                }
            },
            "requiredInputs": [
                "flavor",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Machine resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "Primary address allocated or in use by this machine. The actual type of the address depends on the adapter type. Typically it is either the public or the external IP address.\n"
                    },
                    "bootConfig": {
                        "$ref": "#/types/vra:machine/MachineBootConfig:MachineBootConfig",
                        "description": "Machine boot config that will be passed to the instance. Used to perform common automated configuration tasks and even run scripts after instance starts.\n"
                    },
                    "constraints": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:machine/MachineConstraint:MachineConstraint"
                        },
                        "description": "Constraints used to drive placement policies for the virtual machine produced from the specification. Constraint expressions are matched against tags on existing placement targets.  \nExample:[{\"mandatory\" : \"true\", \"expression\": \"environment\":\"prod\"}, {\"mandatory\" : \"false\", \"expression\": \"pci\"}]\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date when the entity was created. Date and time format is ISO 8601 and UTC.\n"
                    },
                    "customProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Additional properties that may be used to extend the base type.\n"
                    },
                    "deploymentId": {
                        "type": "string",
                        "description": "Describes machine within the scope of your organization and is not propagated to the cloud.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Human-friendly description.\n"
                    },
                    "disks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:machine/MachineDisk:MachineDisk"
                        },
                        "description": "Specification for attaching/detaching disks to a machine.\n"
                    },
                    "disksLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:machine/MachineDisksList:MachineDisksList"
                        },
                        "description": "List of all disks attached to a machine including boot disk, and additional block devices attached using the disks attribute.\n"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "External entity ID on the provider side.\n"
                    },
                    "externalRegionId": {
                        "type": "string",
                        "description": "External regionId of the resource.\n"
                    },
                    "externalZoneId": {
                        "type": "string",
                        "description": "External zoneId of the resource.\n"
                    },
                    "flavor": {
                        "type": "string",
                        "description": "Flavor of machine instance.\n"
                    },
                    "image": {
                        "type": "string",
                        "description": "Type of image used for this machine.\n",
                        "willReplaceOnChanges": true
                    },
                    "imageDiskConstraints": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:machine/MachineImageDiskConstraint:MachineImageDiskConstraint"
                        },
                        "description": "Constraints that are used to drive placement policies for the image disk. Constraint expressions are matched against tags on existing placement targets. example:[{\"mandatory\" : \"true\", \"expression\": \"environment:prod\"}, {\"mandatory\" : \"false\", \"expression\": \"pci\"}]. It is nested argument with the following properties.\n"
                    },
                    "imageRef": {
                        "type": "string",
                        "description": "Direct image reference used for this machine (name, path, location, uri, etc.). Valid if no image property is provided\n",
                        "willReplaceOnChanges": true
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:machine/MachineLink:MachineLink"
                        },
                        "description": "HATEOAS of the entity\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Human-friendly name used as an identifier in APIs that support this option.\n"
                    },
                    "nics": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:machine/MachineNic:MachineNic"
                        },
                        "description": "Set of network interface controller specifications for this machine. If not specified, then a default network connection will be created.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "ID of the organization this entity belongs to.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Email of entity owner.\n"
                    },
                    "powerState": {
                        "type": "string",
                        "description": "Power state of machine.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of project that resource belongs to.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:machine/MachineTag:MachineTag"
                        },
                        "description": "Set of tag keys and optional values that should be set on any resource that is produced from this specification. example:[ { \"key\" : \"ownedBy\", \"value\": \"Rainpole\" } ]. It is nested argument with the following properties.\n"
                    },
                    "updatedAt": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "vra:network/ipRange:IpRange": {
            "description": "Creates a VMware vRealize Automation network_ip_range resource.\n\n{{% examples %}}\n## Example Usage\n{{% /examples %}}\n\n## Import\n\nTo import the vRA Network IP range, use the ID as in the following example\n\n```sh\n $ pulumi import vra:network/ipRange:IpRange new_ip_range 05956583-6488-4e7d-84c9-92a7b7219a15`\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Date when the entity was created. The date is in ISO 6801 and UTC.\n"
                },
                "description": {
                    "type": "string",
                    "description": "State object representing a network on a external cloud provider.\n"
                },
                "endIpAddress": {
                    "type": "string",
                    "description": "End IP address of the range.\n"
                },
                "externalId": {
                    "type": "string",
                    "description": "External entity Id on the provider side.\n"
                },
                "fabricNetworkId": {
                    "type": "string",
                    "description": "Fabric network Id.\n"
                },
                "ipVersion": {
                    "type": "string",
                    "description": "IP address version: IPv4 or IPv6. Default: IPv4.\n"
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:network/IpRangeLink:IpRangeLink"
                    },
                    "description": "HATEOAS of the entity\n"
                },
                "name": {
                    "type": "string",
                    "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of organization that entity belongs to.\n"
                },
                "startIpAddress": {
                    "type": "string",
                    "description": "Start IP address of the range.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:network/IpRangeTag:IpRangeTag"
                    },
                    "description": "Set of tag keys and values to apply to the resource.\nExample:[ { \"key\" : \"vmware\", \"value\": \"provider\" } ]\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                }
            },
            "required": [
                "createdAt",
                "endIpAddress",
                "externalId",
                "ipVersion",
                "links",
                "name",
                "orgId",
                "startIpAddress",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "State object representing a network on a external cloud provider.\n"
                },
                "endIpAddress": {
                    "type": "string",
                    "description": "End IP address of the range.\n"
                },
                "fabricNetworkId": {
                    "type": "string",
                    "description": "Fabric network Id.\n"
                },
                "ipVersion": {
                    "type": "string",
                    "description": "IP address version: IPv4 or IPv6. Default: IPv4.\n"
                },
                "name": {
                    "type": "string",
                    "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                },
                "startIpAddress": {
                    "type": "string",
                    "description": "Start IP address of the range.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:network/IpRangeTag:IpRangeTag"
                    },
                    "description": "Set of tag keys and values to apply to the resource.\nExample:[ { \"key\" : \"vmware\", \"value\": \"provider\" } ]\n"
                }
            },
            "requiredInputs": [
                "endIpAddress",
                "ipVersion",
                "startIpAddress"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IpRange resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Date when the entity was created. The date is in ISO 6801 and UTC.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "State object representing a network on a external cloud provider.\n"
                    },
                    "endIpAddress": {
                        "type": "string",
                        "description": "End IP address of the range.\n"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "External entity Id on the provider side.\n"
                    },
                    "fabricNetworkId": {
                        "type": "string",
                        "description": "Fabric network Id.\n"
                    },
                    "ipVersion": {
                        "type": "string",
                        "description": "IP address version: IPv4 or IPv6. Default: IPv4.\n"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:network/IpRangeLink:IpRangeLink"
                        },
                        "description": "HATEOAS of the entity\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of organization that entity belongs to.\n"
                    },
                    "startIpAddress": {
                        "type": "string",
                        "description": "Start IP address of the range.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:network/IpRangeTag:IpRangeTag"
                        },
                        "description": "Set of tag keys and values to apply to the resource.\nExample:[ { \"key\" : \"vmware\", \"value\": \"provider\" } ]\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                    }
                },
                "type": "object"
            }
        },
        "vra:network/network:Network": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\n\nThis is an example of how to create a network resource.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst myNetwork = new vra.network.Network(\"my_network\", {\n    constraints: [{\n        expression: \"pci\",\n        mandatory: true,\n    }],\n    outboundAccess: false,\n    tags: [{\n        key: \"foo\",\n        value: \"bar\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vra as vra\n\nmy_network = vra.network.Network(\"myNetwork\",\n    constraints=[vra.network.NetworkConstraintArgs(\n        expression=\"pci\",\n        mandatory=True,\n    )],\n    outbound_access=False,\n    tags=[vra.network.NetworkTagArgs(\n        key=\"foo\",\n        value=\"bar\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumiverse.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myNetwork = new Vra.Network.Network(\"myNetwork\", new()\n    {\n        Constraints = new[]\n        {\n            new Vra.Network.Inputs.NetworkConstraintArgs\n            {\n                Expression = \"pci\",\n                Mandatory = true,\n            },\n        },\n        OutboundAccess = false,\n        Tags = new[]\n        {\n            new Vra.Network.Inputs.NetworkTagArgs\n            {\n                Key = \"foo\",\n                Value = \"bar\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/network\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/network\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := network.NewNetwork(ctx, \"myNetwork\", \u0026network.NetworkArgs{\n\t\t\tConstraints: network.NetworkConstraintArray{\n\t\t\t\t\u0026network.NetworkConstraintArgs{\n\t\t\t\t\tExpression: pulumi.String(\"pci\"),\n\t\t\t\t\tMandatory:  pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t\tOutboundAccess: pulumi.Bool(false),\n\t\t\tTags: network.NetworkTagArray{\n\t\t\t\t\u0026network.NetworkTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"foo\"),\n\t\t\t\t\tValue: pulumi.String(\"bar\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.network.Network;\nimport com.pulumi.vra.network.NetworkArgs;\nimport com.pulumi.vra.network.inputs.NetworkConstraintArgs;\nimport com.pulumi.vra.network.inputs.NetworkTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myNetwork = new Network(\"myNetwork\", NetworkArgs.builder()        \n            .constraints(NetworkConstraintArgs.builder()\n                .expression(\"pci\")\n                .mandatory(true)\n                .build())\n            .outboundAccess(false)\n            .tags(NetworkTagArgs.builder()\n                .key(\"foo\")\n                .value(\"bar\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myNetwork:\n    type: vra:network:Network\n    properties:\n      constraints:\n        - expression: pci\n          mandatory: true\n      outboundAccess: false\n      tags:\n        - key: foo\n          value: bar\n```\nA network resource supports the following resource:\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "cidr": {
                    "type": "string",
                    "description": "IPv4 address range of the network in CIDR format.\n"
                },
                "constraints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:network/NetworkConstraint:NetworkConstraint"
                    },
                    "description": "List of storage, network and extensibility constraints to be applied when provisioning through this project.\n"
                },
                "customProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Additional properties that may be used to extend the base resource.\n"
                },
                "deploymentId": {
                    "type": "string",
                    "description": "Deployment id that is associated with this resource.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A human-friendly description.\n"
                },
                "externalId": {
                    "type": "string",
                    "description": "External entity Id on the provider side.\n"
                },
                "externalZoneId": {
                    "type": "string",
                    "description": "The external zoneId of the resource.\n"
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:network/NetworkLink:NetworkLink"
                    },
                    "description": "HATEOAS of the entity\n"
                },
                "name": {
                    "type": "string",
                    "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The id of the organization this entity belongs to.\n"
                },
                "outboundAccess": {
                    "type": "boolean",
                    "description": "Flag to indicate if the network needs to have outbound access or not. Default is true. This field will be ignored if there is proper input for networkType customProperty.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Email of the user that owns the entity.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The id of the project this resource belongs to.\n"
                },
                "selfLink": {
                    "type": "string",
                    "description": "Self link of this request.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:network/NetworkTag:NetworkTag"
                    },
                    "description": "A set of tag keys and optional values that were set on this resource.\nexample:[ { \"key\" : \"ownedBy\", \"value\": \"Rainpole\" } ]\n"
                },
                "updatedAt": {
                    "type": "string"
                }
            },
            "required": [
                "cidr",
                "customProperties",
                "deploymentId",
                "externalId",
                "externalZoneId",
                "links",
                "name",
                "organizationId",
                "owner",
                "projectId",
                "selfLink",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "constraints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:network/NetworkConstraint:NetworkConstraint"
                    },
                    "description": "List of storage, network and extensibility constraints to be applied when provisioning through this project.\n"
                },
                "customProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Additional properties that may be used to extend the base resource.\n"
                },
                "deploymentId": {
                    "type": "string",
                    "description": "Deployment id that is associated with this resource.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A human-friendly description.\n"
                },
                "name": {
                    "type": "string",
                    "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                },
                "outboundAccess": {
                    "type": "boolean",
                    "description": "Flag to indicate if the network needs to have outbound access or not. Default is true. This field will be ignored if there is proper input for networkType customProperty.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The id of the project this resource belongs to.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:network/NetworkTag:NetworkTag"
                    },
                    "description": "A set of tag keys and optional values that were set on this resource.\nexample:[ { \"key\" : \"ownedBy\", \"value\": \"Rainpole\" } ]\n"
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Network resources.\n",
                "properties": {
                    "cidr": {
                        "type": "string",
                        "description": "IPv4 address range of the network in CIDR format.\n"
                    },
                    "constraints": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:network/NetworkConstraint:NetworkConstraint"
                        },
                        "description": "List of storage, network and extensibility constraints to be applied when provisioning through this project.\n"
                    },
                    "customProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Additional properties that may be used to extend the base resource.\n"
                    },
                    "deploymentId": {
                        "type": "string",
                        "description": "Deployment id that is associated with this resource.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A human-friendly description.\n"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "External entity Id on the provider side.\n"
                    },
                    "externalZoneId": {
                        "type": "string",
                        "description": "The external zoneId of the resource.\n"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:network/NetworkLink:NetworkLink"
                        },
                        "description": "HATEOAS of the entity\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The id of the organization this entity belongs to.\n"
                    },
                    "outboundAccess": {
                        "type": "boolean",
                        "description": "Flag to indicate if the network needs to have outbound access or not. Default is true. This field will be ignored if there is proper input for networkType customProperty.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Email of the user that owns the entity.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The id of the project this resource belongs to.\n"
                    },
                    "selfLink": {
                        "type": "string",
                        "description": "Self link of this request.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:network/NetworkTag:NetworkTag"
                        },
                        "description": "A set of tag keys and optional values that were set on this resource.\nexample:[ { \"key\" : \"ownedBy\", \"value\": \"Rainpole\" } ]\n"
                    },
                    "updatedAt": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "vra:network/profile:Profile": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\nThis is an example of how to create a network profile resource.\n\n**Network profile:**\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumiverse/vra\";\n\nconst simple = new vra.network.Profile(\"simple\", {\n    description: \"Simple Network Profile with no isolation.\",\n    regionId: data.vra_region[\"this\"].id,\n    fabricNetworkIds: [\n        data.vra_fabric_network.subnet_1.id,\n        data.vra_fabric_network.subnet_2.id,\n    ],\n    isolationType: \"NONE\",\n    tags: [{\n        key: \"foo\",\n        value: \"bar\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vra as vra\n\nsimple = vra.network.Profile(\"simple\",\n    description=\"Simple Network Profile with no isolation.\",\n    region_id=data[\"vra_region\"][\"this\"][\"id\"],\n    fabric_network_ids=[\n        data[\"vra_fabric_network\"][\"subnet_1\"][\"id\"],\n        data[\"vra_fabric_network\"][\"subnet_2\"][\"id\"],\n    ],\n    isolation_type=\"NONE\",\n    tags=[vra.network.ProfileTagArgs(\n        key=\"foo\",\n        value=\"bar\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumiverse.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var simple = new Vra.Network.Profile(\"simple\", new()\n    {\n        Description = \"Simple Network Profile with no isolation.\",\n        RegionId = data.Vra_region.This.Id,\n        FabricNetworkIds = new[]\n        {\n            data.Vra_fabric_network.Subnet_1.Id,\n            data.Vra_fabric_network.Subnet_2.Id,\n        },\n        IsolationType = \"NONE\",\n        Tags = new[]\n        {\n            new Vra.Network.Inputs.ProfileTagArgs\n            {\n                Key = \"foo\",\n                Value = \"bar\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/network\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/network\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := network.NewProfile(ctx, \"simple\", \u0026network.ProfileArgs{\n\t\t\tDescription: pulumi.String(\"Simple Network Profile with no isolation.\"),\n\t\t\tRegionId:    pulumi.Any(data.Vra_region.This.Id),\n\t\t\tFabricNetworkIds: pulumi.StringArray{\n\t\t\t\tpulumi.Any(data.Vra_fabric_network.Subnet_1.Id),\n\t\t\t\tpulumi.Any(data.Vra_fabric_network.Subnet_2.Id),\n\t\t\t},\n\t\t\tIsolationType: pulumi.String(\"NONE\"),\n\t\t\tTags: network.ProfileTagArray{\n\t\t\t\t\u0026network.ProfileTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"foo\"),\n\t\t\t\t\tValue: pulumi.String(\"bar\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.network.Profile;\nimport com.pulumi.vra.network.ProfileArgs;\nimport com.pulumi.vra.network.inputs.ProfileTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var simple = new Profile(\"simple\", ProfileArgs.builder()        \n            .description(\"Simple Network Profile with no isolation.\")\n            .regionId(data.vra_region().this().id())\n            .fabricNetworkIds(            \n                data.vra_fabric_network().subnet_1().id(),\n                data.vra_fabric_network().subnet_2().id())\n            .isolationType(\"NONE\")\n            .tags(ProfileTagArgs.builder()\n                .key(\"foo\")\n                .value(\"bar\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  simple:\n    type: vra:network:Profile\n    properties:\n      description: Simple Network Profile with no isolation.\n      regionId: ${data.vra_region.this.id}\n      fabricNetworkIds:\n        - ${data.vra_fabric_network.subnet_1.id}\n        - ${data.vra_fabric_network.subnet_2.id}\n      isolationType: NONE\n      tags:\n        - key: foo\n          value: bar\n```\n\nA network profile resource supports the following arguments:\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "cloudAccountId": {
                    "type": "string",
                    "description": "The ID of the cloud account this entity belongs to.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Date when  entity was created. Date and time format is ISO 8601 and UTC.\n"
                },
                "customProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Additional properties that may be used to extend the Network Profile object that is produced from this specification. For isolationType security group, datastoreId identifies the Compute Resource Edge datastore. computeCluster and resourcePoolId identify the Compute Resource Edge cluster. For isolationType subnet, distributedLogicalRouterStateLink identifies the on-demand network distributed local router. onDemandNetworkIPAssignmentType identifies the on-demand network IP range assignment type static, dynamic, or mixed.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A human-friendly description.\n"
                },
                "externalRegionId": {
                    "type": "string",
                    "description": "The external regionId of the resource.\n"
                },
                "fabricNetworkIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of fabric network Ids which are assigned to the network profile.\nexample:[ \"6543\" ]\n"
                },
                "isolatedExternalFabricNetworkId": {
                    "type": "string",
                    "description": "The id of the fabric network used for outbound access.\n"
                },
                "isolatedNetworkCidrPrefix": {
                    "type": "integer",
                    "description": "The CIDR prefix length to be used for the isolated networks that are created with the network profile.\n"
                },
                "isolatedNetworkDomainCidr": {
                    "type": "string",
                    "description": "CIDR of the isolation network domain.\n"
                },
                "isolatedNetworkDomainId": {
                    "type": "string",
                    "description": "The id of the network domain used for creating isolated networks.\n"
                },
                "isolationType": {
                    "type": "string",
                    "description": "Specifies the isolation type e.g. none, subnet or security group\n"
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:network/ProfileLink:ProfileLink"
                    },
                    "description": "HATEOAS of the entity\n"
                },
                "name": {
                    "type": "string",
                    "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of organization that entity belongs to.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The id of the organization this entity belongs to. Deprecated, refer to org_id instead.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Email of the user that owns the entity.\n"
                },
                "regionId": {
                    "type": "string",
                    "description": "The id of the region for which this profile is defined as in vRealize Automation(vRA).\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of security group Ids which are assigned to the network profile.\nexample:[ \"6545\" ]\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:network/ProfileTag:ProfileTag"
                    },
                    "description": "A set of tag keys and optional values that were set on this Network Profile.\nexample:[ { \"key\" : \"ownedBy\", \"value\": \"Rainpole\" } ]\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                }
            },
            "required": [
                "cloudAccountId",
                "createdAt",
                "customProperties",
                "externalRegionId",
                "links",
                "name",
                "orgId",
                "organizationId",
                "owner",
                "regionId",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "customProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Additional properties that may be used to extend the Network Profile object that is produced from this specification. For isolationType security group, datastoreId identifies the Compute Resource Edge datastore. computeCluster and resourcePoolId identify the Compute Resource Edge cluster. For isolationType subnet, distributedLogicalRouterStateLink identifies the on-demand network distributed local router. onDemandNetworkIPAssignmentType identifies the on-demand network IP range assignment type static, dynamic, or mixed.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A human-friendly description.\n"
                },
                "fabricNetworkIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of fabric network Ids which are assigned to the network profile.\nexample:[ \"6543\" ]\n"
                },
                "isolatedExternalFabricNetworkId": {
                    "type": "string",
                    "description": "The id of the fabric network used for outbound access.\n"
                },
                "isolatedNetworkCidrPrefix": {
                    "type": "integer",
                    "description": "The CIDR prefix length to be used for the isolated networks that are created with the network profile.\n"
                },
                "isolatedNetworkDomainCidr": {
                    "type": "string",
                    "description": "CIDR of the isolation network domain.\n"
                },
                "isolatedNetworkDomainId": {
                    "type": "string",
                    "description": "The id of the network domain used for creating isolated networks.\n"
                },
                "isolationType": {
                    "type": "string",
                    "description": "Specifies the isolation type e.g. none, subnet or security group\n"
                },
                "name": {
                    "type": "string",
                    "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                },
                "regionId": {
                    "type": "string",
                    "description": "The id of the region for which this profile is defined as in vRealize Automation(vRA).\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of security group Ids which are assigned to the network profile.\nexample:[ \"6545\" ]\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:network/ProfileTag:ProfileTag"
                    },
                    "description": "A set of tag keys and optional values that were set on this Network Profile.\nexample:[ { \"key\" : \"ownedBy\", \"value\": \"Rainpole\" } ]\n"
                }
            },
            "requiredInputs": [
                "regionId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Profile resources.\n",
                "properties": {
                    "cloudAccountId": {
                        "type": "string",
                        "description": "The ID of the cloud account this entity belongs to.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date when  entity was created. Date and time format is ISO 8601 and UTC.\n"
                    },
                    "customProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Additional properties that may be used to extend the Network Profile object that is produced from this specification. For isolationType security group, datastoreId identifies the Compute Resource Edge datastore. computeCluster and resourcePoolId identify the Compute Resource Edge cluster. For isolationType subnet, distributedLogicalRouterStateLink identifies the on-demand network distributed local router. onDemandNetworkIPAssignmentType identifies the on-demand network IP range assignment type static, dynamic, or mixed.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A human-friendly description.\n"
                    },
                    "externalRegionId": {
                        "type": "string",
                        "description": "The external regionId of the resource.\n"
                    },
                    "fabricNetworkIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of fabric network Ids which are assigned to the network profile.\nexample:[ \"6543\" ]\n"
                    },
                    "isolatedExternalFabricNetworkId": {
                        "type": "string",
                        "description": "The id of the fabric network used for outbound access.\n"
                    },
                    "isolatedNetworkCidrPrefix": {
                        "type": "integer",
                        "description": "The CIDR prefix length to be used for the isolated networks that are created with the network profile.\n"
                    },
                    "isolatedNetworkDomainCidr": {
                        "type": "string",
                        "description": "CIDR of the isolation network domain.\n"
                    },
                    "isolatedNetworkDomainId": {
                        "type": "string",
                        "description": "The id of the network domain used for creating isolated networks.\n"
                    },
                    "isolationType": {
                        "type": "string",
                        "description": "Specifies the isolation type e.g. none, subnet or security group\n"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:network/ProfileLink:ProfileLink"
                        },
                        "description": "HATEOAS of the entity\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of organization that entity belongs to.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The id of the organization this entity belongs to. Deprecated, refer to org_id instead.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Email of the user that owns the entity.\n"
                    },
                    "regionId": {
                        "type": "string",
                        "description": "The id of the region for which this profile is defined as in vRealize Automation(vRA).\n"
                    },
                    "securityGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of security group Ids which are assigned to the network profile.\nexample:[ \"6545\" ]\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:network/ProfileTag:ProfileTag"
                        },
                        "description": "A set of tag keys and optional values that were set on this Network Profile.\nexample:[ { \"key\" : \"ownedBy\", \"value\": \"Rainpole\" } ]\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                    }
                },
                "type": "object"
            }
        },
        "vra:project/project:Project": {
            "description": "{{% examples %}}\n## Example Usage\n{{% /examples %}}",
            "properties": {
                "administratorRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:project/ProjectAdministratorRole:ProjectAdministratorRole"
                    },
                    "description": "Administrator users or groups associated with the project. Only administrators can manage project's configuration.\n"
                },
                "administrators": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of administrator users associated with the project. Only administrators can manage project's configuration.\n",
                    "deprecationMessage": "To specify the type of principal, please refer administrator_roles."
                },
                "constraints": {
                    "$ref": "#/types/vra:project/ProjectConstraints:ProjectConstraints",
                    "description": "A list of storage, network, and extensibility constraints to be applied when provisioning through this project.\n"
                },
                "customProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The project custom properties which are added to all requests in this project.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A human-friendly description.\n"
                },
                "machineNamingTemplate": {
                    "type": "string",
                    "description": "The naming template to be used for resources provisioned in this project.\n"
                },
                "memberRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:project/ProjectMemberRole:ProjectMemberRole"
                    },
                    "description": "Member users or groups associated with the project.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of member users associated with the project.\n",
                    "deprecationMessage": "To specify the type of principal, please refer member_roles."
                },
                "name": {
                    "type": "string",
                    "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                },
                "operationTimeout": {
                    "type": "integer",
                    "description": "The timeout that should be used for cloud template operations and provisioning tasks. The timeout is measured in seconds.\n"
                },
                "placementPolicy": {
                    "type": "string",
                    "description": "The placement policy that will be applied when selecting a cloud zone for provisioning. Must be one of `DEFAULT` or `SPREAD`.\n"
                },
                "sharedResources": {
                    "type": "boolean",
                    "description": "Specifies whether the resources in this projects are shared or not. If not set default will be used.\n"
                },
                "viewerRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:project/ProjectViewerRole:ProjectViewerRole"
                    },
                    "description": "Viewer users or groups associated with the project.\n"
                },
                "viewers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of viewer users associated with the project.\n",
                    "deprecationMessage": "To specify the type of principal, please refer viewer_roles."
                },
                "zoneAssignments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:project/ProjectZoneAssignment:ProjectZoneAssignment"
                    },
                    "description": "A list of configurations for zone assignment to a project.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "administratorRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:project/ProjectAdministratorRole:ProjectAdministratorRole"
                    },
                    "description": "Administrator users or groups associated with the project. Only administrators can manage project's configuration.\n"
                },
                "administrators": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of administrator users associated with the project. Only administrators can manage project's configuration.\n",
                    "deprecationMessage": "To specify the type of principal, please refer administrator_roles."
                },
                "constraints": {
                    "$ref": "#/types/vra:project/ProjectConstraints:ProjectConstraints",
                    "description": "A list of storage, network, and extensibility constraints to be applied when provisioning through this project.\n"
                },
                "customProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The project custom properties which are added to all requests in this project.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A human-friendly description.\n"
                },
                "machineNamingTemplate": {
                    "type": "string",
                    "description": "The naming template to be used for resources provisioned in this project.\n"
                },
                "memberRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:project/ProjectMemberRole:ProjectMemberRole"
                    },
                    "description": "Member users or groups associated with the project.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of member users associated with the project.\n",
                    "deprecationMessage": "To specify the type of principal, please refer member_roles."
                },
                "name": {
                    "type": "string",
                    "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                },
                "operationTimeout": {
                    "type": "integer",
                    "description": "The timeout that should be used for cloud template operations and provisioning tasks. The timeout is measured in seconds.\n"
                },
                "placementPolicy": {
                    "type": "string",
                    "description": "The placement policy that will be applied when selecting a cloud zone for provisioning. Must be one of `DEFAULT` or `SPREAD`.\n"
                },
                "sharedResources": {
                    "type": "boolean",
                    "description": "Specifies whether the resources in this projects are shared or not. If not set default will be used.\n"
                },
                "viewerRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:project/ProjectViewerRole:ProjectViewerRole"
                    },
                    "description": "Viewer users or groups associated with the project.\n"
                },
                "viewers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of viewer users associated with the project.\n",
                    "deprecationMessage": "To specify the type of principal, please refer viewer_roles."
                },
                "zoneAssignments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:project/ProjectZoneAssignment:ProjectZoneAssignment"
                    },
                    "description": "A list of configurations for zone assignment to a project.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Project resources.\n",
                "properties": {
                    "administratorRoles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:project/ProjectAdministratorRole:ProjectAdministratorRole"
                        },
                        "description": "Administrator users or groups associated with the project. Only administrators can manage project's configuration.\n"
                    },
                    "administrators": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of administrator users associated with the project. Only administrators can manage project's configuration.\n",
                        "deprecationMessage": "To specify the type of principal, please refer administrator_roles."
                    },
                    "constraints": {
                        "$ref": "#/types/vra:project/ProjectConstraints:ProjectConstraints",
                        "description": "A list of storage, network, and extensibility constraints to be applied when provisioning through this project.\n"
                    },
                    "customProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "The project custom properties which are added to all requests in this project.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A human-friendly description.\n"
                    },
                    "machineNamingTemplate": {
                        "type": "string",
                        "description": "The naming template to be used for resources provisioned in this project.\n"
                    },
                    "memberRoles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:project/ProjectMemberRole:ProjectMemberRole"
                        },
                        "description": "Member users or groups associated with the project.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of member users associated with the project.\n",
                        "deprecationMessage": "To specify the type of principal, please refer member_roles."
                    },
                    "name": {
                        "type": "string",
                        "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                    },
                    "operationTimeout": {
                        "type": "integer",
                        "description": "The timeout that should be used for cloud template operations and provisioning tasks. The timeout is measured in seconds.\n"
                    },
                    "placementPolicy": {
                        "type": "string",
                        "description": "The placement policy that will be applied when selecting a cloud zone for provisioning. Must be one of `DEFAULT` or `SPREAD`.\n"
                    },
                    "sharedResources": {
                        "type": "boolean",
                        "description": "Specifies whether the resources in this projects are shared or not. If not set default will be used.\n"
                    },
                    "viewerRoles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:project/ProjectViewerRole:ProjectViewerRole"
                        },
                        "description": "Viewer users or groups associated with the project.\n"
                    },
                    "viewers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of viewer users associated with the project.\n",
                        "deprecationMessage": "To specify the type of principal, please refer viewer_roles."
                    },
                    "zoneAssignments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:project/ProjectZoneAssignment:ProjectZoneAssignment"
                        },
                        "description": "A list of configurations for zone assignment to a project.\n"
                    }
                },
                "type": "object"
            }
        },
        "vra:storageprofile/aws:Aws": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\nThis is an example of how to create a storage profile aws resource.\n\n**Vra storage profile aws:**\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumiverse/vra\";\n\n// AWS storage profile using vra_storage_profile_aws resource and EBS disk type.\nconst thisAws = new vra.storageprofile.Aws(\"thisAws\", {\n    description: \"AWS Storage Profile with instance store device type.\",\n    regionId: data.vra_region[\"this\"].id,\n    defaultItem: false,\n    supportsEncryption: false,\n    deviceType: \"ebs\",\n    volumeType: \"io1\",\n    iops: \"1000\",\n    tags: [{\n        key: \"foo\",\n        value: \"bar\",\n    }],\n});\n// AWS storage profile using vra_storage_profile_aws resource and instance store disk type.\nconst thisStorageprofile_awsAws = new vra.storageprofile.Aws(\"thisStorageprofile/awsAws\", {\n    description: \"AWS Storage Profile with instance store device type.\",\n    regionId: data.vra_region[\"this\"].id,\n    defaultItem: false,\n    deviceType: \"instance-store\",\n    tags: [{\n        key: \"foo\",\n        value: \"bar\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vra as vra\n\n# AWS storage profile using vra_storage_profile_aws resource and EBS disk type.\nthis_aws = vra.storageprofile.Aws(\"thisAws\",\n    description=\"AWS Storage Profile with instance store device type.\",\n    region_id=data[\"vra_region\"][\"this\"][\"id\"],\n    default_item=False,\n    supports_encryption=False,\n    device_type=\"ebs\",\n    volume_type=\"io1\",\n    iops=\"1000\",\n    tags=[vra.storageprofile.AwsTagArgs(\n        key=\"foo\",\n        value=\"bar\",\n    )])\n# AWS storage profile using vra_storage_profile_aws resource and instance store disk type.\nthis_storageprofile_aws_aws = vra.storageprofile.Aws(\"thisStorageprofile/awsAws\",\n    description=\"AWS Storage Profile with instance store device type.\",\n    region_id=data[\"vra_region\"][\"this\"][\"id\"],\n    default_item=False,\n    device_type=\"instance-store\",\n    tags=[vra.storageprofile.AwsTagArgs(\n        key=\"foo\",\n        value=\"bar\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumiverse.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // AWS storage profile using vra_storage_profile_aws resource and EBS disk type.\n    var thisAws = new Vra.Storageprofile.Aws(\"thisAws\", new()\n    {\n        Description = \"AWS Storage Profile with instance store device type.\",\n        RegionId = data.Vra_region.This.Id,\n        DefaultItem = false,\n        SupportsEncryption = false,\n        DeviceType = \"ebs\",\n        VolumeType = \"io1\",\n        Iops = \"1000\",\n        Tags = new[]\n        {\n            new Vra.Storageprofile.Inputs.AwsTagArgs\n            {\n                Key = \"foo\",\n                Value = \"bar\",\n            },\n        },\n    });\n\n    // AWS storage profile using vra_storage_profile_aws resource and instance store disk type.\n    var thisStorageprofile_awsAws = new Vra.Storageprofile.Aws(\"thisStorageprofile/awsAws\", new()\n    {\n        Description = \"AWS Storage Profile with instance store device type.\",\n        RegionId = data.Vra_region.This.Id,\n        DefaultItem = false,\n        DeviceType = \"instance-store\",\n        Tags = new[]\n        {\n            new Vra.Storageprofile.Inputs.AwsTagArgs\n            {\n                Key = \"foo\",\n                Value = \"bar\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/storageprofile\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/storageprofile\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := storageprofile.NewAws(ctx, \"thisAws\", \u0026storageprofile.AwsArgs{\n\t\t\tDescription:        pulumi.String(\"AWS Storage Profile with instance store device type.\"),\n\t\t\tRegionId:           pulumi.Any(data.Vra_region.This.Id),\n\t\t\tDefaultItem:        pulumi.Bool(false),\n\t\t\tSupportsEncryption: pulumi.Bool(false),\n\t\t\tDeviceType:         pulumi.String(\"ebs\"),\n\t\t\tVolumeType:         pulumi.String(\"io1\"),\n\t\t\tIops:               pulumi.String(\"1000\"),\n\t\t\tTags: storageprofile.AwsTagArray{\n\t\t\t\t\u0026storageprofile.AwsTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"foo\"),\n\t\t\t\t\tValue: pulumi.String(\"bar\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = storageprofile.NewAws(ctx, \"thisStorageprofile/awsAws\", \u0026storageprofile.AwsArgs{\n\t\t\tDescription: pulumi.String(\"AWS Storage Profile with instance store device type.\"),\n\t\t\tRegionId:    pulumi.Any(data.Vra_region.This.Id),\n\t\t\tDefaultItem: pulumi.Bool(false),\n\t\t\tDeviceType:  pulumi.String(\"instance-store\"),\n\t\t\tTags: storageprofile.AwsTagArray{\n\t\t\t\t\u0026storageprofile.AwsTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"foo\"),\n\t\t\t\t\tValue: pulumi.String(\"bar\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.storageprofile.Aws;\nimport com.pulumi.vra.storageprofile.AwsArgs;\nimport com.pulumi.vra.storageprofile.inputs.AwsTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var thisAws = new Aws(\"thisAws\", AwsArgs.builder()        \n            .description(\"AWS Storage Profile with instance store device type.\")\n            .regionId(data.vra_region().this().id())\n            .defaultItem(false)\n            .supportsEncryption(false)\n            .deviceType(\"ebs\")\n            .volumeType(\"io1\")\n            .iops(\"1000\")\n            .tags(AwsTagArgs.builder()\n                .key(\"foo\")\n                .value(\"bar\")\n                .build())\n            .build());\n\n        var thisStorageprofile_awsAws = new Aws(\"thisStorageprofile/awsAws\", AwsArgs.builder()        \n            .description(\"AWS Storage Profile with instance store device type.\")\n            .regionId(data.vra_region().this().id())\n            .defaultItem(false)\n            .deviceType(\"instance-store\")\n            .tags(AwsTagArgs.builder()\n                .key(\"foo\")\n                .value(\"bar\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # AWS storage profile using vra_storage_profile_aws resource and EBS disk type.\n  thisAws:\n    type: vra:storageprofile:Aws\n    properties:\n      description: AWS Storage Profile with instance store device type.\n      regionId: ${data.vra_region.this.id}\n      defaultItem: false\n      supportsEncryption: false\n      deviceType: ebs\n      # Volume Types: gp2 - General Purpose SSD, io1 - Provisioned IOPS SSD, sc1 - Cold HDD, ST1 - Throughput Optimized HDD, standard - Magnetic\n      volumeType: io1\n      # Supported values: gp2, io1, sc1, st1, standard.\n      iops: 1000 # Required only when volumeType is io1.\n      tags:\n        - key: foo\n          value: bar\n  # AWS storage profile using vra_storage_profile_aws resource and instance store disk type.\n  thisStorageprofile/awsAws:\n    type: vra:storageprofile:Aws\n    properties:\n      description: AWS Storage Profile with instance store device type.\n      regionId: ${data.vra_region.this.id}\n      defaultItem: false\n      deviceType: instance-store\n      tags:\n        - key: foo\n          value: bar\n```\n\nA storage profile aws resource supports the following arguments:\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Date when the entity was created. The date is in ISO 6801 and UTC.\n"
                },
                "defaultItem": {
                    "type": "boolean",
                    "description": "Indicates if this storage profile is a default profile.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A human-friendly description.\n"
                },
                "deviceType": {
                    "type": "string",
                    "description": "Indicates the type of storage device.\n"
                },
                "externalRegionId": {
                    "type": "string",
                    "description": "The id of the region as seen in the cloud provider for which this profile is defined.\n"
                },
                "iops": {
                    "type": "string",
                    "description": "Indicates maximum I/O operations per second in range(1-20,000).\n"
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:storageprofile/AwsLink:AwsLink"
                    },
                    "description": "HATEOAS of the entity\n"
                },
                "name": {
                    "type": "string",
                    "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The id of the organization this entity belongs to.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Email of the user that owns the entity.\n"
                },
                "regionId": {
                    "type": "string",
                    "description": "A link to the region that is associated with the storage profile.\n"
                },
                "supportsEncryption": {
                    "type": "boolean",
                    "description": "Indicates whether this storage profile supports encryption or not.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:storageprofile/AwsTag:AwsTag"
                    },
                    "description": "A set of tag keys and optional values that were set on this Network Profile.\nexample:[ { \"key\" : \"ownedBy\", \"value\": \"Rainpole\" } ]\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                },
                "volumeType": {
                    "type": "string",
                    "description": "Indicates the type of volume associated with type of storage.\n"
                }
            },
            "required": [
                "createdAt",
                "defaultItem",
                "description",
                "deviceType",
                "externalRegionId",
                "iops",
                "links",
                "name",
                "organizationId",
                "owner",
                "regionId",
                "supportsEncryption",
                "tags",
                "updatedAt",
                "volumeType"
            ],
            "inputProperties": {
                "defaultItem": {
                    "type": "boolean",
                    "description": "Indicates if this storage profile is a default profile.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A human-friendly description.\n"
                },
                "deviceType": {
                    "type": "string",
                    "description": "Indicates the type of storage device.\n"
                },
                "iops": {
                    "type": "string",
                    "description": "Indicates maximum I/O operations per second in range(1-20,000).\n"
                },
                "name": {
                    "type": "string",
                    "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                },
                "regionId": {
                    "type": "string",
                    "description": "A link to the region that is associated with the storage profile.\n"
                },
                "supportsEncryption": {
                    "type": "boolean",
                    "description": "Indicates whether this storage profile supports encryption or not.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:storageprofile/AwsTag:AwsTag"
                    },
                    "description": "A set of tag keys and optional values that were set on this Network Profile.\nexample:[ { \"key\" : \"ownedBy\", \"value\": \"Rainpole\" } ]\n"
                },
                "volumeType": {
                    "type": "string",
                    "description": "Indicates the type of volume associated with type of storage.\n"
                }
            },
            "requiredInputs": [
                "defaultItem",
                "regionId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Aws resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Date when the entity was created. The date is in ISO 6801 and UTC.\n"
                    },
                    "defaultItem": {
                        "type": "boolean",
                        "description": "Indicates if this storage profile is a default profile.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A human-friendly description.\n"
                    },
                    "deviceType": {
                        "type": "string",
                        "description": "Indicates the type of storage device.\n"
                    },
                    "externalRegionId": {
                        "type": "string",
                        "description": "The id of the region as seen in the cloud provider for which this profile is defined.\n"
                    },
                    "iops": {
                        "type": "string",
                        "description": "Indicates maximum I/O operations per second in range(1-20,000).\n"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:storageprofile/AwsLink:AwsLink"
                        },
                        "description": "HATEOAS of the entity\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The id of the organization this entity belongs to.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Email of the user that owns the entity.\n"
                    },
                    "regionId": {
                        "type": "string",
                        "description": "A link to the region that is associated with the storage profile.\n"
                    },
                    "supportsEncryption": {
                        "type": "boolean",
                        "description": "Indicates whether this storage profile supports encryption or not.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:storageprofile/AwsTag:AwsTag"
                        },
                        "description": "A set of tag keys and optional values that were set on this Network Profile.\nexample:[ { \"key\" : \"ownedBy\", \"value\": \"Rainpole\" } ]\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                    },
                    "volumeType": {
                        "type": "string",
                        "description": "Indicates the type of volume associated with type of storage.\n"
                    }
                },
                "type": "object"
            }
        },
        "vra:storageprofile/azure:Azure": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\nThis is an example of how to create a storage profile azure resource.\n\n**Vra storage profile azure:**\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumiverse/vra\";\n\n// Azure storage profile using vra_storage_profile_azure resource with managed disk.\nconst thisAzure = new vra.storageprofile.Azure(\"thisAzure\", {\n    description: \"Azure Storage Profile with managed disks.\",\n    regionId: data.vra_region[\"this\"].id,\n    defaultItem: false,\n    supportsEncryption: false,\n    dataDiskCaching: \"None\",\n    diskType: \"Standard_LRS\",\n    osDiskCaching: \"None\",\n    tags: [{\n        key: \"foo\",\n        value: \"bar\",\n    }],\n});\n// Azure storage profile using vra_storage_profile_azure resource with unmanaged disk.\nconst thisStorageprofile_azureAzure = new vra.storageprofile.Azure(\"thisStorageprofile/azureAzure\", {\n    description: \"Azure Storage Profile with unmanaged disks.\",\n    regionId: data.vra_region[\"this\"].id,\n    defaultItem: false,\n    supportsEncryption: false,\n    dataDiskCaching: \"None\",\n    osDiskCaching: \"None\",\n    tags: [{\n        key: \"foo\",\n        value: \"bar\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vra as vra\n\n# Azure storage profile using vra_storage_profile_azure resource with managed disk.\nthis_azure = vra.storageprofile.Azure(\"thisAzure\",\n    description=\"Azure Storage Profile with managed disks.\",\n    region_id=data[\"vra_region\"][\"this\"][\"id\"],\n    default_item=False,\n    supports_encryption=False,\n    data_disk_caching=\"None\",\n    disk_type=\"Standard_LRS\",\n    os_disk_caching=\"None\",\n    tags=[vra.storageprofile.AzureTagArgs(\n        key=\"foo\",\n        value=\"bar\",\n    )])\n# Azure storage profile using vra_storage_profile_azure resource with unmanaged disk.\nthis_storageprofile_azure_azure = vra.storageprofile.Azure(\"thisStorageprofile/azureAzure\",\n    description=\"Azure Storage Profile with unmanaged disks.\",\n    region_id=data[\"vra_region\"][\"this\"][\"id\"],\n    default_item=False,\n    supports_encryption=False,\n    data_disk_caching=\"None\",\n    os_disk_caching=\"None\",\n    tags=[vra.storageprofile.AzureTagArgs(\n        key=\"foo\",\n        value=\"bar\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumiverse.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Azure storage profile using vra_storage_profile_azure resource with managed disk.\n    var thisAzure = new Vra.Storageprofile.Azure(\"thisAzure\", new()\n    {\n        Description = \"Azure Storage Profile with managed disks.\",\n        RegionId = data.Vra_region.This.Id,\n        DefaultItem = false,\n        SupportsEncryption = false,\n        DataDiskCaching = \"None\",\n        DiskType = \"Standard_LRS\",\n        OsDiskCaching = \"None\",\n        Tags = new[]\n        {\n            new Vra.Storageprofile.Inputs.AzureTagArgs\n            {\n                Key = \"foo\",\n                Value = \"bar\",\n            },\n        },\n    });\n\n    // Azure storage profile using vra_storage_profile_azure resource with unmanaged disk.\n    var thisStorageprofile_azureAzure = new Vra.Storageprofile.Azure(\"thisStorageprofile/azureAzure\", new()\n    {\n        Description = \"Azure Storage Profile with unmanaged disks.\",\n        RegionId = data.Vra_region.This.Id,\n        DefaultItem = false,\n        SupportsEncryption = false,\n        DataDiskCaching = \"None\",\n        OsDiskCaching = \"None\",\n        Tags = new[]\n        {\n            new Vra.Storageprofile.Inputs.AzureTagArgs\n            {\n                Key = \"foo\",\n                Value = \"bar\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/storageprofile\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/storageprofile\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := storageprofile.NewAzure(ctx, \"thisAzure\", \u0026storageprofile.AzureArgs{\n\t\t\tDescription:        pulumi.String(\"Azure Storage Profile with managed disks.\"),\n\t\t\tRegionId:           pulumi.Any(data.Vra_region.This.Id),\n\t\t\tDefaultItem:        pulumi.Bool(false),\n\t\t\tSupportsEncryption: pulumi.Bool(false),\n\t\t\tDataDiskCaching:    pulumi.String(\"None\"),\n\t\t\tDiskType:           pulumi.String(\"Standard_LRS\"),\n\t\t\tOsDiskCaching:      pulumi.String(\"None\"),\n\t\t\tTags: storageprofile.AzureTagArray{\n\t\t\t\t\u0026storageprofile.AzureTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"foo\"),\n\t\t\t\t\tValue: pulumi.String(\"bar\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = storageprofile.NewAzure(ctx, \"thisStorageprofile/azureAzure\", \u0026storageprofile.AzureArgs{\n\t\t\tDescription:        pulumi.String(\"Azure Storage Profile with unmanaged disks.\"),\n\t\t\tRegionId:           pulumi.Any(data.Vra_region.This.Id),\n\t\t\tDefaultItem:        pulumi.Bool(false),\n\t\t\tSupportsEncryption: pulumi.Bool(false),\n\t\t\tDataDiskCaching:    pulumi.String(\"None\"),\n\t\t\tOsDiskCaching:      pulumi.String(\"None\"),\n\t\t\tTags: storageprofile.AzureTagArray{\n\t\t\t\t\u0026storageprofile.AzureTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"foo\"),\n\t\t\t\t\tValue: pulumi.String(\"bar\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.storageprofile.Azure;\nimport com.pulumi.vra.storageprofile.AzureArgs;\nimport com.pulumi.vra.storageprofile.inputs.AzureTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var thisAzure = new Azure(\"thisAzure\", AzureArgs.builder()        \n            .description(\"Azure Storage Profile with managed disks.\")\n            .regionId(data.vra_region().this().id())\n            .defaultItem(false)\n            .supportsEncryption(false)\n            .dataDiskCaching(\"None\")\n            .diskType(\"Standard_LRS\")\n            .osDiskCaching(\"None\")\n            .tags(AzureTagArgs.builder()\n                .key(\"foo\")\n                .value(\"bar\")\n                .build())\n            .build());\n\n        var thisStorageprofile_azureAzure = new Azure(\"thisStorageprofile/azureAzure\", AzureArgs.builder()        \n            .description(\"Azure Storage Profile with unmanaged disks.\")\n            .regionId(data.vra_region().this().id())\n            .defaultItem(false)\n            .supportsEncryption(false)\n            .dataDiskCaching(\"None\")\n            .osDiskCaching(\"None\")\n            .tags(AzureTagArgs.builder()\n                .key(\"foo\")\n                .value(\"bar\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Azure storage profile using vra_storage_profile_azure resource with managed disk.\n  thisAzure:\n    type: vra:storageprofile:Azure\n    properties:\n      description: Azure Storage Profile with managed disks.\n      regionId: ${data.vra_region.this.id}\n      defaultItem: false\n      supportsEncryption: false\n      dataDiskCaching: None\n      # Supported Values: None, ReadOnly, ReadWrite\n      diskType: Standard_LRS\n      # Supported Values: Standard_LRS, StandardSSD_LRS, Premium_LRS\n      osDiskCaching: None # Supported Values: None, ReadOnly, ReadWrite\n      tags:\n        - key: foo\n          value: bar\n  # Azure storage profile using vra_storage_profile_azure resource with unmanaged disk.\n  thisStorageprofile/azureAzure:\n    type: vra:storageprofile:Azure\n    properties:\n      description: Azure Storage Profile with unmanaged disks.\n      regionId: ${data.vra_region.this.id}\n      defaultItem: false\n      supportsEncryption: false\n      dataDiskCaching: None\n      # Supported Values: None, ReadOnly, ReadWrite\n      osDiskCaching: None # Supported Values: None, ReadOnly, ReadWrite\n      tags:\n        - key: foo\n          value: bar\n```\n\nA storage profile azure resource supports the following arguments:\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Date when the entity was created. The date is in ISO 6801 and UTC.\n"
                },
                "dataDiskCaching": {
                    "type": "string",
                    "description": "Indicates the caching mechanism for additional disk.\n"
                },
                "defaultItem": {
                    "type": "boolean",
                    "description": "Indicates if this storage profile is a default profile.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A human-friendly description.\n"
                },
                "diskType": {
                    "type": "string",
                    "description": "Indicates the performance tier for the storage type. Premium disks are SSD backed and Standard disks are HDD backed.\n"
                },
                "externalRegionId": {
                    "type": "string",
                    "description": "The id of the region as seen in the cloud provider for which this profile is defined.\n"
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:storageprofile/AzureLink:AzureLink"
                    },
                    "description": "HATEOAS of the entity\n"
                },
                "name": {
                    "type": "string",
                    "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The id of the organization this entity belongs to.\n"
                },
                "osDiskCaching": {
                    "type": "string",
                    "description": "Indicates the caching mechanism for OS disk. Default policy for OS disks is Read/Write.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Email of the user that owns the entity.\n"
                },
                "regionId": {
                    "type": "string",
                    "description": "A link to the region that is associated with the storage profile.\n"
                },
                "storageAccountId": {
                    "type": "string",
                    "description": "Id of a storage account where in the disk is placed.\n"
                },
                "supportsEncryption": {
                    "type": "boolean",
                    "description": "Indicates whether this storage policy should support encryption or not.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:storageprofile/AzureTag:AzureTag"
                    },
                    "description": "A set of tag keys and optional values that were set on this Network Profile.\nexample:[ { \"key\" : \"ownedBy\", \"value\": \"Rainpole\" } ]\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                }
            },
            "required": [
                "createdAt",
                "dataDiskCaching",
                "defaultItem",
                "description",
                "diskType",
                "externalRegionId",
                "links",
                "name",
                "organizationId",
                "osDiskCaching",
                "owner",
                "regionId",
                "storageAccountId",
                "supportsEncryption",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "dataDiskCaching": {
                    "type": "string",
                    "description": "Indicates the caching mechanism for additional disk.\n"
                },
                "defaultItem": {
                    "type": "boolean",
                    "description": "Indicates if this storage profile is a default profile.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A human-friendly description.\n"
                },
                "diskType": {
                    "type": "string",
                    "description": "Indicates the performance tier for the storage type. Premium disks are SSD backed and Standard disks are HDD backed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                },
                "osDiskCaching": {
                    "type": "string",
                    "description": "Indicates the caching mechanism for OS disk. Default policy for OS disks is Read/Write.\n"
                },
                "regionId": {
                    "type": "string",
                    "description": "A link to the region that is associated with the storage profile.\n"
                },
                "storageAccountId": {
                    "type": "string",
                    "description": "Id of a storage account where in the disk is placed.\n"
                },
                "supportsEncryption": {
                    "type": "boolean",
                    "description": "Indicates whether this storage policy should support encryption or not.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:storageprofile/AzureTag:AzureTag"
                    },
                    "description": "A set of tag keys and optional values that were set on this Network Profile.\nexample:[ { \"key\" : \"ownedBy\", \"value\": \"Rainpole\" } ]\n"
                }
            },
            "requiredInputs": [
                "defaultItem",
                "regionId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Azure resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Date when the entity was created. The date is in ISO 6801 and UTC.\n"
                    },
                    "dataDiskCaching": {
                        "type": "string",
                        "description": "Indicates the caching mechanism for additional disk.\n"
                    },
                    "defaultItem": {
                        "type": "boolean",
                        "description": "Indicates if this storage profile is a default profile.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A human-friendly description.\n"
                    },
                    "diskType": {
                        "type": "string",
                        "description": "Indicates the performance tier for the storage type. Premium disks are SSD backed and Standard disks are HDD backed.\n"
                    },
                    "externalRegionId": {
                        "type": "string",
                        "description": "The id of the region as seen in the cloud provider for which this profile is defined.\n"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:storageprofile/AzureLink:AzureLink"
                        },
                        "description": "HATEOAS of the entity\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The id of the organization this entity belongs to.\n"
                    },
                    "osDiskCaching": {
                        "type": "string",
                        "description": "Indicates the caching mechanism for OS disk. Default policy for OS disks is Read/Write.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Email of the user that owns the entity.\n"
                    },
                    "regionId": {
                        "type": "string",
                        "description": "A link to the region that is associated with the storage profile.\n"
                    },
                    "storageAccountId": {
                        "type": "string",
                        "description": "Id of a storage account where in the disk is placed.\n"
                    },
                    "supportsEncryption": {
                        "type": "boolean",
                        "description": "Indicates whether this storage policy should support encryption or not.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:storageprofile/AzureTag:AzureTag"
                        },
                        "description": "A set of tag keys and optional values that were set on this Network Profile.\nexample:[ { \"key\" : \"ownedBy\", \"value\": \"Rainpole\" } ]\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                    }
                },
                "type": "object"
            }
        },
        "vra:storageprofile/storageProfile:StorageProfile": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\nThis is an example of how to create a storage profile resource.\n\n**Vra storage profile:**\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumiverse/vra\";\n\n// vSphere storage profile using generic vra_storage_profile resource.\nconst thisStorageProfile = new vra.storageprofile.StorageProfile(\"thisStorageProfile\", {\n    description: \"vSphere Storage Profile with standard independent non-persistent disk.\",\n    regionId: data.vra_region[\"this\"].id,\n    defaultItem: false,\n    diskProperties: {\n        independent: \"true\",\n        persistent: \"false\",\n        limitIops: \"2000\",\n        provisioningType: \"eagerZeroedThick\",\n        sharesLevel: \"custom\",\n        shares: \"1500\",\n    },\n    diskTargetProperties: {\n        datastoreId: data.vra_fabric_datastore_vsphere[\"this\"].id,\n        storagePolicyId: data.vra_fabric_storage_policy_vsphere[\"this\"].id,\n    },\n    tags: [{\n        key: \"foo\",\n        value: \"bar\",\n    }],\n});\n// AWS storage profile using generic vra_storage_profile resource.\nconst thisStorageprofile_storageProfileStorageProfile = new vra.storageprofile.StorageProfile(\"thisStorageprofile/storageProfileStorageProfile\", {\n    description: \"AWS Storage Profile with instance store device type.\",\n    regionId: data.vra_region[\"this\"].id,\n    defaultItem: false,\n    diskProperties: {\n        deviceType: \"instance-store\",\n    },\n    tags: [{\n        key: \"foo\",\n        value: \"bar\",\n    }],\n});\n// Azure storage profile using generic vra_storage_profile resource.\nconst thisVraStorageprofile_storageProfileStorageProfile = new vra.storageprofile.StorageProfile(\"thisVraStorageprofile/storageProfileStorageProfile\", {\n    description: \"Azure Storage Profile with managed disks.\",\n    regionId: data.vra_region[\"this\"].id,\n    defaultItem: false,\n    supportsEncryption: false,\n    diskProperties: {\n        azureDataDiskCaching: \"None\",\n        azureManagedDiskType: \"Standard_LRS\",\n        azureOsDiskCaching: \"None\",\n    },\n    tags: [{\n        key: \"foo\",\n        value: \"bar\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vra as vra\n\n# vSphere storage profile using generic vra_storage_profile resource.\nthis_storage_profile = vra.storageprofile.StorageProfile(\"thisStorageProfile\",\n    description=\"vSphere Storage Profile with standard independent non-persistent disk.\",\n    region_id=data[\"vra_region\"][\"this\"][\"id\"],\n    default_item=False,\n    disk_properties={\n        \"independent\": \"true\",\n        \"persistent\": \"false\",\n        \"limitIops\": \"2000\",\n        \"provisioningType\": \"eagerZeroedThick\",\n        \"sharesLevel\": \"custom\",\n        \"shares\": \"1500\",\n    },\n    disk_target_properties={\n        \"datastoreId\": data[\"vra_fabric_datastore_vsphere\"][\"this\"][\"id\"],\n        \"storagePolicyId\": data[\"vra_fabric_storage_policy_vsphere\"][\"this\"][\"id\"],\n    },\n    tags=[vra.storageprofile.StorageProfileTagArgs(\n        key=\"foo\",\n        value=\"bar\",\n    )])\n# AWS storage profile using generic vra_storage_profile resource.\nthis_storageprofile_storage_profile_storage_profile = vra.storageprofile.StorageProfile(\"thisStorageprofile/storageProfileStorageProfile\",\n    description=\"AWS Storage Profile with instance store device type.\",\n    region_id=data[\"vra_region\"][\"this\"][\"id\"],\n    default_item=False,\n    disk_properties={\n        \"deviceType\": \"instance-store\",\n    },\n    tags=[vra.storageprofile.StorageProfileTagArgs(\n        key=\"foo\",\n        value=\"bar\",\n    )])\n# Azure storage profile using generic vra_storage_profile resource.\nthis_vra_storageprofile_storage_profile_storage_profile = vra.storageprofile.StorageProfile(\"thisVraStorageprofile/storageProfileStorageProfile\",\n    description=\"Azure Storage Profile with managed disks.\",\n    region_id=data[\"vra_region\"][\"this\"][\"id\"],\n    default_item=False,\n    supports_encryption=False,\n    disk_properties={\n        \"azureDataDiskCaching\": \"None\",\n        \"azureManagedDiskType\": \"Standard_LRS\",\n        \"azureOsDiskCaching\": \"None\",\n    },\n    tags=[vra.storageprofile.StorageProfileTagArgs(\n        key=\"foo\",\n        value=\"bar\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumiverse.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // vSphere storage profile using generic vra_storage_profile resource.\n    var thisStorageProfile = new Vra.Storageprofile.StorageProfile(\"thisStorageProfile\", new()\n    {\n        Description = \"vSphere Storage Profile with standard independent non-persistent disk.\",\n        RegionId = data.Vra_region.This.Id,\n        DefaultItem = false,\n        DiskProperties = \n        {\n            { \"independent\", \"true\" },\n            { \"persistent\", \"false\" },\n            { \"limitIops\", \"2000\" },\n            { \"provisioningType\", \"eagerZeroedThick\" },\n            { \"sharesLevel\", \"custom\" },\n            { \"shares\", \"1500\" },\n        },\n        DiskTargetProperties = \n        {\n            { \"datastoreId\", data.Vra_fabric_datastore_vsphere.This.Id },\n            { \"storagePolicyId\", data.Vra_fabric_storage_policy_vsphere.This.Id },\n        },\n        Tags = new[]\n        {\n            new Vra.Storageprofile.Inputs.StorageProfileTagArgs\n            {\n                Key = \"foo\",\n                Value = \"bar\",\n            },\n        },\n    });\n\n    // AWS storage profile using generic vra_storage_profile resource.\n    var thisStorageprofile_storageProfileStorageProfile = new Vra.Storageprofile.StorageProfile(\"thisStorageprofile/storageProfileStorageProfile\", new()\n    {\n        Description = \"AWS Storage Profile with instance store device type.\",\n        RegionId = data.Vra_region.This.Id,\n        DefaultItem = false,\n        DiskProperties = \n        {\n            { \"deviceType\", \"instance-store\" },\n        },\n        Tags = new[]\n        {\n            new Vra.Storageprofile.Inputs.StorageProfileTagArgs\n            {\n                Key = \"foo\",\n                Value = \"bar\",\n            },\n        },\n    });\n\n    // Azure storage profile using generic vra_storage_profile resource.\n    var thisVraStorageprofile_storageProfileStorageProfile = new Vra.Storageprofile.StorageProfile(\"thisVraStorageprofile/storageProfileStorageProfile\", new()\n    {\n        Description = \"Azure Storage Profile with managed disks.\",\n        RegionId = data.Vra_region.This.Id,\n        DefaultItem = false,\n        SupportsEncryption = false,\n        DiskProperties = \n        {\n            { \"azureDataDiskCaching\", \"None\" },\n            { \"azureManagedDiskType\", \"Standard_LRS\" },\n            { \"azureOsDiskCaching\", \"None\" },\n        },\n        Tags = new[]\n        {\n            new Vra.Storageprofile.Inputs.StorageProfileTagArgs\n            {\n                Key = \"foo\",\n                Value = \"bar\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/storageprofile\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/storageprofile\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := storageprofile.NewStorageProfile(ctx, \"thisStorageProfile\", \u0026storageprofile.StorageProfileArgs{\n\t\t\tDescription: pulumi.String(\"vSphere Storage Profile with standard independent non-persistent disk.\"),\n\t\t\tRegionId:    pulumi.Any(data.Vra_region.This.Id),\n\t\t\tDefaultItem: pulumi.Bool(false),\n\t\t\tDiskProperties: pulumi.AnyMap{\n\t\t\t\t\"independent\":      pulumi.Any(\"true\"),\n\t\t\t\t\"persistent\":       pulumi.Any(\"false\"),\n\t\t\t\t\"limitIops\":        pulumi.Any(\"2000\"),\n\t\t\t\t\"provisioningType\": pulumi.Any(\"eagerZeroedThick\"),\n\t\t\t\t\"sharesLevel\":      pulumi.Any(\"custom\"),\n\t\t\t\t\"shares\":           pulumi.Any(\"1500\"),\n\t\t\t},\n\t\t\tDiskTargetProperties: pulumi.AnyMap{\n\t\t\t\t\"datastoreId\":     pulumi.Any(data.Vra_fabric_datastore_vsphere.This.Id),\n\t\t\t\t\"storagePolicyId\": pulumi.Any(data.Vra_fabric_storage_policy_vsphere.This.Id),\n\t\t\t},\n\t\t\tTags: storageprofile.StorageProfileTagArray{\n\t\t\t\t\u0026storageprofile.StorageProfileTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"foo\"),\n\t\t\t\t\tValue: pulumi.String(\"bar\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = storageprofile.NewStorageProfile(ctx, \"thisStorageprofile/storageProfileStorageProfile\", \u0026storageprofile.StorageProfileArgs{\n\t\t\tDescription: pulumi.String(\"AWS Storage Profile with instance store device type.\"),\n\t\t\tRegionId:    pulumi.Any(data.Vra_region.This.Id),\n\t\t\tDefaultItem: pulumi.Bool(false),\n\t\t\tDiskProperties: pulumi.AnyMap{\n\t\t\t\t\"deviceType\": pulumi.Any(\"instance-store\"),\n\t\t\t},\n\t\t\tTags: storageprofile.StorageProfileTagArray{\n\t\t\t\t\u0026storageprofile.StorageProfileTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"foo\"),\n\t\t\t\t\tValue: pulumi.String(\"bar\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = storageprofile.NewStorageProfile(ctx, \"thisVraStorageprofile/storageProfileStorageProfile\", \u0026storageprofile.StorageProfileArgs{\n\t\t\tDescription:        pulumi.String(\"Azure Storage Profile with managed disks.\"),\n\t\t\tRegionId:           pulumi.Any(data.Vra_region.This.Id),\n\t\t\tDefaultItem:        pulumi.Bool(false),\n\t\t\tSupportsEncryption: pulumi.Bool(false),\n\t\t\tDiskProperties: pulumi.AnyMap{\n\t\t\t\t\"azureDataDiskCaching\": pulumi.Any(\"None\"),\n\t\t\t\t\"azureManagedDiskType\": pulumi.Any(\"Standard_LRS\"),\n\t\t\t\t\"azureOsDiskCaching\":   pulumi.Any(\"None\"),\n\t\t\t},\n\t\t\tTags: storageprofile.StorageProfileTagArray{\n\t\t\t\t\u0026storageprofile.StorageProfileTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"foo\"),\n\t\t\t\t\tValue: pulumi.String(\"bar\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.storageprofile.StorageProfile;\nimport com.pulumi.vra.storageprofile.StorageProfileArgs;\nimport com.pulumi.vra.storageprofile.inputs.StorageProfileTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var thisStorageProfile = new StorageProfile(\"thisStorageProfile\", StorageProfileArgs.builder()        \n            .description(\"vSphere Storage Profile with standard independent non-persistent disk.\")\n            .regionId(data.vra_region().this().id())\n            .defaultItem(false)\n            .diskProperties(Map.ofEntries(\n                Map.entry(\"independent\", \"true\"),\n                Map.entry(\"persistent\", \"false\"),\n                Map.entry(\"limitIops\", \"2000\"),\n                Map.entry(\"provisioningType\", \"eagerZeroedThick\"),\n                Map.entry(\"sharesLevel\", \"custom\"),\n                Map.entry(\"shares\", \"1500\")\n            ))\n            .diskTargetProperties(Map.ofEntries(\n                Map.entry(\"datastoreId\", data.vra_fabric_datastore_vsphere().this().id()),\n                Map.entry(\"storagePolicyId\", data.vra_fabric_storage_policy_vsphere().this().id())\n            ))\n            .tags(StorageProfileTagArgs.builder()\n                .key(\"foo\")\n                .value(\"bar\")\n                .build())\n            .build());\n\n        var thisStorageprofile_storageProfileStorageProfile = new StorageProfile(\"thisStorageprofile/storageProfileStorageProfile\", StorageProfileArgs.builder()        \n            .description(\"AWS Storage Profile with instance store device type.\")\n            .regionId(data.vra_region().this().id())\n            .defaultItem(false)\n            .diskProperties(Map.of(\"deviceType\", \"instance-store\"))\n            .tags(StorageProfileTagArgs.builder()\n                .key(\"foo\")\n                .value(\"bar\")\n                .build())\n            .build());\n\n        var thisVraStorageprofile_storageProfileStorageProfile = new StorageProfile(\"thisVraStorageprofile/storageProfileStorageProfile\", StorageProfileArgs.builder()        \n            .description(\"Azure Storage Profile with managed disks.\")\n            .regionId(data.vra_region().this().id())\n            .defaultItem(false)\n            .supportsEncryption(false)\n            .diskProperties(Map.ofEntries(\n                Map.entry(\"azureDataDiskCaching\", \"None\"),\n                Map.entry(\"azureManagedDiskType\", \"Standard_LRS\"),\n                Map.entry(\"azureOsDiskCaching\", \"None\")\n            ))\n            .tags(StorageProfileTagArgs.builder()\n                .key(\"foo\")\n                .value(\"bar\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # vSphere storage profile using generic vra_storage_profile resource.\n  thisStorageProfile:\n    type: vra:storageprofile:StorageProfile\n    properties:\n      description: vSphere Storage Profile with standard independent non-persistent disk.\n      regionId: ${data.vra_region.this.id}\n      defaultItem: false\n      diskProperties:\n        independent: true\n        persistent: false\n        limitIops: 2000\n        provisioningType: eagerZeroedThick\n        sharesLevel: custom\n        shares: 1500\n      diskTargetProperties:\n        datastoreId: ${data.vra_fabric_datastore_vsphere.this.id}\n        storagePolicyId: ${data.vra_fabric_storage_policy_vsphere.this.id}\n      tags:\n        - key: foo\n          value: bar\n  # AWS storage profile using generic vra_storage_profile resource.\n  thisStorageprofile/storageProfileStorageProfile:\n    type: vra:storageprofile:StorageProfile\n    properties:\n      description: AWS Storage Profile with instance store device type.\n      regionId: ${data.vra_region.this.id}\n      defaultItem: false\n      diskProperties:\n        deviceType: instance-store\n      tags:\n        - key: foo\n          value: bar\n  # Azure storage profile using generic vra_storage_profile resource.\n  thisVraStorageprofile/storageProfileStorageProfile:\n    type: vra:storageprofile:StorageProfile\n    properties:\n      description: Azure Storage Profile with managed disks.\n      regionId: ${data.vra_region.this.id}\n      defaultItem: false\n      supportsEncryption: false\n      diskProperties:\n        azureDataDiskCaching: None\n        azureManagedDiskType: Standard_LRS\n        azureOsDiskCaching: None\n      tags:\n        - key: foo\n          value: bar\n```\n\nA storage profile resource supports the following arguments:\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "cloudAccountId": {
                    "type": "string",
                    "description": "Id of the cloud account this storage profile belongs to.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Date when the entity was created. The date is in ISO 6801 and UTC.\n"
                },
                "defaultItem": {
                    "type": "boolean",
                    "description": "Indicates if this storage profile is a default profile.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A human-friendly description.\n"
                },
                "diskProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map of storage properties that are to be applied on disk while provisioning.\n"
                },
                "diskTargetProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map of storage placements to know where the disk is provisioned.\n"
                },
                "externalRegionId": {
                    "type": "string",
                    "description": "The id of the region as seen in the cloud provider for which this profile is defined.\n"
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:storageprofile/StorageProfileLink:StorageProfileLink"
                    },
                    "description": "HATEOAS of the entity\n"
                },
                "name": {
                    "type": "string",
                    "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "The id of the organization this entity belongs to.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Email of the user that owns the entity.\n"
                },
                "regionId": {
                    "type": "string",
                    "description": "The id of the region for which this profile is defined as in vRealize Automation(vRA).\n"
                },
                "supportsEncryption": {
                    "type": "boolean",
                    "description": "Indicates whether this storage profile supports encryption or not.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:storageprofile/StorageProfileTag:StorageProfileTag"
                    },
                    "description": "A set of tag keys and optional values that were set on this Network Profile.\nexample:[ { \"key\" : \"ownedBy\", \"value\": \"Rainpole\" } ]\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                }
            },
            "required": [
                "cloudAccountId",
                "createdAt",
                "defaultItem",
                "externalRegionId",
                "links",
                "name",
                "orgId",
                "owner",
                "regionId",
                "supportsEncryption",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "defaultItem": {
                    "type": "boolean",
                    "description": "Indicates if this storage profile is a default profile.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A human-friendly description.\n"
                },
                "diskProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map of storage properties that are to be applied on disk while provisioning.\n"
                },
                "diskTargetProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map of storage placements to know where the disk is provisioned.\n"
                },
                "name": {
                    "type": "string",
                    "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                },
                "regionId": {
                    "type": "string",
                    "description": "The id of the region for which this profile is defined as in vRealize Automation(vRA).\n"
                },
                "supportsEncryption": {
                    "type": "boolean",
                    "description": "Indicates whether this storage profile supports encryption or not.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:storageprofile/StorageProfileTag:StorageProfileTag"
                    },
                    "description": "A set of tag keys and optional values that were set on this Network Profile.\nexample:[ { \"key\" : \"ownedBy\", \"value\": \"Rainpole\" } ]\n"
                }
            },
            "requiredInputs": [
                "defaultItem",
                "regionId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering StorageProfile resources.\n",
                "properties": {
                    "cloudAccountId": {
                        "type": "string",
                        "description": "Id of the cloud account this storage profile belongs to.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date when the entity was created. The date is in ISO 6801 and UTC.\n"
                    },
                    "defaultItem": {
                        "type": "boolean",
                        "description": "Indicates if this storage profile is a default profile.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A human-friendly description.\n"
                    },
                    "diskProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Map of storage properties that are to be applied on disk while provisioning.\n"
                    },
                    "diskTargetProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Map of storage placements to know where the disk is provisioned.\n"
                    },
                    "externalRegionId": {
                        "type": "string",
                        "description": "The id of the region as seen in the cloud provider for which this profile is defined.\n"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:storageprofile/StorageProfileLink:StorageProfileLink"
                        },
                        "description": "HATEOAS of the entity\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The id of the organization this entity belongs to.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Email of the user that owns the entity.\n"
                    },
                    "regionId": {
                        "type": "string",
                        "description": "The id of the region for which this profile is defined as in vRealize Automation(vRA).\n"
                    },
                    "supportsEncryption": {
                        "type": "boolean",
                        "description": "Indicates whether this storage profile supports encryption or not.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:storageprofile/StorageProfileTag:StorageProfileTag"
                        },
                        "description": "A set of tag keys and optional values that were set on this Network Profile.\nexample:[ { \"key\" : \"ownedBy\", \"value\": \"Rainpole\" } ]\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                    }
                },
                "type": "object"
            }
        },
        "vra:storageprofile/vSphere:VSphere": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\nThis is an example of how to create a storage profile vsphere resource.\n\n**Vra storage profile vsphere:**\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumiverse/vra\";\n\n// vSphere storage profile using generic vra_storage_profile resource.\nconst _this = new vra.storageprofile.VSphere(\"this\", {\n    description: \"vSphere Storage Profile with FCD disk.\",\n    regionId: data.vra_region[\"this\"].id,\n    defaultItem: false,\n    diskType: \"firstClass\",\n    provisioningType: \"thin\",\n    datastoreId: data.vra_fabric_datastore_vsphere[\"this\"].id,\n    storagePolicyId: data.vra_fabric_storage_policy_vsphere[\"this\"].id,\n    tags: [{\n        key: \"foo\",\n        value: \"bar\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vra as vra\n\n# vSphere storage profile using generic vra_storage_profile resource.\nthis = vra.storageprofile.VSphere(\"this\",\n    description=\"vSphere Storage Profile with FCD disk.\",\n    region_id=data[\"vra_region\"][\"this\"][\"id\"],\n    default_item=False,\n    disk_type=\"firstClass\",\n    provisioning_type=\"thin\",\n    datastore_id=data[\"vra_fabric_datastore_vsphere\"][\"this\"][\"id\"],\n    storage_policy_id=data[\"vra_fabric_storage_policy_vsphere\"][\"this\"][\"id\"],\n    tags=[vra.storageprofile.VSphereTagArgs(\n        key=\"foo\",\n        value=\"bar\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumiverse.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // vSphere storage profile using generic vra_storage_profile resource.\n    var @this = new Vra.Storageprofile.VSphere(\"this\", new()\n    {\n        Description = \"vSphere Storage Profile with FCD disk.\",\n        RegionId = data.Vra_region.This.Id,\n        DefaultItem = false,\n        DiskType = \"firstClass\",\n        ProvisioningType = \"thin\",\n        DatastoreId = data.Vra_fabric_datastore_vsphere.This.Id,\n        StoragePolicyId = data.Vra_fabric_storage_policy_vsphere.This.Id,\n        Tags = new[]\n        {\n            new Vra.Storageprofile.Inputs.VSphereTagArgs\n            {\n                Key = \"foo\",\n                Value = \"bar\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/storageprofile\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/storageprofile\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := storageprofile.NewVSphere(ctx, \"this\", \u0026storageprofile.VSphereArgs{\n\t\t\tDescription:      pulumi.String(\"vSphere Storage Profile with FCD disk.\"),\n\t\t\tRegionId:         pulumi.Any(data.Vra_region.This.Id),\n\t\t\tDefaultItem:      pulumi.Bool(false),\n\t\t\tDiskType:         pulumi.String(\"firstClass\"),\n\t\t\tProvisioningType: pulumi.String(\"thin\"),\n\t\t\tDatastoreId:      pulumi.Any(data.Vra_fabric_datastore_vsphere.This.Id),\n\t\t\tStoragePolicyId:  pulumi.Any(data.Vra_fabric_storage_policy_vsphere.This.Id),\n\t\t\tTags: storageprofile.VSphereTagArray{\n\t\t\t\t\u0026storageprofile.VSphereTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"foo\"),\n\t\t\t\t\tValue: pulumi.String(\"bar\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.storageprofile.VSphere;\nimport com.pulumi.vra.storageprofile.VSphereArgs;\nimport com.pulumi.vra.storageprofile.inputs.VSphereTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var this_ = new VSphere(\"this\", VSphereArgs.builder()        \n            .description(\"vSphere Storage Profile with FCD disk.\")\n            .regionId(data.vra_region().this().id())\n            .defaultItem(false)\n            .diskType(\"firstClass\")\n            .provisioningType(\"thin\")\n            .datastoreId(data.vra_fabric_datastore_vsphere().this().id())\n            .storagePolicyId(data.vra_fabric_storage_policy_vsphere().this().id())\n            .tags(VSphereTagArgs.builder()\n                .key(\"foo\")\n                .value(\"bar\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # vSphere storage profile using generic vra_storage_profile resource.\n  this:\n    type: vra:storageprofile:VSphere\n    properties:\n      description: vSphere Storage Profile with FCD disk.\n      regionId: ${data.vra_region.this.id}\n      defaultItem: false\n      diskType: firstClass\n      provisioningType: thin # Supported values: \"thin\", \"thick\", \"eagerZeroedThick\"\n      datastoreId: ${data.vra_fabric_datastore_vsphere.this.id}\n      storagePolicyId: ${data.vra_fabric_storage_policy_vsphere.this.id} # Remove it if datastore default storage policy needs to be selected.\n      tags:\n        - key: foo\n          value: bar\n```\n\nA storage profile vsphere resource supports the following arguments:\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "cloudAccountId": {
                    "type": "string",
                    "description": "Id of the cloud account this storage profile belongs to.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Date when the entity was created. The date is in ISO 6801 and UTC.\n"
                },
                "datastoreId": {
                    "type": "string",
                    "description": "Id of the vSphere Datastore for placing disk and VM.\n"
                },
                "defaultItem": {
                    "type": "boolean",
                    "description": "Indicates if this storage profile is a default profile.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A human-friendly description.\n"
                },
                "diskMode": {
                    "type": "string",
                    "description": "Type of mode for the disk.\n"
                },
                "diskType": {
                    "type": "string",
                    "description": "Indicates the performance tier for the storage type. Premium disks are SSD backed and Standard disks are HDD backed.\n"
                },
                "externalRegionId": {
                    "type": "string",
                    "description": "The id of the region as seen in the cloud provider for which this profile is defined.\n"
                },
                "limitIops": {
                    "type": "string",
                    "description": "The upper bound for the I/O operations per second allocated for each virtual disk.\n"
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:storageprofile/VSphereLink:VSphereLink"
                    },
                    "description": "HATEOAS of the entity\n"
                },
                "name": {
                    "type": "string",
                    "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "The id of the organization this entity belongs to.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Email of the user that owns the entity.\n"
                },
                "provisioningType": {
                    "type": "string",
                    "description": "Type of provisioning policy for the disk.\n"
                },
                "regionId": {
                    "type": "string",
                    "description": "The Id of the region that is associated with the storage profile.\n"
                },
                "shares": {
                    "type": "string",
                    "description": "A specific number of shares assigned to each virtual machine.\n"
                },
                "sharesLevel": {
                    "type": "string",
                    "description": "Indicates whether this storage profile supports encryption or not.\n"
                },
                "storagePolicyId": {
                    "type": "string",
                    "description": "Id of the vSphere Storage Policy to be applied.\n"
                },
                "supportsEncryption": {
                    "type": "boolean",
                    "description": "Indicates whether this storage policy should support encryption or not.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:storageprofile/VSphereTag:VSphereTag"
                    },
                    "description": "A set of tag keys and optional values that were set on this Network Profile.\nexample:[ { \"key\" : \"ownedBy\", \"value\": \"Rainpole\" } ]\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                }
            },
            "required": [
                "cloudAccountId",
                "createdAt",
                "defaultItem",
                "diskMode",
                "externalRegionId",
                "links",
                "name",
                "orgId",
                "owner",
                "regionId",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "datastoreId": {
                    "type": "string",
                    "description": "Id of the vSphere Datastore for placing disk and VM.\n"
                },
                "defaultItem": {
                    "type": "boolean",
                    "description": "Indicates if this storage profile is a default profile.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A human-friendly description.\n"
                },
                "diskMode": {
                    "type": "string",
                    "description": "Type of mode for the disk.\n"
                },
                "diskType": {
                    "type": "string",
                    "description": "Indicates the performance tier for the storage type. Premium disks are SSD backed and Standard disks are HDD backed.\n"
                },
                "limitIops": {
                    "type": "string",
                    "description": "The upper bound for the I/O operations per second allocated for each virtual disk.\n"
                },
                "name": {
                    "type": "string",
                    "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                },
                "provisioningType": {
                    "type": "string",
                    "description": "Type of provisioning policy for the disk.\n"
                },
                "regionId": {
                    "type": "string",
                    "description": "The Id of the region that is associated with the storage profile.\n"
                },
                "shares": {
                    "type": "string",
                    "description": "A specific number of shares assigned to each virtual machine.\n"
                },
                "sharesLevel": {
                    "type": "string",
                    "description": "Indicates whether this storage profile supports encryption or not.\n"
                },
                "storagePolicyId": {
                    "type": "string",
                    "description": "Id of the vSphere Storage Policy to be applied.\n"
                },
                "supportsEncryption": {
                    "type": "boolean",
                    "description": "Indicates whether this storage policy should support encryption or not.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:storageprofile/VSphereTag:VSphereTag"
                    },
                    "description": "A set of tag keys and optional values that were set on this Network Profile.\nexample:[ { \"key\" : \"ownedBy\", \"value\": \"Rainpole\" } ]\n"
                }
            },
            "requiredInputs": [
                "defaultItem",
                "regionId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VSphere resources.\n",
                "properties": {
                    "cloudAccountId": {
                        "type": "string",
                        "description": "Id of the cloud account this storage profile belongs to.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date when the entity was created. The date is in ISO 6801 and UTC.\n"
                    },
                    "datastoreId": {
                        "type": "string",
                        "description": "Id of the vSphere Datastore for placing disk and VM.\n"
                    },
                    "defaultItem": {
                        "type": "boolean",
                        "description": "Indicates if this storage profile is a default profile.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A human-friendly description.\n"
                    },
                    "diskMode": {
                        "type": "string",
                        "description": "Type of mode for the disk.\n"
                    },
                    "diskType": {
                        "type": "string",
                        "description": "Indicates the performance tier for the storage type. Premium disks are SSD backed and Standard disks are HDD backed.\n"
                    },
                    "externalRegionId": {
                        "type": "string",
                        "description": "The id of the region as seen in the cloud provider for which this profile is defined.\n"
                    },
                    "limitIops": {
                        "type": "string",
                        "description": "The upper bound for the I/O operations per second allocated for each virtual disk.\n"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:storageprofile/VSphereLink:VSphereLink"
                        },
                        "description": "HATEOAS of the entity\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The id of the organization this entity belongs to.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Email of the user that owns the entity.\n"
                    },
                    "provisioningType": {
                        "type": "string",
                        "description": "Type of provisioning policy for the disk.\n"
                    },
                    "regionId": {
                        "type": "string",
                        "description": "The Id of the region that is associated with the storage profile.\n"
                    },
                    "shares": {
                        "type": "string",
                        "description": "A specific number of shares assigned to each virtual machine.\n"
                    },
                    "sharesLevel": {
                        "type": "string",
                        "description": "Indicates whether this storage profile supports encryption or not.\n"
                    },
                    "storagePolicyId": {
                        "type": "string",
                        "description": "Id of the vSphere Storage Policy to be applied.\n"
                    },
                    "supportsEncryption": {
                        "type": "boolean",
                        "description": "Indicates whether this storage policy should support encryption or not.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:storageprofile/VSphereTag:VSphereTag"
                        },
                        "description": "A set of tag keys and optional values that were set on this Network Profile.\nexample:[ { \"key\" : \"ownedBy\", \"value\": \"Rainpole\" } ]\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                    }
                },
                "type": "object"
            }
        },
        "vra:zone/zone:Zone": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\n\nThis is an example of how to create a zone resource.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumiverse/vra\";\n\nconst _this = new vra.zone.Zone(\"this\", {\n    description: \"my terraform test cloud zone\",\n    regionId: data.vra_region[\"this\"].id,\n    tags: [\n        {\n            key: \"my-tf-key\",\n            value: \"my-tf-value\",\n        },\n        {\n            key: \"tf-foo\",\n            value: \"tf-bar\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_vra as vra\n\nthis = vra.zone.Zone(\"this\",\n    description=\"my terraform test cloud zone\",\n    region_id=data[\"vra_region\"][\"this\"][\"id\"],\n    tags=[\n        vra.zone.ZoneTagArgs(\n            key=\"my-tf-key\",\n            value=\"my-tf-value\",\n        ),\n        vra.zone.ZoneTagArgs(\n            key=\"tf-foo\",\n            value=\"tf-bar\",\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumiverse.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = new Vra.Zone.Zone(\"this\", new()\n    {\n        Description = \"my terraform test cloud zone\",\n        RegionId = data.Vra_region.This.Id,\n        Tags = new[]\n        {\n            new Vra.Zone.Inputs.ZoneTagArgs\n            {\n                Key = \"my-tf-key\",\n                Value = \"my-tf-value\",\n            },\n            new Vra.Zone.Inputs.ZoneTagArgs\n            {\n                Key = \"tf-foo\",\n                Value = \"tf-bar\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/zone\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/zone\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zone.NewZone(ctx, \"this\", \u0026zone.ZoneArgs{\n\t\t\tDescription: pulumi.String(\"my terraform test cloud zone\"),\n\t\t\tRegionId:    pulumi.Any(data.Vra_region.This.Id),\n\t\t\tTags: zone.ZoneTagArray{\n\t\t\t\t\u0026zone.ZoneTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"my-tf-key\"),\n\t\t\t\t\tValue: pulumi.String(\"my-tf-value\"),\n\t\t\t\t},\n\t\t\t\t\u0026zone.ZoneTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"tf-foo\"),\n\t\t\t\t\tValue: pulumi.String(\"tf-bar\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.zone.Zone;\nimport com.pulumi.vra.zone.ZoneArgs;\nimport com.pulumi.vra.zone.inputs.ZoneTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var this_ = new Zone(\"this\", ZoneArgs.builder()        \n            .description(\"my terraform test cloud zone\")\n            .regionId(data.vra_region().this().id())\n            .tags(            \n                ZoneTagArgs.builder()\n                    .key(\"my-tf-key\")\n                    .value(\"my-tf-value\")\n                    .build(),\n                ZoneTagArgs.builder()\n                    .key(\"tf-foo\")\n                    .value(\"tf-bar\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  this:\n    type: vra:zone:Zone\n    properties:\n      description: my terraform test cloud zone\n      regionId: ${data.vra_region.this.id}\n      tags:\n        - key: my-tf-key\n          value: my-tf-value\n        - key: tf-foo\n          value: tf-bar\n```\n\nA zone resource supports the following arguments:\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "cloudAccountId": {
                    "type": "string",
                    "description": "The ID of the cloud account this zone belongs to.\n"
                },
                "computeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The ids of the compute resources that will be explicitly assigned to this zone.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Date when the entity was created. The date is in ISO 8601 and UTC.\n"
                },
                "customProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "A list of key value pair of properties that will be used.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A human-friendly description.\n"
                },
                "externalRegionId": {
                    "type": "string",
                    "description": "The id of the region for which this zone is defined.\n"
                },
                "folder": {
                    "type": "string",
                    "description": "The folder relative path to the datacenter where resources are deployed to (only applicable for vSphere cloud zones).\n"
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:zone/ZoneLink:ZoneLink"
                    },
                    "description": "HATEOAS of entity.\n"
                },
                "name": {
                    "type": "string",
                    "description": "A human-friendly name used as an identifier for the zone resource instance.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "The id of the organization this entity belongs to.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Email of the user that owns the entity.\n"
                },
                "placementPolicy": {
                    "type": "string",
                    "description": "The placement policy for the zone. One of `DEFAULT`, `SPREAD` or `BINPACK`. Default is `DEFAULT`.\n"
                },
                "regionId": {
                    "type": "string",
                    "description": "The id of the region for which this zone is created.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:zone/ZoneTag:ZoneTag"
                    },
                    "description": "A set of tag keys and optional values that were set on this resource:\n"
                },
                "tagsToMatches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:zone/ZoneTagsToMatch:ZoneTagsToMatch"
                    },
                    "description": "A set of tag keys and optional values for compute resource filtering:\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                }
            },
            "required": [
                "cloudAccountId",
                "computeIds",
                "createdAt",
                "customProperties",
                "externalRegionId",
                "links",
                "name",
                "orgId",
                "owner",
                "regionId",
                "tags",
                "tagsToMatches",
                "updatedAt"
            ],
            "inputProperties": {
                "computeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The ids of the compute resources that will be explicitly assigned to this zone.\n"
                },
                "customProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "A list of key value pair of properties that will be used.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A human-friendly description.\n"
                },
                "folder": {
                    "type": "string",
                    "description": "The folder relative path to the datacenter where resources are deployed to (only applicable for vSphere cloud zones).\n"
                },
                "name": {
                    "type": "string",
                    "description": "A human-friendly name used as an identifier for the zone resource instance.\n"
                },
                "placementPolicy": {
                    "type": "string",
                    "description": "The placement policy for the zone. One of `DEFAULT`, `SPREAD` or `BINPACK`. Default is `DEFAULT`.\n"
                },
                "regionId": {
                    "type": "string",
                    "description": "The id of the region for which this zone is created.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:zone/ZoneTag:ZoneTag"
                    },
                    "description": "A set of tag keys and optional values that were set on this resource:\n"
                },
                "tagsToMatches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vra:zone/ZoneTagsToMatch:ZoneTagsToMatch"
                    },
                    "description": "A set of tag keys and optional values for compute resource filtering:\n"
                }
            },
            "requiredInputs": [
                "regionId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Zone resources.\n",
                "properties": {
                    "cloudAccountId": {
                        "type": "string",
                        "description": "The ID of the cloud account this zone belongs to.\n"
                    },
                    "computeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The ids of the compute resources that will be explicitly assigned to this zone.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date when the entity was created. The date is in ISO 8601 and UTC.\n"
                    },
                    "customProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "A list of key value pair of properties that will be used.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A human-friendly description.\n"
                    },
                    "externalRegionId": {
                        "type": "string",
                        "description": "The id of the region for which this zone is defined.\n"
                    },
                    "folder": {
                        "type": "string",
                        "description": "The folder relative path to the datacenter where resources are deployed to (only applicable for vSphere cloud zones).\n"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:zone/ZoneLink:ZoneLink"
                        },
                        "description": "HATEOAS of entity.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A human-friendly name used as an identifier for the zone resource instance.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The id of the organization this entity belongs to.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Email of the user that owns the entity.\n"
                    },
                    "placementPolicy": {
                        "type": "string",
                        "description": "The placement policy for the zone. One of `DEFAULT`, `SPREAD` or `BINPACK`. Default is `DEFAULT`.\n"
                    },
                    "regionId": {
                        "type": "string",
                        "description": "The id of the region for which this zone is created.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:zone/ZoneTag:ZoneTag"
                        },
                        "description": "A set of tag keys and optional values that were set on this resource:\n"
                    },
                    "tagsToMatches": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:zone/ZoneTagsToMatch:ZoneTagsToMatch"
                        },
                        "description": "A set of tag keys and optional values for compute resource filtering:\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "vra:blockdevice/getBlockDevice:getBlockDevice": {
            "description": "## ---layout: \"vra\"\n\npage_title: \"VMware vRealize Automation: vra.blockdevice.BlockDevice\"\ndescription: |-\n  Provides a data lookup for vra_block_device.\n---\n\n# Data Source: vra.blockdevice.BlockDevice\n\nProvides a data lookup for a vra_block_device.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\n\n**Block device data source by its id:**\n\nThis is an example of how to read a block device data source using its ID.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst this = vra.blockdevice.getBlockDevice({\n    id: _var.block_device_id,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.blockdevice.get_block_device(id=var[\"block_device_id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Blockdevice.GetBlockDevice.Invoke(new()\n    {\n        Id = @var.Block_device_id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/blockdevice\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/blockdevice\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := blockdevice.LookupBlockDevice(ctx, \u0026blockdevice.LookupBlockDeviceArgs{\n\t\t\tId: pulumi.StringRef(_var.Block_device_id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.blockdevice.BlockdeviceFunctions;\nimport com.pulumi.vra.blockdevice.inputs.GetBlockDeviceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = BlockdeviceFunctions.getBlockDevice(GetBlockDeviceArgs.builder()\n            .id(var_.block_device_id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:blockdevice:getBlockDevice\n      Arguments:\n        id: ${var.block_device_id}\n```\n\n**Block device data source filter by name:**\n\nThis is an example of how to read a block device data source using its name.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst thisBlockDevice = pulumi.output(vra.blockdevice.getBlockDevice({\n    filter: `name eq '${var_block_device_name}'`,\n}));\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.blockdevice.get_block_device(filter=f\"name eq '{var['block_device_name']}'\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Blockdevice.GetBlockDevice.Invoke(new()\n    {\n        Filter = $\"name eq '{@var.Block_device_name}'\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/blockdevice\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/blockdevice\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := blockdevice.LookupBlockDevice(ctx, \u0026blockdevice.LookupBlockDeviceArgs{\n\t\t\tFilter: pulumi.StringRef(fmt.Sprintf(\"name eq '%v'\", _var.Block_device_name)),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.blockdevice.BlockdeviceFunctions;\nimport com.pulumi.vra.blockdevice.inputs.GetBlockDeviceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = BlockdeviceFunctions.getBlockDevice(GetBlockDeviceArgs.builder()\n            .filter(String.format(\"name eq '%s'\", var_.block_device_name()))\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:blockdevice:getBlockDevice\n      Arguments:\n        filter: name eq '${var.block_device_name}'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getBlockDevice.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Describes machine within the scope of your organization and is not propagated to the cloud.\n"
                    },
                    "expandSnapshots": {
                        "type": "boolean",
                        "description": "Indicates whether the snapshots of the block-devices should be included in the state. Applicable only for first class block devices.\n"
                    },
                    "filter": {
                        "type": "string",
                        "description": "Search criteria to filter the list of block devices.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The id of the block device.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:blockdevice/getBlockDeviceTag:getBlockDeviceTag"
                        },
                        "description": "A set of tag keys and optional values that were set on this resource instance.\nexample:[ { \"key\" : \"vmware.enumeration.type\", \"value\": \"nebs_block\" } ]\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getBlockDevice.\n",
                "properties": {
                    "capacityInGb": {
                        "type": "integer",
                        "description": "Capacity of the block device in GB.\n"
                    },
                    "cloudAccountIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of ids of the cloud accounts this entity belongs to.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date when the entity was created. The date is in ISO 6801 and UTC.\n"
                    },
                    "customProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Additional custom properties that may be used to extend the machine.\n"
                    },
                    "deploymentId": {
                        "type": "string",
                        "description": "The id of the deployment that is associated with this resource.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Describes machine within the scope of your organization and is not propagated to the cloud.\n"
                    },
                    "expandSnapshots": {
                        "type": "boolean"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "External entity Id on the provider side.\n"
                    },
                    "externalRegionId": {
                        "type": "string",
                        "description": "The external regionId of the resource.\n"
                    },
                    "externalZoneId": {
                        "type": "string",
                        "description": "The external zoneId of the resource.\n"
                    },
                    "filter": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:blockdevice/getBlockDeviceLink:getBlockDeviceLink"
                        },
                        "description": "HATEOAS of the entity.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The id of the organization this entity belongs to.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Email of the user that owns the entity.\n"
                    },
                    "persistent": {
                        "type": "boolean",
                        "description": "Indicates whether the block device survives a delete action.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The id of the project the current user belongs to.\n"
                    },
                    "snapshots": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:blockdevice/getBlockDeviceSnapshot:getBlockDeviceSnapshot"
                        }
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the block device.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:blockdevice/getBlockDeviceTag:getBlockDeviceTag"
                        },
                        "description": "A set of tag keys and optional values that were set on this resource instance.\nexample:[ { \"key\" : \"vmware.enumeration.type\", \"value\": \"nebs_block\" } ]\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                    }
                },
                "type": "object",
                "required": [
                    "capacityInGb",
                    "cloudAccountIds",
                    "createdAt",
                    "customProperties",
                    "deploymentId",
                    "externalId",
                    "externalRegionId",
                    "externalZoneId",
                    "id",
                    "links",
                    "name",
                    "orgId",
                    "owner",
                    "persistent",
                    "projectId",
                    "snapshots",
                    "status",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "vra:blockdevice/getSnapshots:getSnapshots": {
            "description": "## ---layout: \"vra\"\n\npage_title: \"VMware vRealize Automation: vra.blockdevice.getSnapshots\"\ndescription: |-\n  Provides a data lookup for vra_block_device_snapshots.\n---\n\n# Data Source: vra.blockdevice.getSnapshots\n{{% examples %}}\n## Example Usage\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSnapshots.\n",
                "properties": {
                    "blockDeviceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "blockDeviceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSnapshots.\n",
                "properties": {
                    "blockDeviceId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "snapshots": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:blockdevice/getSnapshotsSnapshot:getSnapshotsSnapshot"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "blockDeviceId",
                    "snapshots",
                    "id"
                ]
            }
        },
        "vra:blueprint/getBlueprint:getBlueprint": {
            "description": "This data source provides information about a cloud template (blueprint) in vRA.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\n\nThis is an example of how to get a vRA cloud template by its name.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst this = vra.blueprint.getBlueprint({\n    name: vra_blueprint[\"this\"].name,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.blueprint.get_blueprint(name=vra_blueprint[\"this\"][\"name\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Blueprint.GetBlueprint.Invoke(new()\n    {\n        Name = vra_blueprint.This.Name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/blueprint\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/blueprint\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := blueprint.LookupBlueprint(ctx, \u0026blueprint.LookupBlueprintArgs{\n\t\t\tName: pulumi.StringRef(vra_blueprint.This.Name),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.blueprint.BlueprintFunctions;\nimport com.pulumi.vra.blueprint.inputs.GetBlueprintArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = BlueprintFunctions.getBlueprint(GetBlueprintArgs.builder()\n            .name(vra_blueprint.this().name())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:blueprint:getBlueprint\n      Arguments:\n        name: ${vra_blueprint.this.name}\n```\n\nThis is an example of how to get a vRA cloud template by its id.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst this = vra.blueprint.getBlueprint({\n    id: vra_blueprint[\"this\"].id,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.blueprint.get_blueprint(id=vra_blueprint[\"this\"][\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Blueprint.GetBlueprint.Invoke(new()\n    {\n        Id = vra_blueprint.This.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/blueprint\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/blueprint\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := blueprint.LookupBlueprint(ctx, \u0026blueprint.LookupBlueprintArgs{\n\t\t\tId: pulumi.StringRef(vra_blueprint.This.Id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.blueprint.BlueprintFunctions;\nimport com.pulumi.vra.blueprint.inputs.GetBlueprintArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = BlueprintFunctions.getBlueprint(GetBlueprintArgs.builder()\n            .id(vra_blueprint.this().id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:blueprint:getBlueprint\n      Arguments:\n        id: ${vra_blueprint.this.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getBlueprint.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of this cloud template. One of `id` or `name` must be provided.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the cloud template. One of `id` or `name` must be provided.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The id of the project to narrow the search while looking for cloud templates.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getBlueprint.\n",
                "properties": {
                    "content": {
                        "type": "string",
                        "description": "Blueprint YAML content.\n"
                    },
                    "contentSourceId": {
                        "type": "string",
                        "description": "The id of the content source.\n"
                    },
                    "contentSourcePath": {
                        "type": "string",
                        "description": "Content source path.\n"
                    },
                    "contentSourceSyncAt": {
                        "type": "string",
                        "description": "Content source last sync at.\n"
                    },
                    "contentSourceSyncMessages": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Content source last sync messages.\n"
                    },
                    "contentSourceSyncStatus": {
                        "type": "string",
                        "description": "Content source last sync status. Supported values: `SUCCESSFUL`, `FAILED`.\n"
                    },
                    "contentSourceType": {
                        "type": "string",
                        "description": "Content source type.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date when the entity was created. The date is in ISO 6801 and UTC.\n"
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "The user the entity was created by.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A human-friendly description.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The id of the organization this entity belongs to.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The name of the project the entity belongs to.\n"
                    },
                    "requestScopeOrg": {
                        "type": "boolean",
                        "description": "Flag to indicate whether this blueprint can be requested from any project in the organization this entity belongs to.\n"
                    },
                    "selfLink": {
                        "type": "string",
                        "description": "HATEOAS of the entity.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the cloud template. Supported values: `DRAFT`, `VERSIONED`, `RELEASED`.\n"
                    },
                    "totalReleasedVersions": {
                        "type": "integer",
                        "description": "Total number of released versions.\n"
                    },
                    "totalVersions": {
                        "type": "integer",
                        "description": "Total number of versions.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                    },
                    "updatedBy": {
                        "type": "string",
                        "description": "The user the entity was last updated by.\n"
                    },
                    "valid": {
                        "type": "boolean",
                        "description": "Flag to indicate if the current content of the cloud template is valid.\n"
                    },
                    "validationMessages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:blueprint/getBlueprintValidationMessage:getBlueprintValidationMessage"
                        },
                        "description": "List of validations messages.\n* message - Validation message.\n"
                    }
                },
                "type": "object",
                "required": [
                    "content",
                    "contentSourceId",
                    "contentSourcePath",
                    "contentSourceSyncAt",
                    "contentSourceSyncMessages",
                    "contentSourceSyncStatus",
                    "contentSourceType",
                    "createdAt",
                    "createdBy",
                    "description",
                    "id",
                    "orgId",
                    "projectId",
                    "projectName",
                    "requestScopeOrg",
                    "selfLink",
                    "status",
                    "totalReleasedVersions",
                    "totalVersions",
                    "updatedAt",
                    "updatedBy",
                    "valid",
                    "validationMessages"
                ]
            }
        },
        "vra:blueprint/getVersion:getVersion": {
            "description": "This data source provides information about a cloud template (blueprint) version in vRA.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst this = vra.blueprint.getVersion({\n    blueprintId: _var.blueprint_id,\n    id: _var.blueprint_version_id,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.blueprint.get_version(blueprint_id=var[\"blueprint_id\"],\n    id=var[\"blueprint_version_id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Blueprint.GetVersion.Invoke(new()\n    {\n        BlueprintId = @var.Blueprint_id,\n        Id = @var.Blueprint_version_id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/blueprint\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/blueprint\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := blueprint.GetVersion(ctx, \u0026blueprint.GetVersionArgs{\n\t\t\tBlueprintId: _var.Blueprint_id,\n\t\t\tId:          _var.Blueprint_version_id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.blueprint.BlueprintFunctions;\nimport com.pulumi.vra.blueprint.inputs.GetVersionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = BlueprintFunctions.getVersion(GetVersionArgs.builder()\n            .blueprintId(var_.blueprint_id())\n            .id(var_.blueprint_version_id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:blueprint:getVersion\n      Arguments:\n        blueprintId: ${var.blueprint_id}\n        id: ${var.blueprint_version_id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getVersion.\n",
                "properties": {
                    "blueprintId": {
                        "type": "string",
                        "description": "Name of the cloud template. One of `id` or `name` must be provided.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The id of the cloud template version.\n"
                    }
                },
                "type": "object",
                "required": [
                    "blueprintId",
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVersion.\n",
                "properties": {
                    "blueprintDescription": {
                        "type": "string",
                        "description": "Description of the cloud template.\n"
                    },
                    "blueprintId": {
                        "type": "string"
                    },
                    "content": {
                        "type": "string",
                        "description": "Blueprint YAML content.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date when the entity was created. The date is in ISO 6801 and UTC.\n"
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "The user the entity was created by.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(Optional) Cloud template version description.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the cloud template version.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The id of the organization this entity belongs to.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The id of the project this entity belongs to.\n"
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The name of the project the entity belongs to.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the cloud template. Supported values: `DRAFT`, `VERSIONED`, `RELEASED`.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                    },
                    "updatedBy": {
                        "type": "string",
                        "description": "The user the entity was last updated by.\n"
                    },
                    "valid": {
                        "type": "string",
                        "description": "Flag to indicate if the current content of the cloud template is valid.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "Cloud template version.\n"
                    },
                    "versionChangeLog": {
                        "type": "string",
                        "description": "Cloud template version change log.\n"
                    }
                },
                "type": "object",
                "required": [
                    "blueprintDescription",
                    "blueprintId",
                    "content",
                    "createdAt",
                    "createdBy",
                    "description",
                    "id",
                    "name",
                    "orgId",
                    "projectId",
                    "projectName",
                    "status",
                    "updatedAt",
                    "updatedBy",
                    "valid",
                    "version",
                    "versionChangeLog"
                ]
            }
        },
        "vra:catalog/getItem:getItem": {
            "description": "This data source provides information about a catalog item in vRA.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\n\nThis is an example of how to get a vRA catalog item by its name.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst this = vra.catalog.getItem({\n    name: _var.catalog_item_name,\n    expandVersions: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.catalog.get_item(name=var[\"catalog_item_name\"],\n    expand_versions=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Catalog.GetItem.Invoke(new()\n    {\n        Name = @var.Catalog_item_name,\n        ExpandVersions = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/catalog\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/catalog\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := catalog.GetItem(ctx, \u0026catalog.GetItemArgs{\n\t\t\tName:           pulumi.StringRef(_var.Catalog_item_name),\n\t\t\tExpandVersions: pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.catalog.CatalogFunctions;\nimport com.pulumi.vra.catalog.inputs.GetItemArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = CatalogFunctions.getItem(GetItemArgs.builder()\n            .name(var_.catalog_item_name())\n            .expandVersions(true)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:catalog:getItem\n      Arguments:\n        name: ${var.catalog_item_name}\n        expandVersions: true\n```\n\nThis is an example of how to get a vRA catalog item by its id.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst this = vra.catalog.getItem({\n    id: _var.catalog_item_id,\n    expandVersions: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.catalog.get_item(id=var[\"catalog_item_id\"],\n    expand_versions=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Catalog.GetItem.Invoke(new()\n    {\n        Id = @var.Catalog_item_id,\n        ExpandVersions = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/catalog\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/catalog\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := catalog.GetItem(ctx, \u0026catalog.GetItemArgs{\n\t\t\tId:             pulumi.StringRef(_var.Catalog_item_id),\n\t\t\tExpandVersions: pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.catalog.CatalogFunctions;\nimport com.pulumi.vra.catalog.inputs.GetItemArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = CatalogFunctions.getItem(GetItemArgs.builder()\n            .id(var_.catalog_item_id())\n            .expandVersions(true)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:catalog:getItem\n      Arguments:\n        id: ${var.catalog_item_id}\n        expandVersions: true\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getItem.\n",
                "properties": {
                    "expandProjects": {
                        "type": "boolean",
                        "description": "Flag to indicate whether to expand detailed project data for the catalog item.\n"
                    },
                    "expandVersions": {
                        "type": "boolean",
                        "description": "Flag to indicate whether to expand detailed versions of the catalog item.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The id of catalog item. One of `id`, or `name` must be provided.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the catalog item. One of `id`, or `name` must be provided.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getItem.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Date-time when catalog item version was created at.\n"
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "The user the entity was created by.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A human-friendly description.\n"
                    },
                    "expandProjects": {
                        "type": "boolean"
                    },
                    "expandVersions": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "Id of the catalog item version.\n"
                    },
                    "lastUpdatedAt": {
                        "type": "string",
                        "description": "Date-time when the entity was last updated.\n"
                    },
                    "lastUpdatedBy": {
                        "type": "string",
                        "description": "The user the entity was last updated by.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the entity.\n"
                    },
                    "projectIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of associated project IDs that can be used for requesting this catalog item.\n"
                    },
                    "projects": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:catalog/getItemProject:getItemProject"
                        },
                        "description": "List of associated projects that can be used for requesting this catalog item.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "Json schema describing request parameters, a simplified version of http://json-schema.org/latest/json-schema-validation.html#rfc.section.5\n"
                    },
                    "sourceId": {
                        "type": "string",
                        "description": "LibraryItem source ID.\n"
                    },
                    "sourceName": {
                        "type": "string",
                        "description": "LibraryItem source name.\n"
                    },
                    "types": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:catalog/getItemType:getItemType"
                        }
                    },
                    "versions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:catalog/getItemVersion:getItemVersion"
                        },
                        "description": "Catalog item versions.\n"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "createdBy",
                    "description",
                    "id",
                    "lastUpdatedAt",
                    "lastUpdatedBy",
                    "name",
                    "projectIds",
                    "projects",
                    "schema",
                    "sourceId",
                    "sourceName",
                    "types",
                    "versions"
                ]
            }
        },
        "vra:catalog/getItemEntitlement:getItemEntitlement": {
            "description": "This data source provides information about a catalog item entitlement in vRA.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\n\nThis is an example of how to get a vRA catalog item entitlement by its id:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst this = vra.catalog.getItemEntitlement({\n    id: _var.catalog_item_entitlement_id,\n    projectId: _var.project_id,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.catalog.get_item_entitlement(id=var[\"catalog_item_entitlement_id\"],\n    project_id=var[\"project_id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Catalog.GetItemEntitlement.Invoke(new()\n    {\n        Id = @var.Catalog_item_entitlement_id,\n        ProjectId = @var.Project_id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/catalog\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/catalog\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := catalog.LookupItemEntitlement(ctx, \u0026catalog.LookupItemEntitlementArgs{\n\t\t\tId:        pulumi.StringRef(_var.Catalog_item_entitlement_id),\n\t\t\tProjectId: _var.Project_id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.catalog.CatalogFunctions;\nimport com.pulumi.vra.catalog.inputs.GetItemEntitlementArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = CatalogFunctions.getItemEntitlement(GetItemEntitlementArgs.builder()\n            .id(var_.catalog_item_entitlement_id())\n            .projectId(var_.project_id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:catalog:getItemEntitlement\n      Arguments:\n        id: ${var.catalog_item_entitlement_id}\n        projectId: ${var.project_id}\n```\n\nThis is an example of how to get a vRA catalog item entitlement by its catalog item id:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst this = vra.catalog.getItemEntitlement({\n    catalogItemId: _var.catalog_item_id,\n    projectId: _var.project_id,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.catalog.get_item_entitlement(catalog_item_id=var[\"catalog_item_id\"],\n    project_id=var[\"project_id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Catalog.GetItemEntitlement.Invoke(new()\n    {\n        CatalogItemId = @var.Catalog_item_id,\n        ProjectId = @var.Project_id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/catalog\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/catalog\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := catalog.LookupItemEntitlement(ctx, \u0026catalog.LookupItemEntitlementArgs{\n\t\t\tCatalogItemId: pulumi.StringRef(_var.Catalog_item_id),\n\t\t\tProjectId:     _var.Project_id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.catalog.CatalogFunctions;\nimport com.pulumi.vra.catalog.inputs.GetItemEntitlementArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = CatalogFunctions.getItemEntitlement(GetItemEntitlementArgs.builder()\n            .catalogItemId(var_.catalog_item_id())\n            .projectId(var_.project_id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:catalog:getItemEntitlement\n      Arguments:\n        catalogItemId: ${var.catalog_item_id}\n        projectId: ${var.project_id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getItemEntitlement.\n",
                "properties": {
                    "catalogItemId": {
                        "type": "string",
                        "description": "The id of the catalog item to find the entitlement. One of `catalog_item_id` or `id` must be provided.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The id of entitlement. One of `catalog_item_id` or `id` must be provided.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The id of the project that this entitlement belongs to.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getItemEntitlement.\n",
                "properties": {
                    "catalogItemId": {
                        "type": "string"
                    },
                    "definitions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:catalog/getItemEntitlementDefinition:getItemEntitlementDefinition"
                        },
                        "description": "Represents a catalog item that is linked to a project via an entitlement.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Id of the catalog item.\n"
                    },
                    "projectId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "definitions",
                    "projectId"
                ]
            }
        },
        "vra:catalog/getSourceBlueprint:getSourceBlueprint": {
            "description": "This data source provides information about a catalog source of type cloud template (blueprint) in vRA.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\n\nThis is an example of how to get a vRA cloud template catalog source by its name.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst this = vra.catalog.getSourceBlueprint({\n    name: _var.catalog_source_name,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.catalog.get_source_blueprint(name=var[\"catalog_source_name\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Catalog.GetSourceBlueprint.Invoke(new()\n    {\n        Name = @var.Catalog_source_name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/catalog\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/catalog\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := catalog.LookupSourceBlueprint(ctx, \u0026catalog.LookupSourceBlueprintArgs{\n\t\t\tName: pulumi.StringRef(_var.Catalog_source_name),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.catalog.CatalogFunctions;\nimport com.pulumi.vra.catalog.inputs.GetSourceBlueprintArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = CatalogFunctions.getSourceBlueprint(GetSourceBlueprintArgs.builder()\n            .name(var_.catalog_source_name())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:catalog:getSourceBlueprint\n      Arguments:\n        name: ${var.catalog_source_name}\n```\n\nThis is an example of how to get a vRA cloud template catalog source by its id.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst this = vra.catalog.getSourceBlueprint({\n    id: _var.catalog_source_id,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.catalog.get_source_blueprint(id=var[\"catalog_source_id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Catalog.GetSourceBlueprint.Invoke(new()\n    {\n        Id = @var.Catalog_source_id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/catalog\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/catalog\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := catalog.LookupSourceBlueprint(ctx, \u0026catalog.LookupSourceBlueprintArgs{\n\t\t\tId: pulumi.StringRef(_var.Catalog_source_id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.catalog.CatalogFunctions;\nimport com.pulumi.vra.catalog.inputs.GetSourceBlueprintArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = CatalogFunctions.getSourceBlueprint(GetSourceBlueprintArgs.builder()\n            .id(var_.catalog_source_id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:catalog:getSourceBlueprint\n      Arguments:\n        id: ${var.catalog_source_id}\n```\n\nThis is an example of how to get a vRA cloud template catalog source by the project id it is associated with.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst this = vra.catalog.getSourceBlueprint({\n    projectId: _var.project_id,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.catalog.get_source_blueprint(project_id=var[\"project_id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Catalog.GetSourceBlueprint.Invoke(new()\n    {\n        ProjectId = @var.Project_id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/catalog\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/catalog\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := catalog.LookupSourceBlueprint(ctx, \u0026catalog.LookupSourceBlueprintArgs{\n\t\t\tProjectId: pulumi.StringRef(_var.Project_id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.catalog.CatalogFunctions;\nimport com.pulumi.vra.catalog.inputs.GetSourceBlueprintArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = CatalogFunctions.getSourceBlueprint(GetSourceBlueprintArgs.builder()\n            .projectId(var_.project_id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:catalog:getSourceBlueprint\n      Arguments:\n        projectId: ${var.project_id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceBlueprint.\n",
                "properties": {
                    "config": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Custom configuration of the catalog source as a map of key values.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Catalog source description.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The id of catalog source. One of `id`, `name` or `project_id`  must be provided.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the catalog source. One of `id`, `name` or `project_id` must be provided.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The id of the project.  One of `id`, `name` or `project_id` must be provided.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSourceBlueprint.\n",
                "properties": {
                    "config": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Custom configuration of the catalog source as a map of key values.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date when the entity was created. The date is in ISO 6801 and UTC.\n"
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "The user the entity was created by.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Catalog source description.\n"
                    },
                    "global": {
                        "type": "boolean",
                        "description": "A flag indicating that all the items can be requested across all projects.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "itemsFound": {
                        "type": "string",
                        "description": "Number of items found in the catalog source.\n"
                    },
                    "itemsImported": {
                        "type": "string",
                        "description": "Number of items imported from the catalog source.\n"
                    },
                    "lastImportCompletedAt": {
                        "type": "string",
                        "description": "Time at which the last import was completed at.\n"
                    },
                    "lastImportErrors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of errors seen at last time the catalog source is imported.\n"
                    },
                    "lastImportStartedAt": {
                        "type": "string",
                        "description": "Time at which the last import was started at.\n"
                    },
                    "lastUpdatedBy": {
                        "type": "string",
                        "description": "The user that last updated the catalog source.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "typeId": {
                        "type": "string",
                        "description": "Type of catalog source. Example: `blueprint`, `CFT`, etc.\n"
                    }
                },
                "type": "object",
                "required": [
                    "config",
                    "createdAt",
                    "createdBy",
                    "global",
                    "itemsFound",
                    "itemsImported",
                    "lastImportCompletedAt",
                    "lastImportErrors",
                    "lastImportStartedAt",
                    "lastUpdatedBy",
                    "name",
                    "projectId",
                    "typeId"
                ]
            }
        },
        "vra:catalog/getSourceEntitlement:getSourceEntitlement": {
            "description": "This data source provides information about a catalog source entitlement in vRA.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\n\nThis is an example of how to get a vRA catalog source entitlement by its id:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst this = vra.catalog.getSourceEntitlement({\n    id: _var.catalog_source_entitlement_id,\n    projectId: _var.project_id,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.catalog.get_source_entitlement(id=var[\"catalog_source_entitlement_id\"],\n    project_id=var[\"project_id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Catalog.GetSourceEntitlement.Invoke(new()\n    {\n        Id = @var.Catalog_source_entitlement_id,\n        ProjectId = @var.Project_id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/catalog\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/catalog\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := catalog.LookupSourceEntitlement(ctx, \u0026catalog.LookupSourceEntitlementArgs{\n\t\t\tId:        pulumi.StringRef(_var.Catalog_source_entitlement_id),\n\t\t\tProjectId: _var.Project_id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.catalog.CatalogFunctions;\nimport com.pulumi.vra.catalog.inputs.GetSourceEntitlementArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = CatalogFunctions.getSourceEntitlement(GetSourceEntitlementArgs.builder()\n            .id(var_.catalog_source_entitlement_id())\n            .projectId(var_.project_id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:catalog:getSourceEntitlement\n      Arguments:\n        id: ${var.catalog_source_entitlement_id}\n        projectId: ${var.project_id}\n```\n\nThis is an example of how to get a vRA catalog source entitlement by its catalog source id:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst this = vra.catalog.getSourceEntitlement({\n    catalogSourceId: _var.catalog_source_id,\n    projectId: _var.project_id,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.catalog.get_source_entitlement(catalog_source_id=var[\"catalog_source_id\"],\n    project_id=var[\"project_id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Catalog.GetSourceEntitlement.Invoke(new()\n    {\n        CatalogSourceId = @var.Catalog_source_id,\n        ProjectId = @var.Project_id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/catalog\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/catalog\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := catalog.LookupSourceEntitlement(ctx, \u0026catalog.LookupSourceEntitlementArgs{\n\t\t\tCatalogSourceId: pulumi.StringRef(_var.Catalog_source_id),\n\t\t\tProjectId:       _var.Project_id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.catalog.CatalogFunctions;\nimport com.pulumi.vra.catalog.inputs.GetSourceEntitlementArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = CatalogFunctions.getSourceEntitlement(GetSourceEntitlementArgs.builder()\n            .catalogSourceId(var_.catalog_source_id())\n            .projectId(var_.project_id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:catalog:getSourceEntitlement\n      Arguments:\n        catalogSourceId: ${var.catalog_source_id}\n        projectId: ${var.project_id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSourceEntitlement.\n",
                "properties": {
                    "catalogSourceId": {
                        "type": "string",
                        "description": "The id of the catalog source to find the entitlement. One of `catalog_source_id` or `id` must be provided.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The id of entitlement. One of `catalog_source_id` or `id` must be provided.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The id of the project that this entitlement belongs to.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSourceEntitlement.\n",
                "properties": {
                    "catalogSourceId": {
                        "type": "string"
                    },
                    "definitions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:catalog/getSourceEntitlementDefinition:getSourceEntitlementDefinition"
                        },
                        "description": "Represents a catalog source that is linked to a project via an entitlement.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Id of the catalog source.\n"
                    },
                    "projectId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "definitions",
                    "projectId"
                ]
            }
        },
        "vra:cloudaccount/getAws:getAws": {
            "description": "## ---layout: \"vra\"\n\npage_title: \"VMware vRealize Automation: vra.cloudaccount.Aws\"\ndescription: |-\n  Provides a data lookup for vra_cloud_account_aws.\n---\n\n# Data Source: vra\\_cloud\\_account\\_aws\n\nProvides a VMware vRA vra.cloudaccount.Aws data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\n\n**AWS cloud account data source by its id:**\n\nThis is an example of how to read the cloud account data source using its id.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst this = vra.cloudaccount.getAws({\n    id: _var.vra_cloud_account_aws_id,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.cloudaccount.get_aws(id=var[\"vra_cloud_account_aws_id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Cloudaccount.GetAws.Invoke(new()\n    {\n        Id = @var.Vra_cloud_account_aws_id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/cloudaccount\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/cloudaccount\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudaccount.LookupAws(ctx, \u0026cloudaccount.LookupAwsArgs{\n\t\t\tId: pulumi.StringRef(_var.Vra_cloud_account_aws_id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.cloudaccount.CloudaccountFunctions;\nimport com.pulumi.vra.cloudaccount.inputs.GetAwsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = CloudaccountFunctions.getAws(GetAwsArgs.builder()\n            .id(var_.vra_cloud_account_aws_id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:cloudaccount:getAws\n      Arguments:\n        id: ${var.vra_cloud_account_aws_id}\n```\n\n**AWS cloud account data source by its name:**\n\nThis is an example of how to read the cloud account data source using its name.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst this = vra.cloudaccount.getAws({\n    name: _var.vra_cloud_account_aws_name,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.cloudaccount.get_aws(name=var[\"vra_cloud_account_aws_name\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Cloudaccount.GetAws.Invoke(new()\n    {\n        Name = @var.Vra_cloud_account_aws_name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/cloudaccount\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/cloudaccount\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudaccount.LookupAws(ctx, \u0026cloudaccount.LookupAwsArgs{\n\t\t\tName: pulumi.StringRef(_var.Vra_cloud_account_aws_name),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.cloudaccount.CloudaccountFunctions;\nimport com.pulumi.vra.cloudaccount.inputs.GetAwsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = CloudaccountFunctions.getAws(GetAwsArgs.builder()\n            .name(var_.vra_cloud_account_aws_name())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:cloudaccount:getAws\n      Arguments:\n        name: ${var.vra_cloud_account_aws_name}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAws.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of this AWS cloud account.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of this AWS cloud account.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:cloudaccount/getAwsTag:getAwsTag"
                        },
                        "description": "A set of tag keys and optional values that were set on this resource.\nexample:[ { \"key\" : \"vmware\", \"value\": \"provider\" } ]\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAws.\n",
                "properties": {
                    "accessKey": {
                        "type": "string",
                        "description": "Access key id for Aws.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date when the entity was created. The date is in ISO 6801 and UTC.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A human-friendly description.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:cloudaccount/getAwsLink:getAwsLink"
                        },
                        "description": "HATEOAS of the entity.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The id of the organization this entity belongs to.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Email of the user that owns the entity.\n"
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of region names that are enabled for this account.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:cloudaccount/getAwsTag:getAwsTag"
                        },
                        "description": "A set of tag keys and optional values that were set on this resource.\nexample:[ { \"key\" : \"vmware\", \"value\": \"provider\" } ]\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accessKey",
                    "createdAt",
                    "description",
                    "id",
                    "links",
                    "name",
                    "orgId",
                    "owner",
                    "regions",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "vra:cloudaccount/getAzure:getAzure": {
            "description": "Provides a VMware vRA vra.cloudaccount.Azure data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\n\n**Azure cloud account data source by its id:**\n\nThis is an example of how to read the cloud account data source using its id.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst this = vra.cloudaccount.getAzure({\n    id: _var.vra_cloud_account_azure_id,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.cloudaccount.get_azure(id=var[\"vra_cloud_account_azure_id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Cloudaccount.GetAzure.Invoke(new()\n    {\n        Id = @var.Vra_cloud_account_azure_id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/cloudaccount\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/cloudaccount\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudaccount.LookupAzure(ctx, \u0026cloudaccount.LookupAzureArgs{\n\t\t\tId: pulumi.StringRef(_var.Vra_cloud_account_azure_id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.cloudaccount.CloudaccountFunctions;\nimport com.pulumi.vra.cloudaccount.inputs.GetAzureArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = CloudaccountFunctions.getAzure(GetAzureArgs.builder()\n            .id(var_.vra_cloud_account_azure_id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:cloudaccount:getAzure\n      Arguments:\n        id: ${var.vra_cloud_account_azure_id}\n```\n\n**Azure cloud account data source by its name:**\n\nThis is an example of how to read the cloud account data source using its name.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst this = vra.cloudaccount.getAzure({\n    name: _var.vra_cloud_account_azure_name,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.cloudaccount.get_azure(name=var[\"vra_cloud_account_azure_name\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Cloudaccount.GetAzure.Invoke(new()\n    {\n        Name = @var.Vra_cloud_account_azure_name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/cloudaccount\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/cloudaccount\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudaccount.LookupAzure(ctx, \u0026cloudaccount.LookupAzureArgs{\n\t\t\tName: pulumi.StringRef(_var.Vra_cloud_account_azure_name),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.cloudaccount.CloudaccountFunctions;\nimport com.pulumi.vra.cloudaccount.inputs.GetAzureArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = CloudaccountFunctions.getAzure(GetAzureArgs.builder()\n            .name(var_.vra_cloud_account_azure_name())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:cloudaccount:getAzure\n      Arguments:\n        name: ${var.vra_cloud_account_azure_name}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAzure.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of this Azure cloud account.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of this Azure cloud account.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:cloudaccount/getAzureTag:getAzureTag"
                        },
                        "description": "A set of tag keys and optional values that were set on this resource.\nexample:[ { \"key\" : \"vmware\", \"value\": \"provider\" } ]\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAzure.\n",
                "properties": {
                    "applicationId": {
                        "type": "string",
                        "description": "Azure Client Application ID.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date when the entity was created. The date is in ISO 6801 and UTC.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A human-friendly description.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:cloudaccount/getAzureLink:getAzureLink"
                        },
                        "description": "HATEOAS of the entity.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The id of the organization this entity belongs to.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Email of the user that owns the entity.\n"
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of region names that are enabled for this account.\n"
                    },
                    "subscriptionId": {
                        "type": "string",
                        "description": "Azure Subscription ID.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:cloudaccount/getAzureTag:getAzureTag"
                        },
                        "description": "A set of tag keys and optional values that were set on this resource.\nexample:[ { \"key\" : \"vmware\", \"value\": \"provider\" } ]\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "Azure Tenant ID.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                    }
                },
                "type": "object",
                "required": [
                    "applicationId",
                    "createdAt",
                    "description",
                    "id",
                    "links",
                    "name",
                    "orgId",
                    "owner",
                    "regions",
                    "subscriptionId",
                    "tags",
                    "tenantId",
                    "updatedAt"
                ]
            }
        },
        "vra:cloudaccount/getGcp:getGcp": {
            "description": "Provides a VMware vRA vra.cloudaccount.Gcp data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\n\n**GCP cloud account data source by its id:**\n\nThis is an example of how to create an GCP cloud account resource and read it as a data source using its id.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst this = vra.cloudaccount.getGcp({\n    id: _var.vra_cloud_account_gcp_id,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.cloudaccount.get_gcp(id=var[\"vra_cloud_account_gcp_id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Cloudaccount.GetGcp.Invoke(new()\n    {\n        Id = @var.Vra_cloud_account_gcp_id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/cloudaccount\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/cloudaccount\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudaccount.LookupGcp(ctx, \u0026cloudaccount.LookupGcpArgs{\n\t\t\tId: pulumi.StringRef(_var.Vra_cloud_account_gcp_id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.cloudaccount.CloudaccountFunctions;\nimport com.pulumi.vra.cloudaccount.inputs.GetGcpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = CloudaccountFunctions.getGcp(GetGcpArgs.builder()\n            .id(var_.vra_cloud_account_gcp_id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:cloudaccount:getGcp\n      Arguments:\n        id: ${var.vra_cloud_account_gcp_id}\n```\n\n**GCP cloud account data source by its name:**\n\nThis is an example of how to read the cloud account data source using its name.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst this = vra.cloudaccount.getGcp({\n    name: _var.vra_cloud_account_gcp_name,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.cloudaccount.get_gcp(name=var[\"vra_cloud_account_gcp_name\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Cloudaccount.GetGcp.Invoke(new()\n    {\n        Name = @var.Vra_cloud_account_gcp_name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/cloudaccount\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/cloudaccount\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudaccount.LookupGcp(ctx, \u0026cloudaccount.LookupGcpArgs{\n\t\t\tName: pulumi.StringRef(_var.Vra_cloud_account_gcp_name),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.cloudaccount.CloudaccountFunctions;\nimport com.pulumi.vra.cloudaccount.inputs.GetGcpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = CloudaccountFunctions.getGcp(GetGcpArgs.builder()\n            .name(var_.vra_cloud_account_gcp_name())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:cloudaccount:getGcp\n      Arguments:\n        name: ${var.vra_cloud_account_gcp_name}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getGcp.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of this GCP cloud account.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of this GCP cloud account.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:cloudaccount/getGcpTag:getGcpTag"
                        },
                        "description": "A set of tag keys and optional values that were set on this resource.\nexample:[ { \"key\" : \"vmware\", \"value\": \"provider\" } ]\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getGcp.\n",
                "properties": {
                    "clientEmail": {
                        "type": "string",
                        "description": "GCP Client email.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date when the entity was created. The date is in ISO 6801 and UTC.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A human-friendly description.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:cloudaccount/getGcpLink:getGcpLink"
                        },
                        "description": "HATEOAS of the entity.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The id of the organization this entity belongs to.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Email of the user that owns the entity.\n"
                    },
                    "privateKeyId": {
                        "type": "string",
                        "description": "GCP Private key ID.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "GCP Project ID.\n"
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of region names that are enabled for this account.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:cloudaccount/getGcpTag:getGcpTag"
                        },
                        "description": "A set of tag keys and optional values that were set on this resource.\nexample:[ { \"key\" : \"vmware\", \"value\": \"provider\" } ]\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                    }
                },
                "type": "object",
                "required": [
                    "clientEmail",
                    "createdAt",
                    "description",
                    "id",
                    "links",
                    "name",
                    "orgId",
                    "owner",
                    "privateKeyId",
                    "projectId",
                    "regions",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "vra:cloudaccount/getNsxt:getNsxt": {
            "description": "Provides a VMware vRA vra.cloudaccount.Nsxt data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\n\n**NSX-T cloud account data source by its id:**\n\nThis is an example of how to read the cloud account data source using its id.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst this = vra.cloudaccount.getNsxt({\n    id: _var.vra_cloud_account_nsxt_id,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.cloudaccount.get_nsxt(id=var[\"vra_cloud_account_nsxt_id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Cloudaccount.GetNsxt.Invoke(new()\n    {\n        Id = @var.Vra_cloud_account_nsxt_id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/cloudaccount\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/cloudaccount\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudaccount.LookupNsxt(ctx, \u0026cloudaccount.LookupNsxtArgs{\n\t\t\tId: pulumi.StringRef(_var.Vra_cloud_account_nsxt_id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.cloudaccount.CloudaccountFunctions;\nimport com.pulumi.vra.cloudaccount.inputs.GetNsxtArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = CloudaccountFunctions.getNsxt(GetNsxtArgs.builder()\n            .id(var_.vra_cloud_account_nsxt_id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:cloudaccount:getNsxt\n      Arguments:\n        id: ${var.vra_cloud_account_nsxt_id}\n```\n\n**NSX-T cloud account data source by its name:**\n\nThis is an example of how to read the cloud account data source using its name.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst this = vra.cloudaccount.getNsxt({\n    name: _var.vra_cloud_account_nsxt_name,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.cloudaccount.get_nsxt(name=var[\"vra_cloud_account_nsxt_name\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Cloudaccount.GetNsxt.Invoke(new()\n    {\n        Name = @var.Vra_cloud_account_nsxt_name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/cloudaccount\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/cloudaccount\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudaccount.LookupNsxt(ctx, \u0026cloudaccount.LookupNsxtArgs{\n\t\t\tName: pulumi.StringRef(_var.Vra_cloud_account_nsxt_name),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.cloudaccount.CloudaccountFunctions;\nimport com.pulumi.vra.cloudaccount.inputs.GetNsxtArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = CloudaccountFunctions.getNsxt(GetNsxtArgs.builder()\n            .name(var_.vra_cloud_account_nsxt_name())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:cloudaccount:getNsxt\n      Arguments:\n        name: ${var.vra_cloud_account_nsxt_name}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getNsxt.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of this NSX-T cloud account.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of this NSX-T cloud account.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:cloudaccount/getNsxtTag:getNsxtTag"
                        },
                        "description": "A set of tag keys and optional values that were set on this resource.\nexample:[ { \"key\" : \"vmware\", \"value\": \"provider\" } ]\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNsxt.\n",
                "properties": {
                    "associatedCloudAccountIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Cloud accounts associated with this cloud account.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date when the entity was created. The date is in ISO 6801 and UTC.\n"
                    },
                    "dcId": {
                        "type": "string",
                        "description": "Identifier of a data collector vm deployed in the on premise infrastructure.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A human-friendly description.\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "Host name for the NSX-T cloud account.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:cloudaccount/getNsxtLink:getNsxtLink"
                        },
                        "description": "HATEOAS of the entity.\n"
                    },
                    "managerMode": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The id of the organization this entity belongs to.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Email of the user that owns the entity.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:cloudaccount/getNsxtTag:getNsxtTag"
                        },
                        "description": "A set of tag keys and optional values that were set on this resource.\nexample:[ { \"key\" : \"vmware\", \"value\": \"provider\" } ]\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username to authenticate with the cloud account.\n"
                    }
                },
                "type": "object",
                "required": [
                    "associatedCloudAccountIds",
                    "createdAt",
                    "dcId",
                    "description",
                    "hostname",
                    "id",
                    "links",
                    "managerMode",
                    "name",
                    "orgId",
                    "owner",
                    "tags",
                    "updatedAt",
                    "username"
                ]
            }
        },
        "vra:cloudaccount/getNsxv:getNsxv": {
            "description": "Provides a VMware vRA vra.cloudaccount.Nsxv data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\n\n**NSX-V cloud account data source by its id:**\n\nThis is an example of how to read the cloud account data source using its id.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst this = vra.cloudaccount.getNsxv({\n    id: _var.vra_cloud_account_nsxv_id,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.cloudaccount.get_nsxv(id=var[\"vra_cloud_account_nsxv_id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Cloudaccount.GetNsxv.Invoke(new()\n    {\n        Id = @var.Vra_cloud_account_nsxv_id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/cloudaccount\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/cloudaccount\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudaccount.LookupNsxv(ctx, \u0026cloudaccount.LookupNsxvArgs{\n\t\t\tId: pulumi.StringRef(_var.Vra_cloud_account_nsxv_id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.cloudaccount.CloudaccountFunctions;\nimport com.pulumi.vra.cloudaccount.inputs.GetNsxvArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = CloudaccountFunctions.getNsxv(GetNsxvArgs.builder()\n            .id(var_.vra_cloud_account_nsxv_id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:cloudaccount:getNsxv\n      Arguments:\n        id: ${var.vra_cloud_account_nsxv_id}\n```\n\n**NSX-V cloud account data source by its name:**\n\nThis is an example of how to read the cloud account data source using its name.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst this = vra.cloudaccount.getNsxv({\n    name: _var.vra_cloud_account_nsxv_name,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.cloudaccount.get_nsxv(name=var[\"vra_cloud_account_nsxv_name\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Cloudaccount.GetNsxv.Invoke(new()\n    {\n        Name = @var.Vra_cloud_account_nsxv_name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/cloudaccount\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/cloudaccount\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudaccount.LookupNsxv(ctx, \u0026cloudaccount.LookupNsxvArgs{\n\t\t\tName: pulumi.StringRef(_var.Vra_cloud_account_nsxv_name),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.cloudaccount.CloudaccountFunctions;\nimport com.pulumi.vra.cloudaccount.inputs.GetNsxvArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = CloudaccountFunctions.getNsxv(GetNsxvArgs.builder()\n            .name(var_.vra_cloud_account_nsxv_name())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:cloudaccount:getNsxv\n      Arguments:\n        name: ${var.vra_cloud_account_nsxv_name}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getNsxv.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of this NSX-V cloud account.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of this NSX-V cloud account.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:cloudaccount/getNsxvTag:getNsxvTag"
                        },
                        "description": "A set of tag keys and optional values that were set on this resource.\nexample:[ { \"key\" : \"vmware\", \"value\": \"provider\" } ]\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNsxv.\n",
                "properties": {
                    "associatedCloudAccountIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Cloud accounts associated with this cloud account.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date when the entity was created. The date is in ISO 6801 and UTC.\n"
                    },
                    "dcId": {
                        "type": "string",
                        "description": "Identifier of a data collector vm deployed in the on premise infrastructure.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A human-friendly description.\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "Host name for the NSX-V cloud account.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:cloudaccount/getNsxvLink:getNsxvLink"
                        },
                        "description": "HATEOAS of the entity.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The id of the organization this entity belongs to.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Email of the user that owns the entity.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:cloudaccount/getNsxvTag:getNsxvTag"
                        },
                        "description": "A set of tag keys and optional values that were set on this resource.\nexample:[ { \"key\" : \"vmware\", \"value\": \"provider\" } ]\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username to authenticate with the cloud account.\n"
                    }
                },
                "type": "object",
                "required": [
                    "associatedCloudAccountIds",
                    "createdAt",
                    "dcId",
                    "description",
                    "hostname",
                    "id",
                    "links",
                    "name",
                    "orgId",
                    "owner",
                    "tags",
                    "updatedAt",
                    "username"
                ]
            }
        },
        "vra:cloudaccount/getVSphere:getVSphere": {
            "description": "Provides a VMware vRA vra.cloudaccount.VSphere data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\n\n**vSphere cloud account data source by its id:**\n\nThis is an example of how to read the cloud account data source using its id.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst this = vra.cloudaccount.getVSphere({\n    id: _var.vra_cloud_account_vsphere_id,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.cloudaccount.get_v_sphere(id=var[\"vra_cloud_account_vsphere_id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Cloudaccount.GetVSphere.Invoke(new()\n    {\n        Id = @var.Vra_cloud_account_vsphere_id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/cloudaccount\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/cloudaccount\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudaccount.LookupVSphere(ctx, \u0026cloudaccount.LookupVSphereArgs{\n\t\t\tId: pulumi.StringRef(_var.Vra_cloud_account_vsphere_id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.cloudaccount.CloudaccountFunctions;\nimport com.pulumi.vra.cloudaccount.inputs.GetVSphereArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = CloudaccountFunctions.getVSphere(GetVSphereArgs.builder()\n            .id(var_.vra_cloud_account_vsphere_id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:cloudaccount:getVSphere\n      Arguments:\n        id: ${var.vra_cloud_account_vsphere_id}\n```\n\n**vSphere cloud account data source by its name:**\n\nThis is an example of how to read the cloud account data source using its name.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst this = vra.cloudaccount.getVSphere({\n    name: _var.vra_cloud_account_vsphere_name,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.cloudaccount.get_v_sphere(name=var[\"vra_cloud_account_vsphere_name\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Cloudaccount.GetVSphere.Invoke(new()\n    {\n        Name = @var.Vra_cloud_account_vsphere_name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/cloudaccount\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/cloudaccount\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudaccount.LookupVSphere(ctx, \u0026cloudaccount.LookupVSphereArgs{\n\t\t\tName: pulumi.StringRef(_var.Vra_cloud_account_vsphere_name),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.cloudaccount.CloudaccountFunctions;\nimport com.pulumi.vra.cloudaccount.inputs.GetVSphereArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = CloudaccountFunctions.getVSphere(GetVSphereArgs.builder()\n            .name(var_.vra_cloud_account_vsphere_name())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:cloudaccount:getVSphere\n      Arguments:\n        name: ${var.vra_cloud_account_vsphere_name}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getVSphere.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of this vSphere cloud account.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of this vSphere cloud account.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:cloudaccount/getVSphereTag:getVSphereTag"
                        },
                        "description": "A set of tag keys and optional values that were set on this resource.\nexample:[ { \"key\" : \"vmware\", \"value\": \"provider\" } ]\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVSphere.\n",
                "properties": {
                    "associatedCloudAccountIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Cloud accounts associated with this cloud account.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date when the entity was created. The date is in ISO 6801 and UTC.\n"
                    },
                    "dcid": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "A human-friendly description.\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "The IP address or FQDN of the vCenter Server. The cloud proxy belongs on this vCenter.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:cloudaccount/getVSphereLink:getVSphereLink"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The id of the organization this entity belongs to.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Email of the user that owns the entity.\n"
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of region IDs that are enabled for this account.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:cloudaccount/getVSphereTag:getVSphereTag"
                        },
                        "description": "A set of tag keys and optional values that were set on this resource.\nexample:[ { \"key\" : \"vmware\", \"value\": \"provider\" } ]\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The vSphere username to authenticate the vsphere account.\n"
                    }
                },
                "type": "object",
                "required": [
                    "associatedCloudAccountIds",
                    "createdAt",
                    "dcid",
                    "description",
                    "hostname",
                    "id",
                    "links",
                    "name",
                    "orgId",
                    "owner",
                    "regions",
                    "tags",
                    "updatedAt",
                    "username"
                ]
            }
        },
        "vra:cloudaccount/getVmc:getVmc": {
            "description": "Provides a VMware vRA vra.cloudaccount.Vmc data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\n\n**VMC cloud account data source by its id:**\n\nThis is an example of how to read the cloud account data source using its id.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst this = vra.cloudaccount.getVmc({\n    id: _var.vra_cloud_account_vmc_id,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.cloudaccount.get_vmc(id=var[\"vra_cloud_account_vmc_id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Cloudaccount.GetVmc.Invoke(new()\n    {\n        Id = @var.Vra_cloud_account_vmc_id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/cloudaccount\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/cloudaccount\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudaccount.LookupVmc(ctx, \u0026cloudaccount.LookupVmcArgs{\n\t\t\tId: pulumi.StringRef(_var.Vra_cloud_account_vmc_id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.cloudaccount.CloudaccountFunctions;\nimport com.pulumi.vra.cloudaccount.inputs.GetVmcArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = CloudaccountFunctions.getVmc(GetVmcArgs.builder()\n            .id(var_.vra_cloud_account_vmc_id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:cloudaccount:getVmc\n      Arguments:\n        id: ${var.vra_cloud_account_vmc_id}\n```\n\n**vmc cloud account data source by its name:**\n\nThis is an example of how to read the cloud account data source using its name.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst this = vra.cloudaccount.getVmc({\n    name: _var.vra_cloud_account_vmc_name,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.cloudaccount.get_vmc(name=var[\"vra_cloud_account_vmc_name\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Cloudaccount.GetVmc.Invoke(new()\n    {\n        Name = @var.Vra_cloud_account_vmc_name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/cloudaccount\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/cloudaccount\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudaccount.LookupVmc(ctx, \u0026cloudaccount.LookupVmcArgs{\n\t\t\tName: pulumi.StringRef(_var.Vra_cloud_account_vmc_name),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.cloudaccount.CloudaccountFunctions;\nimport com.pulumi.vra.cloudaccount.inputs.GetVmcArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = CloudaccountFunctions.getVmc(GetVmcArgs.builder()\n            .name(var_.vra_cloud_account_vmc_name())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:cloudaccount:getVmc\n      Arguments:\n        name: ${var.vra_cloud_account_vmc_name}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getVmc.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of this vmc cloud account.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of this vmc cloud account.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:cloudaccount/getVmcTag:getVmcTag"
                        },
                        "description": "A set of tag keys and optional values that were set on this resource.\nexample:[ { \"key\" : \"vmware\", \"value\": \"provider\" } ]\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVmc.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Date when the entity was created. The date is in ISO 6801 and UTC.\n"
                    },
                    "dcId": {
                        "type": "string",
                        "description": "Identifier of a data collector vm deployed in the on premise infrastructure. Refer to the data-collector API to create or list data collector.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A human-friendly description.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:cloudaccount/getVmcLink:getVmcLink"
                        },
                        "description": "HATEOAS of the entity.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "nsxHostname": {
                        "type": "string",
                        "description": "The IP address of the NSX Manager server in the specified SDDC / FQDN.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The id of the organization this entity belongs to.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Email of the user that owns the entity.\n"
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of region names that are enabled for this account.\n"
                    },
                    "sddcName": {
                        "type": "string",
                        "description": "Identifier of the on-premise SDDC to be used by this cloud account. Note that NSX-V SDDCs are not supported.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:cloudaccount/getVmcTag:getVmcTag"
                        },
                        "description": "A set of tag keys and optional values that were set on this resource.\nexample:[ { \"key\" : \"vmware\", \"value\": \"provider\" } ]\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                    },
                    "vcenterHostname": {
                        "type": "string",
                        "description": "The IP address or FQDN of the vCenter Server in the specified SDDC. The cloud proxy belongs on this vCenter.\n"
                    },
                    "vcenterUsername": {
                        "type": "string",
                        "description": "vCenter user name for the specified SDDC. The specified user requires CloudAdmin credentials. The user does not require CloudGlobalAdmin credentials.\n"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "dcId",
                    "description",
                    "id",
                    "links",
                    "name",
                    "nsxHostname",
                    "orgId",
                    "owner",
                    "regions",
                    "sddcName",
                    "tags",
                    "updatedAt",
                    "vcenterHostname",
                    "vcenterUsername"
                ]
            }
        },
        "vra:datacollector/getDataCollector:getDataCollector": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\n\nThis is an example of how to lookup a data collector.\n\n**Data collector data source by its name:**\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst this = vra.datacollector.getDataCollector({\n    name: _var.data_collector_name,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.datacollector.get_data_collector(name=var[\"data_collector_name\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Datacollector.GetDataCollector.Invoke(new()\n    {\n        Name = @var.Data_collector_name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/datacollector\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/datacollector\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := datacollector.GetDataCollector(ctx, \u0026datacollector.GetDataCollectorArgs{\n\t\t\tName: _var.Data_collector_name,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.datacollector.DatacollectorFunctions;\nimport com.pulumi.vra.datacollector.inputs.GetDataCollectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = DatacollectorFunctions.getDataCollector(GetDataCollectorArgs.builder()\n            .name(var_.data_collector_name())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:datacollector:getDataCollector\n      Arguments:\n        name: ${var.data_collector_name}\n```\nThe data collector data source supports the following arguments:\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDataCollector.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Data collector name. Example: Datacollector1\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDataCollector.\n",
                "properties": {
                    "hostname": {
                        "type": "string",
                        "description": "Data collector host name. Example: dc1-lnd.mycompany.com\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "IPv4 Address of the data collector VM. Example: 10.0.0.1\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string",
                        "description": "Current status of the data collector. Example: ACTIVE, INACTIVE\n"
                    }
                },
                "type": "object",
                "required": [
                    "hostname",
                    "ipAddress",
                    "name",
                    "status",
                    "id"
                ]
            }
        },
        "vra:deployment/getDeployment:getDeployment": {
            "description": "This data source provides information about a deployment in vRA.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\n\nThis is an example of how to get a vRA deployment by its name.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst this = vra.deployment.getDeployment({\n    name: _var.deployment_name,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.deployment.get_deployment(name=var[\"deployment_name\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Deployment.GetDeployment.Invoke(new()\n    {\n        Name = @var.Deployment_name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/deployment\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/deployment\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := deployment.LookupDeployment(ctx, \u0026deployment.LookupDeploymentArgs{\n\t\t\tName: pulumi.StringRef(_var.Deployment_name),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.deployment.DeploymentFunctions;\nimport com.pulumi.vra.deployment.inputs.GetDeploymentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = DeploymentFunctions.getDeployment(GetDeploymentArgs.builder()\n            .name(var_.deployment_name())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:deployment:getDeployment\n      Arguments:\n        name: ${var.deployment_name}\n```\n\nThis is an example of how to get a vRA cloud template by its id.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst this = vra.deployment.getDeployment({\n    id: _var.deployment_id,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.deployment.get_deployment(id=var[\"deployment_id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Deployment.GetDeployment.Invoke(new()\n    {\n        Id = @var.Deployment_id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/deployment\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/deployment\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := deployment.LookupDeployment(ctx, \u0026deployment.LookupDeploymentArgs{\n\t\t\tId: pulumi.StringRef(_var.Deployment_id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.deployment.DeploymentFunctions;\nimport com.pulumi.vra.deployment.inputs.GetDeploymentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = DeploymentFunctions.getDeployment(GetDeploymentArgs.builder()\n            .id(var_.deployment_id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:deployment:getDeployment\n      Arguments:\n        id: ${var.deployment_id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDeployment.\n",
                "properties": {
                    "blueprintContent": {
                        "type": "string",
                        "description": "vRA Cloud template content. Conflicts with `blueprint_id` and `catalog_item_id`.\n"
                    },
                    "blueprintId": {
                        "type": "string",
                        "description": "Identifier of the requested blueprint in the form ‘UUID:version’.\n"
                    },
                    "blueprintVersion": {
                        "type": "string",
                        "description": "The version of the vRA cloud template to request the deployment. Used only when `blueprint_id` is provided.\n"
                    },
                    "catalogItemId": {
                        "type": "string",
                        "description": "Identifier of the requested catalog item in the form ‘UUID:version’.\n"
                    },
                    "catalogItemVersion": {
                        "type": "string",
                        "description": "The version of the vRA catalog item to request the deployment. Used only when `catalog_item_id` is provided.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Creation time (e.g. date format ‘2019-07-13T23:16:49.310Z’).\n"
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "The user the entity was created by.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of the resource.\n"
                    },
                    "expandLastRequest": {
                        "type": "boolean",
                        "description": "Flag to indicate whether to expand last request on the deployment.\n"
                    },
                    "expandProject": {
                        "type": "boolean",
                        "description": "Flag to indicate whether to expand project information.\n"
                    },
                    "expandResources": {
                        "type": "boolean",
                        "description": "Flag to indicate whether to expand resources in the deployment.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The id of the deployment. One of `id` or `name` must be provided.\n"
                    },
                    "inputs": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "List of request inputs.\n"
                    },
                    "lastUpdatedAt": {
                        "type": "string",
                        "description": "Time at which the deployment was last updated.\n"
                    },
                    "lastUpdatedBy": {
                        "type": "string",
                        "description": "The user that last updated the deployment.\n"
                    },
                    "leaseExpireAt": {
                        "type": "string",
                        "description": "Time at which the deployment lease expires.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the deployment. One of `id` or `name` must be provided.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "The user this deployment belongs to.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The id of the project this deployment belongs to.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Deployment status. Supported values are: `CREATE_SUCCESSFUL`, `CREATE_INPROGRESS`, `CREATE_FAILED`, `UPDATE_SUCCESSFUL`, `UPDATE_INPROGRESS`, `UPDATE_FAILED`, `DELETE_SUCCESSFUL`, `DELETE_INPROGRESS`, `DELETE_FAILED`, `ACTION_SUCCESSFUL`, `ACTION_INPROGRESS`, `ACTION_FAILED`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDeployment.\n",
                "properties": {
                    "blueprintContent": {
                        "type": "string",
                        "description": "vRA Cloud template content. Conflicts with `blueprint_id` and `catalog_item_id`.\n"
                    },
                    "blueprintId": {
                        "type": "string",
                        "description": "Identifier of the requested blueprint in the form ‘UUID:version’.\n"
                    },
                    "blueprintVersion": {
                        "type": "string",
                        "description": "The version of the vRA cloud template to request the deployment. Used only when `blueprint_id` is provided.\n"
                    },
                    "catalogItemId": {
                        "type": "string",
                        "description": "Identifier of the requested catalog item in the form ‘UUID:version’.\n"
                    },
                    "catalogItemVersion": {
                        "type": "string",
                        "description": "The version of the vRA catalog item to request the deployment. Used only when `catalog_item_id` is provided.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Creation time (e.g. date format ‘2019-07-13T23:16:49.310Z’).\n"
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "The user the entity was created by.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of the resource.\n"
                    },
                    "expandLastRequest": {
                        "type": "boolean"
                    },
                    "expandProject": {
                        "type": "boolean"
                    },
                    "expandResources": {
                        "type": "boolean"
                    },
                    "expenses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:deployment/getDeploymentExpense:getDeploymentExpense"
                        },
                        "description": "Expense incurred for this resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "inputs": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "List of request inputs.\n"
                    },
                    "lastRequests": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:deployment/getDeploymentLastRequest:getDeploymentLastRequest"
                        },
                        "description": "Represents deployment requests.\n"
                    },
                    "lastUpdatedAt": {
                        "type": "string",
                        "description": "Time at which the deployment was last updated.\n"
                    },
                    "lastUpdatedBy": {
                        "type": "string",
                        "description": "The user that last updated the deployment.\n"
                    },
                    "leaseExpireAt": {
                        "type": "string",
                        "description": "Time at which the deployment lease expires.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The ID of the organization this deployment belongs to.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "The user this deployment belongs to.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The id of the project this deployment belongs to.\n"
                    },
                    "projects": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:deployment/getDeploymentProject:getDeploymentProject"
                        },
                        "description": "The project this entity belongs to.\n"
                    },
                    "resources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:deployment/getDeploymentResource:getDeploymentResource"
                        },
                        "description": "Expanded resources for the deployment. Content of this property will not be maintained backward compatible.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Deployment status. Supported values are: `CREATE_SUCCESSFUL`, `CREATE_INPROGRESS`, `CREATE_FAILED`, `UPDATE_SUCCESSFUL`, `UPDATE_INPROGRESS`, `UPDATE_FAILED`, `DELETE_SUCCESSFUL`, `DELETE_INPROGRESS`, `DELETE_FAILED`, `ACTION_SUCCESSFUL`, `ACTION_INPROGRESS`, `ACTION_FAILED`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "blueprintContent",
                    "blueprintId",
                    "blueprintVersion",
                    "catalogItemId",
                    "catalogItemVersion",
                    "createdAt",
                    "createdBy",
                    "description",
                    "expenses",
                    "id",
                    "inputs",
                    "lastRequests",
                    "lastUpdatedAt",
                    "lastUpdatedBy",
                    "leaseExpireAt",
                    "name",
                    "orgId",
                    "projects",
                    "projectId",
                    "resources",
                    "status"
                ]
            }
        },
        "vra:fabric/getCompute:getCompute": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\n\nThis is an example of how to lookup fabric computes.\n\n**Fabric compute data source by Id:**\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst this = vra.fabric.getCompute({\n    id: _var.fabric_compute_id,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.fabric.get_compute(id=var[\"fabric_compute_id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Fabric.GetCompute.Invoke(new()\n    {\n        Id = @var.Fabric_compute_id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/fabric\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/fabric\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := fabric.LookupCompute(ctx, \u0026fabric.LookupComputeArgs{\n\t\t\tId: pulumi.StringRef(_var.Fabric_compute_id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.fabric.FabricFunctions;\nimport com.pulumi.vra.fabric.inputs.GetComputeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = FabricFunctions.getCompute(GetComputeArgs.builder()\n            .id(var_.fabric_compute_id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:fabric:getCompute\n      Arguments:\n        id: ${var.fabric_compute_id}\n```\n\n**Fabric compute data source by filter query:**\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\n// Lookup fabric compute using its name\nconst thisCompute = pulumi.output(vra.fabric.getCompute({\n    filter: `name eq '${var_fabric_compute_name}'`,\n}));\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.fabric.get_compute(filter=f\"name eq '{var['fabric_compute_name']}'\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Fabric.GetCompute.Invoke(new()\n    {\n        Filter = $\"name eq '{@var.Fabric_compute_name}'\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/fabric\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/fabric\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := fabric.LookupCompute(ctx, \u0026fabric.LookupComputeArgs{\n\t\t\tFilter: pulumi.StringRef(fmt.Sprintf(\"name eq '%v'\", _var.Fabric_compute_name)),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.fabric.FabricFunctions;\nimport com.pulumi.vra.fabric.inputs.GetComputeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = FabricFunctions.getCompute(GetComputeArgs.builder()\n            .filter(String.format(\"name eq '%s'\", var_.fabric_compute_name()))\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:fabric:getCompute\n      Arguments:\n        filter: name eq '${var.fabric_compute_name}'\n```\n\nA fabric compute data source supports the following arguments:\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getCompute.\n",
                "properties": {
                    "filter": {
                        "type": "string",
                        "description": "Search criteria to narrow down the fabric compute resource instance. Only one of 'id' or 'filter' must be specified.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The id of the fabric compute resource instance. Only one of 'id' or 'filter' must be specified.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:fabric/getComputeTag:getComputeTag"
                        },
                        "description": "A set of tag keys and optional values that were set on this resource:\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCompute.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Date when the entity was created. The date is in ISO 8601 and UTC.\n"
                    },
                    "customProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "A list of key value pair of custom properties for the fabric compute resource.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A human-friendly description.\n"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "The id of the external entity on the provider side.\n"
                    },
                    "externalRegionId": {
                        "type": "string",
                        "description": "The external region id of the fabric compute.\n"
                    },
                    "externalZoneId": {
                        "type": "string",
                        "description": "The external zone id of the fabric compute.\n"
                    },
                    "filter": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "lifecycleState": {
                        "type": "string",
                        "description": "Lifecycle status of the compute instance.\n"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:fabric/getComputeLink:getComputeLink"
                        },
                        "description": "HATEOAS of the entity.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A human-friendly name used as an identifier for the fabric compute resource instance.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The id of the organization this entity belongs to.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Email of the user that owns the entity.\n"
                    },
                    "powerState": {
                        "type": "string",
                        "description": "Power state of fabric compute instance.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:fabric/getComputeTag:getComputeTag"
                        },
                        "description": "A set of tag keys and optional values that were set on this resource:\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the fabric compute instance.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "customProperties",
                    "description",
                    "externalId",
                    "externalRegionId",
                    "externalZoneId",
                    "id",
                    "lifecycleState",
                    "links",
                    "name",
                    "orgId",
                    "owner",
                    "powerState",
                    "tags",
                    "type",
                    "updatedAt"
                ]
            }
        },
        "vra:fabric/getDatastoreVSphere:getDatastoreVSphere": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\nThis is an example of how to lookup vSphere fabric datastores.\n\n**vSphere fabric datastore data source by Id:**\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst this = vra.fabric.getDatastoreVSphere({\n    id: _var.fabric_datastore_vsphere_id,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.fabric.get_datastore_v_sphere(id=var[\"fabric_datastore_vsphere_id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Fabric.GetDatastoreVSphere.Invoke(new()\n    {\n        Id = @var.Fabric_datastore_vsphere_id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/fabric\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/fabric\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := fabric.LookupDatastoreVSphere(ctx, \u0026fabric.LookupDatastoreVSphereArgs{\n\t\t\tId: pulumi.StringRef(_var.Fabric_datastore_vsphere_id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.fabric.FabricFunctions;\nimport com.pulumi.vra.fabric.inputs.GetDatastoreVSphereArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = FabricFunctions.getDatastoreVSphere(GetDatastoreVSphereArgs.builder()\n            .id(var_.fabric_datastore_vsphere_id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:fabric:getDatastoreVSphere\n      Arguments:\n        id: ${var.fabric_datastore_vsphere_id}\n```\n\n**vSphere fabric datastore data source by filter query:**\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\n// Lookup vSphere fabric datastore using its name\nconst thisDatastoreVSphere = pulumi.output(vra.fabric.getDatastoreVSphere({\n    filter: `name eq '${var_datastore_name}'`,\n}));\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.fabric.get_datastore_v_sphere(filter=f\"name eq '{var['datastore_name']}'\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Fabric.GetDatastoreVSphere.Invoke(new()\n    {\n        Filter = $\"name eq '{@var.Datastore_name}'\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/fabric\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/fabric\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := fabric.LookupDatastoreVSphere(ctx, \u0026fabric.LookupDatastoreVSphereArgs{\n\t\t\tFilter: pulumi.StringRef(fmt.Sprintf(\"name eq '%v'\", _var.Datastore_name)),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.fabric.FabricFunctions;\nimport com.pulumi.vra.fabric.inputs.GetDatastoreVSphereArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = FabricFunctions.getDatastoreVSphere(GetDatastoreVSphereArgs.builder()\n            .filter(String.format(\"name eq '%s'\", var_.datastore_name()))\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:fabric:getDatastoreVSphere\n      Arguments:\n        filter: name eq '${var.datastore_name}'\n```\n\nA vSphere fabric datastore data source supports the following arguments:\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDatastoreVSphere.\n",
                "properties": {
                    "filter": {
                        "type": "string",
                        "description": "Search criteria to narrow down the vSphere fabric datastore resource instance. Only one of 'id' or 'filter' must be specified.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The id of the vSphere fabric datastore resource instance. Only one of 'id' or 'filter' must be specified.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:fabric/getDatastoreVSphereTag:getDatastoreVSphereTag"
                        },
                        "description": "A set of tag keys and optional values that were set on this resource:\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDatastoreVSphere.\n",
                "properties": {
                    "cloudAccountIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of ids of the cloud accounts this entity belongs to.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date when the entity was created. The date is in ISO 8601 and UTC.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A human-friendly description.\n"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "External entity Id on the provider side.\n"
                    },
                    "externalRegionId": {
                        "type": "string",
                        "description": "Id of datacenter in which the datastore is present.\n"
                    },
                    "filter": {
                        "type": "string"
                    },
                    "freeSizeGb": {
                        "type": "string",
                        "description": "Indicates free size available in datastore.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:fabric/getDatastoreVSphereLink:getDatastoreVSphereLink"
                        },
                        "description": "HATEOAS of the entity\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A human-friendly name used as an identifier for the vSphere fabric datastore resource instance.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The id of the organization this entity belongs to.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Email of the user that owns the entity.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:fabric/getDatastoreVSphereTag:getDatastoreVSphereTag"
                        },
                        "description": "A set of tag keys and optional values that were set on this resource:\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of datastore.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                    }
                },
                "type": "object",
                "required": [
                    "cloudAccountIds",
                    "createdAt",
                    "description",
                    "externalId",
                    "externalRegionId",
                    "freeSizeGb",
                    "id",
                    "links",
                    "name",
                    "orgId",
                    "owner",
                    "tags",
                    "type",
                    "updatedAt"
                ]
            }
        },
        "vra:fabric/getNetwork:getNetwork": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\nThis is an example of how to lookup fabric networks.\n\n**Fabric network by filter query:**\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\n// Lookup vRA fabric network using its name and regionId\nconst thisNetwork = pulumi.output(vra.fabric.getNetwork({\n    filter: `name eq '${var_name}' and externalRegionId eq '${var_external_region_id}'`,\n}));\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.fabric.get_network(filter=f\"name eq '{var['name']}' and externalRegionId eq '{var['external_region_id']}'\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Fabric.GetNetwork.Invoke(new()\n    {\n        Filter = $\"name eq '{@var.Name}' and externalRegionId eq '{@var.External_region_id}'\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/fabric\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/fabric\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := fabric.GetNetwork(ctx, \u0026fabric.GetNetworkArgs{\n\t\t\tFilter: fmt.Sprintf(\"name eq '%v' and externalRegionId eq '%v'\", _var.Name, _var.External_region_id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.fabric.FabricFunctions;\nimport com.pulumi.vra.fabric.inputs.GetNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = FabricFunctions.getNetwork(GetNetworkArgs.builder()\n            .filter(String.format(\"name eq '%s' and externalRegionId eq '%s'\", var_.name(),var_.external_region_id()))\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:fabric:getNetwork\n      Arguments:\n        filter: name eq '${var.name}' and externalRegionId eq '${var.external_region_id}'\n```\n\nA fabric network data source supports the following arguments:\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getNetwork.\n",
                "properties": {
                    "filter": {
                        "type": "string",
                        "description": "Filter query string that is supported by vRA multi-cloud IaaS API.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:fabric/getNetworkTag:getNetworkTag"
                        },
                        "description": "Set of tag keys and values to apply to the resource.\nExample:[ { \"key\" : \"vmware\", \"value\": \"provider\" } ]\n"
                    }
                },
                "type": "object",
                "required": [
                    "filter"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNetwork.\n",
                "properties": {
                    "cidr": {
                        "type": "string",
                        "description": "Network CIDR to be used.\n"
                    },
                    "cloudAccountIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of ids of the cloud accounts this entity belongs to.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date when the entity was created. The date is in ISO 6801 and UTC.\n"
                    },
                    "customProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Additional properties that may be used to extend the base resource.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "State object representing a network on a external cloud provider.\n"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "External entity Id on the provider side.\n"
                    },
                    "externalRegionId": {
                        "type": "string",
                        "description": "The id of the region for which this network is defined.\n"
                    },
                    "filter": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isDefault": {
                        "type": "boolean",
                        "description": "Indicates whether this is the default subnet for the zone.\n"
                    },
                    "isPublic": {
                        "type": "boolean",
                        "description": "Indicates whether the sub-network supports public IP assignment.\n"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:fabric/getNetworkLink:getNetworkLink"
                        },
                        "description": "HATEOAS of the entity\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the fabric network.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "ID of organization that entity belongs to.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Email of the user that owns the entity.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:fabric/getNetworkTag:getNetworkTag"
                        },
                        "description": "Set of tag keys and values to apply to the resource.\nExample:[ { \"key\" : \"vmware\", \"value\": \"provider\" } ]\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                    }
                },
                "type": "object",
                "required": [
                    "cidr",
                    "cloudAccountIds",
                    "createdAt",
                    "customProperties",
                    "description",
                    "externalId",
                    "externalRegionId",
                    "filter",
                    "isDefault",
                    "isPublic",
                    "links",
                    "name",
                    "organizationId",
                    "owner",
                    "tags",
                    "updatedAt",
                    "id"
                ]
            }
        },
        "vra:fabric/getStorageAccountAzure:getStorageAccountAzure": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\nThis is an example of how to lookup fabric Azure storage account.\n\n**Fabric Azure storage account by Id:**\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst this = vra.fabric.getStorageAccountAzure({\n    id: _var.fabric_storage_account_azure_id,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.fabric.get_storage_account_azure(id=var[\"fabric_storage_account_azure_id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Fabric.GetStorageAccountAzure.Invoke(new()\n    {\n        Id = @var.Fabric_storage_account_azure_id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/fabric\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/fabric\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := fabric.GetStorageAccountAzure(ctx, \u0026fabric.GetStorageAccountAzureArgs{\n\t\t\tId: pulumi.StringRef(_var.Fabric_storage_account_azure_id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.fabric.FabricFunctions;\nimport com.pulumi.vra.fabric.inputs.GetStorageAccountAzureArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = FabricFunctions.getStorageAccountAzure(GetStorageAccountAzureArgs.builder()\n            .id(var_.fabric_storage_account_azure_id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:fabric:getStorageAccountAzure\n      Arguments:\n        id: ${var.fabric_storage_account_azure_id}\n```\n\n**Fabric Azure storage by filter query:**\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\n// Lookup fabric Azure storage account using its name\nconst thisStorageAccountAzure = pulumi.output(vra.fabric.getStorageAccountAzure({\n    filter: `name eq '${var_name}'`,\n}));\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.fabric.get_storage_account_azure(filter=f\"name eq '{var['name']}'\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Fabric.GetStorageAccountAzure.Invoke(new()\n    {\n        Filter = $\"name eq '{@var.Name}'\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/fabric\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/fabric\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := fabric.GetStorageAccountAzure(ctx, \u0026fabric.GetStorageAccountAzureArgs{\n\t\t\tFilter: pulumi.StringRef(fmt.Sprintf(\"name eq '%v'\", _var.Name)),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.fabric.FabricFunctions;\nimport com.pulumi.vra.fabric.inputs.GetStorageAccountAzureArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = FabricFunctions.getStorageAccountAzure(GetStorageAccountAzureArgs.builder()\n            .filter(String.format(\"name eq '%s'\", var_.name()))\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:fabric:getStorageAccountAzure\n      Arguments:\n        filter: name eq '${var.name}'\n```\n\nA fabric Azure storage account supports the following arguments:\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getStorageAccountAzure.\n",
                "properties": {
                    "filter": {
                        "type": "string",
                        "description": "Search criteria to narrow down the fabric Azure storage accounts. Only one of 'filter' or 'id' must be specified.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The id of the fabric Azure storage account. Only one of 'filter' or 'id' must be specified.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getStorageAccountAzure.\n",
                "properties": {
                    "cloudAccountIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of ids of the cloud accounts this entity belongs to.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date when the entity was created. The date is in ISO 6801 and UTC.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A human-friendly description of the fabric Azure storage account.\n"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "External entity Id on the provider side.\n"
                    },
                    "externalRegionId": {
                        "type": "string",
                        "description": "The id of the region for which this entity is defined.\n"
                    },
                    "filter": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:fabric/getStorageAccountAzureLink:getStorageAccountAzureLink"
                        },
                        "description": "HATEOAS of the entity\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The id of the organization this entity belongs to.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Email of the user that owns the entity.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Indicates the performance tier for the storage type. Premium disks are SSD backed and Standard disks are HDD backed. example: Standard_LRS / Premium_LRS\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                    }
                },
                "type": "object",
                "required": [
                    "cloudAccountIds",
                    "createdAt",
                    "description",
                    "externalId",
                    "externalRegionId",
                    "id",
                    "links",
                    "name",
                    "orgId",
                    "owner",
                    "type",
                    "updatedAt"
                ]
            }
        },
        "vra:fabric/getStoragePolicyVSphere:getStoragePolicyVSphere": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\nThis is an example of how to lookup fabric vSphere storage policies.\n\n**Fabric vSphere storage policy by Id:**\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst this = vra.fabric.getStoragePolicyVSphere({\n    id: _var.fabric_storage_policy_vsphere_id,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.fabric.get_storage_policy_v_sphere(id=var[\"fabric_storage_policy_vsphere_id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Fabric.GetStoragePolicyVSphere.Invoke(new()\n    {\n        Id = @var.Fabric_storage_policy_vsphere_id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/fabric\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/fabric\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := fabric.GetStoragePolicyVSphere(ctx, \u0026fabric.GetStoragePolicyVSphereArgs{\n\t\t\tId: pulumi.StringRef(_var.Fabric_storage_policy_vsphere_id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.fabric.FabricFunctions;\nimport com.pulumi.vra.fabric.inputs.GetStoragePolicyVSphereArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = FabricFunctions.getStoragePolicyVSphere(GetStoragePolicyVSphereArgs.builder()\n            .id(var_.fabric_storage_policy_vsphere_id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:fabric:getStoragePolicyVSphere\n      Arguments:\n        id: ${var.fabric_storage_policy_vsphere_id}\n```\n\n**Fabric vSphere storage policy by filter query:**\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\n// Lookup fabric vSphere storage policy using its name\nconst thisStoragePolicyVSphere = pulumi.output(vra.fabric.getStoragePolicyVSphere({\n    filter: `name eq '${var_name}'`,\n}));\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.fabric.get_storage_policy_v_sphere(filter=f\"name eq '{var['name']}'\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Fabric.GetStoragePolicyVSphere.Invoke(new()\n    {\n        Filter = $\"name eq '{@var.Name}'\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/fabric\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/fabric\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := fabric.GetStoragePolicyVSphere(ctx, \u0026fabric.GetStoragePolicyVSphereArgs{\n\t\t\tFilter: pulumi.StringRef(fmt.Sprintf(\"name eq '%v'\", _var.Name)),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.fabric.FabricFunctions;\nimport com.pulumi.vra.fabric.inputs.GetStoragePolicyVSphereArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = FabricFunctions.getStoragePolicyVSphere(GetStoragePolicyVSphereArgs.builder()\n            .filter(String.format(\"name eq '%s'\", var_.name()))\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:fabric:getStoragePolicyVSphere\n      Arguments:\n        filter: name eq '${var.name}'\n```\n\nA fabric vSphere storage policy supports the following arguments:\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getStoragePolicyVSphere.\n",
                "properties": {
                    "filter": {
                        "type": "string",
                        "description": "Search criteria to narrow down the fabric vSphere storage policy. Only one of 'filter' or 'id' must be specified.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The id of the fabric vSphere storage policy. Only one of 'filter' or 'id' must be specified.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getStoragePolicyVSphere.\n",
                "properties": {
                    "cloudAccountIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of ids of the cloud accounts this entity belongs to.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date when the entity was created. The date is in ISO 6801 and UTC.\n"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "External entity Id on the provider side.\n"
                    },
                    "externalRegionId": {
                        "type": "string",
                        "description": "The id of the region for which this entity is defined.\n"
                    },
                    "filter": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:fabric/getStoragePolicyVSphereLink:getStoragePolicyVSphereLink"
                        },
                        "description": "HATEOAS of the entity\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A human-friendly name used as an identifier in APIs that support this option.  Only one of 'filter', 'id', 'name' or 'region_id' must be specified.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The id of the organization this entity belongs to.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                    }
                },
                "type": "object",
                "required": [
                    "cloudAccountIds",
                    "createdAt",
                    "externalId",
                    "externalRegionId",
                    "id",
                    "links",
                    "name",
                    "orgId",
                    "updatedAt"
                ]
            }
        },
        "vra:image/getImage:getImage": {
            "description": "The `vra.image.getImage` data source can be used to discover the lookup machine images with cloud accounts. This can then be used with resource that require an image. For example, to create an image profile using the `vra.image.Profile` resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nThis is an example of how to lookup images from a vSphere cloud account.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\nimport * as vra from \"@pulumiverse/vra\";\n\nconst thisVSphere = vra.cloudaccount.getVSphere({\n    name: _var.cloud_account,\n});\nconst thisRegion = thisVSphere.then(thisVSphere =\u003e vra.region.getRegion({\n    cloudAccountId: thisVSphere.id,\n    region: _var.region,\n}));\nconst image0 = thisVSphere.then(thisVSphere =\u003e vra.image.getImage({\n    filter: `name eq '${_var.image_name_0}' and cloudAccountId eq '${thisVSphere.id}' and externalRegionId eq '${_var.region}'`,\n}));\nconst image1 = thisVSphere.then(thisVSphere =\u003e vra.image.getImage({\n    filter: `name eq '${_var.image_name_1}' and cloudAccountId eq '${thisVSphere.id}' and externalRegionId eq '${_var.region}'`,\n}));\nconst thisProfile = new vra.image.Profile(\"thisProfile\", {\n    description: _var.image_profile_description,\n    regionId: thisRegion.then(thisRegion =\u003e thisRegion.id),\n    imageMappings: [\n        {\n            name: _var.image_name_0,\n            imageId: image0.then(image0 =\u003e image0.id),\n        },\n        {\n            name: _var.image_name_1,\n            imageId: image1.then(image1 =\u003e image1.id),\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\nimport pulumiverse_vra as vra\n\nthis_v_sphere = vra.cloudaccount.get_v_sphere(name=var[\"cloud_account\"])\nthis_region = vra.region.get_region(cloud_account_id=this_v_sphere.id,\n    region=var[\"region\"])\nimage0 = vra.image.get_image(filter=f\"name eq '{var['image_name_0']}' and cloudAccountId eq '{this_v_sphere.id}' and externalRegionId eq '{var['region']}'\")\nimage1 = vra.image.get_image(filter=f\"name eq '{var['image_name_1']}' and cloudAccountId eq '{this_v_sphere.id}' and externalRegionId eq '{var['region']}'\")\nthis_profile = vra.image.Profile(\"thisProfile\",\n    description=var[\"image_profile_description\"],\n    region_id=this_region.id,\n    image_mappings=[\n        vra.image.ProfileImageMappingArgs(\n            name=var[\"image_name_0\"],\n            image_id=image0.id,\n        ),\n        vra.image.ProfileImageMappingArgs(\n            name=var[\"image_name_1\"],\n            image_id=image1.id,\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\nusing Vra = Pulumiverse.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var thisVSphere = Vra.Cloudaccount.GetVSphere.Invoke(new()\n    {\n        Name = @var.Cloud_account,\n    });\n\n    var thisRegion = Vra.Region.GetRegion.Invoke(new()\n    {\n        CloudAccountId = thisVSphere.Apply(getVSphereResult =\u003e getVSphereResult.Id),\n        Region = @var.Region,\n    });\n\n    var image0 = Vra.Image.GetImage.Invoke(new()\n    {\n        Filter = $\"name eq '{@var.Image_name_0}' and cloudAccountId eq '{thisVSphere.Apply(getVSphereResult =\u003e getVSphereResult.Id)}' and externalRegionId eq '{@var.Region}'\",\n    });\n\n    var image1 = Vra.Image.GetImage.Invoke(new()\n    {\n        Filter = $\"name eq '{@var.Image_name_1}' and cloudAccountId eq '{thisVSphere.Apply(getVSphereResult =\u003e getVSphereResult.Id)}' and externalRegionId eq '{@var.Region}'\",\n    });\n\n    var thisProfile = new Vra.Image.Profile(\"thisProfile\", new()\n    {\n        Description = @var.Image_profile_description,\n        RegionId = thisRegion.Apply(getRegionResult =\u003e getRegionResult.Id),\n        ImageMappings = new[]\n        {\n            new Vra.Image.Inputs.ProfileImageMappingArgs\n            {\n                Name = @var.Image_name_0,\n                ImageId = image0.Apply(getImageResult =\u003e getImageResult.Id),\n            },\n            new Vra.Image.Inputs.ProfileImageMappingArgs\n            {\n                Name = @var.Image_name_1,\n                ImageId = image1.Apply(getImageResult =\u003e getImageResult.Id),\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/cloudaccount\"\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/image\"\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/region\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/cloudaccount\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/image\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/region\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tthisVSphere, err := cloudaccount.LookupVSphere(ctx, \u0026cloudaccount.LookupVSphereArgs{\n\t\t\tName: pulumi.StringRef(_var.Cloud_account),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tthisRegion, err := region.GetRegion(ctx, \u0026region.GetRegionArgs{\n\t\t\tCloudAccountId: pulumi.StringRef(thisVSphere.Id),\n\t\t\tRegion:         pulumi.StringRef(_var.Region),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\timage0, err := image.GetImage(ctx, \u0026image.GetImageArgs{\n\t\t\tFilter: fmt.Sprintf(\"name eq '%v' and cloudAccountId eq '%v' and externalRegionId eq '%v'\", _var.Image_name_0, thisVSphere.Id, _var.Region),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\timage1, err := image.GetImage(ctx, \u0026image.GetImageArgs{\n\t\t\tFilter: fmt.Sprintf(\"name eq '%v' and cloudAccountId eq '%v' and externalRegionId eq '%v'\", _var.Image_name_1, thisVSphere.Id, _var.Region),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = image.NewProfile(ctx, \"thisProfile\", \u0026image.ProfileArgs{\n\t\t\tDescription: pulumi.Any(_var.Image_profile_description),\n\t\t\tRegionId:    pulumi.String(thisRegion.Id),\n\t\t\tImageMappings: image.ProfileImageMappingArray{\n\t\t\t\t\u0026image.ProfileImageMappingArgs{\n\t\t\t\t\tName:    pulumi.Any(_var.Image_name_0),\n\t\t\t\t\tImageId: pulumi.String(image0.Id),\n\t\t\t\t},\n\t\t\t\t\u0026image.ProfileImageMappingArgs{\n\t\t\t\t\tName:    pulumi.Any(_var.Image_name_1),\n\t\t\t\t\tImageId: pulumi.String(image1.Id),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.cloudaccount.CloudaccountFunctions;\nimport com.pulumi.vra.cloudaccount.inputs.GetVSphereArgs;\nimport com.pulumi.vra.region.RegionFunctions;\nimport com.pulumi.vra.region.inputs.GetRegionArgs;\nimport com.pulumi.vra.image.ImageFunctions;\nimport com.pulumi.vra.image.inputs.GetImageArgs;\nimport com.pulumi.vra.image.Profile;\nimport com.pulumi.vra.image.ProfileArgs;\nimport com.pulumi.vra.image.inputs.ProfileImageMappingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var thisVSphere = CloudaccountFunctions.getVSphere(GetVSphereArgs.builder()\n            .name(var_.cloud_account())\n            .build());\n\n        final var thisRegion = RegionFunctions.getRegion(GetRegionArgs.builder()\n            .cloudAccountId(thisVSphere.applyValue(getVSphereResult -\u003e getVSphereResult.id()))\n            .region(var_.region())\n            .build());\n\n        final var image0 = ImageFunctions.getImage(GetImageArgs.builder()\n            .filter(String.format(\"name eq '%s' and cloudAccountId eq '%s' and externalRegionId eq '%s'\", var_.image_name_0(),thisVSphere.applyValue(getVSphereResult -\u003e getVSphereResult.id()),var_.region()))\n            .build());\n\n        final var image1 = ImageFunctions.getImage(GetImageArgs.builder()\n            .filter(String.format(\"name eq '%s' and cloudAccountId eq '%s' and externalRegionId eq '%s'\", var_.image_name_1(),thisVSphere.applyValue(getVSphereResult -\u003e getVSphereResult.id()),var_.region()))\n            .build());\n\n        var thisProfile = new Profile(\"thisProfile\", ProfileArgs.builder()        \n            .description(var_.image_profile_description())\n            .regionId(thisRegion.applyValue(getRegionResult -\u003e getRegionResult.id()))\n            .imageMappings(            \n                ProfileImageMappingArgs.builder()\n                    .name(var_.image_name_0())\n                    .imageId(image0.applyValue(getImageResult -\u003e getImageResult.id()))\n                    .build(),\n                ProfileImageMappingArgs.builder()\n                    .name(var_.image_name_1())\n                    .imageId(image1.applyValue(getImageResult -\u003e getImageResult.id()))\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  thisProfile:\n    type: vra:image:Profile\n    properties:\n      description: ${var.image_profile_description}\n      regionId: ${thisRegion.id}\n      imageMappings:\n        - name: ${var.image_name_0}\n          imageId: ${image0.id}\n        - name: ${var.image_name_1}\n          imageId: ${image1.id}\nvariables:\n  thisVSphere:\n    Fn::Invoke:\n      Function: vra:cloudaccount:getVSphere\n      Arguments:\n        name: ${var.cloud_account}\n  thisRegion:\n    Fn::Invoke:\n      Function: vra:region:getRegion\n      Arguments:\n        cloudAccountId: ${thisVSphere.id}\n        region: ${var.region}\n  image0:\n    Fn::Invoke:\n      Function: vra:image:getImage\n      Arguments:\n        filter: name eq '${var.image_name_0}' and cloudAccountId eq '${thisVSphere.id}' and externalRegionId eq '${var.region}'\n  image1:\n    Fn::Invoke:\n      Function: vra:image:getImage\n      Arguments:\n        filter: name eq '${var.image_name_1}' and cloudAccountId eq '${thisVSphere.id}' and externalRegionId eq '${var.region}'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getImage.\n",
                "properties": {
                    "filter": {
                        "type": "string",
                        "description": "Search criteria to narrow down the image discovery.\n"
                    }
                },
                "type": "object",
                "required": [
                    "filter"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getImage.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A human-friendly description of the image.\n"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "External entity id on the provider side.\n"
                    },
                    "filter": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The id of the image.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                    },
                    "private": {
                        "type": "boolean",
                        "description": "Indicates whether this image is private. For vSphere, private images are templates and snapshots and public images are content library items.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The regionId of the image. For a vSphere cloud account, it is the `externalRegionId` such as `Datacenter:datacenter-2` and for an AWS cloud account, it is region name such as `us-east-1`, etc.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "externalId",
                    "filter",
                    "id",
                    "name",
                    "private",
                    "region"
                ]
            }
        },
        "vra:image/getProfile:getProfile": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\nThis is an example of how to read an image profile as data source.\n\n**Image profile data source by its id:**\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst thisProfile = pulumi.output(vra.image.getProfile({\n    filter: \"name eq 'foobar'\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.image.get_profile(filter=\"name eq 'foobar'\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Image.GetProfile.Invoke(new()\n    {\n        Filter = \"name eq 'foobar'\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/image\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/image\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := image.LookupProfile(ctx, \u0026image.LookupProfileArgs{\n\t\t\tFilter: pulumi.StringRef(\"name eq 'foobar'\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.image.ImageFunctions;\nimport com.pulumi.vra.image.inputs.GetProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = ImageFunctions.getProfile(GetProfileArgs.builder()\n            .filter(\"name eq 'foobar'\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:image:getProfile\n      Arguments:\n        filter: name eq 'foobar'\n```\n\n**Vra image profile data source filter by region id:**\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst this = vra.image.getProfile({\n    regionId: vra_image_profile[\"this\"].region_id,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.image.get_profile(region_id=vra_image_profile[\"this\"][\"region_id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Image.GetProfile.Invoke(new()\n    {\n        RegionId = vra_image_profile.This.Region_id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/image\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/image\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := image.LookupProfile(ctx, \u0026image.LookupProfileArgs{\n\t\t\tRegionId: pulumi.StringRef(vra_image_profile.This.Region_id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.image.ImageFunctions;\nimport com.pulumi.vra.image.inputs.GetProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = ImageFunctions.getProfile(GetProfileArgs.builder()\n            .regionId(vra_image_profile.this().region_id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:image:getProfile\n      Arguments:\n        regionId: ${vra_image_profile.this.region_id}\n```\n\nAn image profile data source supports the following arguments:\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getProfile.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A human-friendly description.\n"
                    },
                    "filter": {
                        "type": "string",
                        "description": "Filter query string that is supported by vRA multi-cloud IaaS API. Example: regionId eq '\u003cregionId\u003e' and cloudAccountId eq '\u003ccloudAccountId\u003e'.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The id of the image profile instance.\n"
                    },
                    "imageMappings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:image/getProfileImageMapping:getProfileImageMapping"
                        },
                        "description": "Image mapping defined for the corresponding region.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                    },
                    "regionId": {
                        "type": "string",
                        "description": "The id of the region for which this profile is defined as in vRealize Automation(vRA).\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getProfile.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Date when the entity was created. The date is in ISO 6801 and UTC.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A human-friendly description.\n"
                    },
                    "externalRegionId": {
                        "type": "string",
                        "description": "The external regionId of the resource.\n"
                    },
                    "filter": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "imageMappings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:image/getProfileImageMapping:getProfileImageMapping"
                        },
                        "description": "Image mapping defined for the corresponding region.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Email of the user that owns the entity.\n"
                    },
                    "regionId": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "externalRegionId",
                    "id",
                    "name",
                    "owner",
                    "regionId",
                    "updatedAt"
                ]
            }
        },
        "vra:machine/getMachine:getMachine": {
            "description": "## ---layout: \"vra\"\n\npage_title: \"VMware vRealize Automation: vra.machine.Machine\"\ndescription: |-\n  Provides a data lookup for vra_machine.\n---\n\n# Data Source: vra.machine.Machine\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\n\nThis is an example of how to read a machine data source.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst this = vra.machine.getMachine({\n    id: _var.my_machine_id,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.machine.get_machine(id=var[\"my_machine_id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Machine.GetMachine.Invoke(new()\n    {\n        Id = @var.My_machine_id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/machine\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/machine\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := machine.LookupMachine(ctx, \u0026machine.LookupMachineArgs{\n\t\t\tId: pulumi.StringRef(_var.My_machine_id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.machine.MachineFunctions;\nimport com.pulumi.vra.machine.inputs.GetMachineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = MachineFunctions.getMachine(GetMachineArgs.builder()\n            .id(var_.my_machine_id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:machine:getMachine\n      Arguments:\n        id: ${var.my_machine_id}\n```\n\n**Machine data source filter by name:**\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst thisMachine = pulumi.output(vra.machine.getMachine({\n    filter: `name eq '${var_machine_name}'`,\n}));\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.machine.get_machine(filter=f\"name eq '{var['machine_name']}'\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Machine.GetMachine.Invoke(new()\n    {\n        Filter = $\"name eq '{@var.Machine_name}'\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/machine\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/machine\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := machine.LookupMachine(ctx, \u0026machine.LookupMachineArgs{\n\t\t\tFilter: pulumi.StringRef(fmt.Sprintf(\"name eq '%v'\", _var.Machine_name)),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.machine.MachineFunctions;\nimport com.pulumi.vra.machine.inputs.GetMachineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = MachineFunctions.getMachine(GetMachineArgs.builder()\n            .filter(String.format(\"name eq '%s'\", var_.machine_name()))\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:machine:getMachine\n      Arguments:\n        filter: name eq '${var.machine_name}'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getMachine.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A human-friendly description.\n"
                    },
                    "filter": {
                        "type": "string",
                        "description": "Filter query string that is supported by vRA multi-cloud IaaS API. Example: regionId eq '\u003cregionId\u003e' and cloudAccountId eq '\u003ccloudAccountId\u003e'.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The id of the image profile instance.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:machine/getMachineTag:getMachineTag"
                        },
                        "description": "A set of tag keys and optional values that were set on this resource.\nexample:[ { \"key\" : \"ownedBy\", \"value\": \"Rainpole\" } ]\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getMachine.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "Primary address allocated or in use by this machine. The actual type of the address depends on the adapter type. Typically it is either the public or the external IP address.\n"
                    },
                    "cloudAccountIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of ids of the cloud accounts this resource belongs to.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date when the entity was created. The date is in ISO 6801 and UTC.\n"
                    },
                    "customProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Additional properties that may be used to extend the base resource.\n"
                    },
                    "deploymentId": {
                        "type": "string",
                        "description": "Deployment id that is associated with this resource.\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "External entity Id on the provider side.\n"
                    },
                    "externalRegionId": {
                        "type": "string",
                        "description": "The external regionId of the resource.\n"
                    },
                    "externalZoneId": {
                        "type": "string",
                        "description": "The external zoneId of the resource.\n"
                    },
                    "filter": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:machine/getMachineLink:getMachineLink"
                        },
                        "description": "HATEOAS of the entity\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The id of the organization this entity belongs to.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Email of the user that owns the entity.\n"
                    },
                    "powerState": {
                        "type": "string",
                        "description": "Power state of machine.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The id of the project this resource belongs to.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:machine/getMachineTag:getMachineTag"
                        },
                        "description": "A set of tag keys and optional values that were set on this resource.\nexample:[ { \"key\" : \"ownedBy\", \"value\": \"Rainpole\" } ]\n"
                    },
                    "updatedAt": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "address",
                    "cloudAccountIds",
                    "createdAt",
                    "customProperties",
                    "deploymentId",
                    "externalId",
                    "externalRegionId",
                    "externalZoneId",
                    "id",
                    "links",
                    "name",
                    "orgId",
                    "owner",
                    "powerState",
                    "projectId",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "vra:network/getDomain:getDomain": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\nThis is an example of how to lookup Network domain objects.\n\n**Network Domain by filter query:**\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\n// Lookup network domain using its name\nconst thisDomain = pulumi.output(vra.network.getDomain({\n    filter: `name eq '${var_name}'`,\n}));\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.network.get_domain(filter=f\"name eq '{var['name']}'\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Network.GetDomain.Invoke(new()\n    {\n        Filter = $\"name eq '{@var.Name}'\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/network\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/network\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := network.GetDomain(ctx, \u0026network.GetDomainArgs{\n\t\t\tFilter: fmt.Sprintf(\"name eq '%v'\", _var.Name),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.network.NetworkFunctions;\nimport com.pulumi.vra.network.inputs.GetDomainArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = NetworkFunctions.getDomain(GetDomainArgs.builder()\n            .filter(String.format(\"name eq '%s'\", var_.name()))\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:network:getDomain\n      Arguments:\n        filter: name eq '${var.name}'\n```\n\nA network domain object supports the following arguments:\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDomain.\n",
                "properties": {
                    "filter": {
                        "type": "string",
                        "description": "Search criteria to narrow down the network domain objects.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:network/getDomainTag:getDomainTag"
                        },
                        "description": "Set of tag keys and values to apply to the resource.\nExample:[ { \"key\" : \"vmware\", \"value\": \"provider\" } ]\n"
                    }
                },
                "type": "object",
                "required": [
                    "filter"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDomain.\n",
                "properties": {
                    "cidr": {
                        "type": "string"
                    },
                    "cloudAccountIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of ids of the cloud accounts this entity belongs to.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date when the entity was created. The date is in ISO 6801 and UTC.\n"
                    },
                    "customProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "description": {
                        "type": "string",
                        "description": "A human-friendly description of the fabric vSphere storage account.\n"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "External entity Id on the provider side.\n"
                    },
                    "externalRegionId": {
                        "type": "string",
                        "description": "The id of the region for which this entity is defined.\n"
                    },
                    "filter": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:network/getDomainLink:getDomainLink"
                        },
                        "description": "HATEOAS of the entity\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the network domain.\n"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Email of the user that owns the entity.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:network/getDomainTag:getDomainTag"
                        },
                        "description": "Set of tag keys and values to apply to the resource.\nExample:[ { \"key\" : \"vmware\", \"value\": \"provider\" } ]\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                    }
                },
                "type": "object",
                "required": [
                    "cidr",
                    "cloudAccountIds",
                    "createdAt",
                    "customProperties",
                    "description",
                    "externalId",
                    "externalRegionId",
                    "filter",
                    "links",
                    "name",
                    "organizationId",
                    "owner",
                    "tags",
                    "updatedAt",
                    "id"
                ]
            }
        },
        "vra:network/getNetwork:getNetwork": {
            "description": "## ---layout: \"vra\"\n\npage_title: \"VMware vRealize Automation: vra.network.Network\"\ndescription: |-\n  Provides a data lookup for vra_network.\n---\n\n# Data Source: vra.network.Network\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\n\nThis is an example of how to read a network data source.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst test-network = vra.network.getNetwork({\n    name: _var.network_name,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\ntest_network = vra.network.get_network(name=var[\"network_name\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test_network = Vra.Network.GetNetwork.Invoke(new()\n    {\n        Name = @var.Network_name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/network\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/network\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := network.LookupNetwork(ctx, \u0026network.LookupNetworkArgs{\n\t\t\tName: pulumi.StringRef(_var.Network_name),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.network.NetworkFunctions;\nimport com.pulumi.vra.fabric.inputs.GetNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test-network = NetworkFunctions.getNetwork(GetNetworkArgs.builder()\n            .name(var_.network_name())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test-network:\n    Fn::Invoke:\n      Function: vra:network:getNetwork\n      Arguments:\n        name: ${var.network_name}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getNetwork.\n",
                "properties": {
                    "constraints": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:network/getNetworkConstraint:getNetworkConstraint"
                        },
                        "description": "List of storage, network and extensibility constraints to be applied when provisioning through this project.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The id of the image profile instance.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:network/getNetworkTag:getNetworkTag"
                        },
                        "description": "A set of tag keys and optional values that were set on this resource.\nexample:[ { \"key\" : \"ownedBy\", \"value\": \"Rainpole\" } ]\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNetwork.\n",
                "properties": {
                    "cidr": {
                        "type": "string",
                        "description": "IPv4 address range of the network in CIDR format.\n"
                    },
                    "constraints": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:network/getNetworkConstraint:getNetworkConstraint"
                        },
                        "description": "List of storage, network and extensibility constraints to be applied when provisioning through this project.\n"
                    },
                    "customProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Additional properties that may be used to extend the base resource.\n"
                    },
                    "deploymentId": {
                        "type": "string",
                        "description": "Deployment id that is associated with this resource.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A human-friendly description.\n"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "External entity Id on the provider side.\n"
                    },
                    "externalZoneId": {
                        "type": "string",
                        "description": "The external zoneId of the resource.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:network/getNetworkLink:getNetworkLink"
                        },
                        "description": "HATEOAS of the entity\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The id of the organization this entity belongs to.\n"
                    },
                    "outboundAccess": {
                        "type": "boolean",
                        "description": "Flag to indicate if the network needs to have outbound access or not. Default is true. This field will be ignored if there is proper input for networkType customProperty\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Email of the user that owns the entity.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The id of the project this resource belongs to.\n"
                    },
                    "selfLink": {
                        "type": "string",
                        "description": "Self link of this request.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:network/getNetworkTag:getNetworkTag"
                        },
                        "description": "A set of tag keys and optional values that were set on this resource.\nexample:[ { \"key\" : \"ownedBy\", \"value\": \"Rainpole\" } ]\n"
                    },
                    "updatedAt": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "cidr",
                    "customProperties",
                    "deploymentId",
                    "description",
                    "externalId",
                    "externalZoneId",
                    "id",
                    "links",
                    "name",
                    "organizationId",
                    "outboundAccess",
                    "owner",
                    "projectId",
                    "selfLink",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "vra:network/getProfile:getProfile": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\nThis is an example of how to create a network profile resource.\n\n**Network profile data source by its id:**\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst thisProfile = vra_network_profile_this.name.apply(name =\u003e vra.network.getProfile({\n    filter: `name eq '${name}'`,\n}));\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.network.get_profile(filter=f\"name eq '{vra_network_profile['this']['name']}'\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Network.GetProfile.Invoke(new()\n    {\n        Filter = $\"name eq '{vra_network_profile.This.Name}'\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/network\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/network\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := network.LookupProfile(ctx, \u0026network.LookupProfileArgs{\n\t\t\tFilter: pulumi.StringRef(fmt.Sprintf(\"name eq '%v'\", vra_network_profile.This.Name)),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.network.NetworkFunctions;\nimport com.pulumi.vra.image.inputs.GetProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = NetworkFunctions.getProfile(GetProfileArgs.builder()\n            .filter(String.format(\"name eq '%s'\", vra_network_profile.this().name()))\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:network:getProfile\n      Arguments:\n        filter: name eq '${vra_network_profile.this.name}'\n```\n\n**Vra network profile data source filter by region id:**\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst thisProfile = vra_region_this.id.apply(id =\u003e vra.network.getProfile({\n    filter: `regionId eq '${id}'`,\n}));\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.network.get_profile(filter=f\"regionId eq '{data['vra_region']['this']['id']}'\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Network.GetProfile.Invoke(new()\n    {\n        Filter = $\"regionId eq '{data.Vra_region.This.Id}'\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/network\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/network\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := network.LookupProfile(ctx, \u0026network.LookupProfileArgs{\n\t\t\tFilter: pulumi.StringRef(fmt.Sprintf(\"regionId eq '%v'\", data.Vra_region.This.Id)),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.network.NetworkFunctions;\nimport com.pulumi.vra.image.inputs.GetProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = NetworkFunctions.getProfile(GetProfileArgs.builder()\n            .filter(String.format(\"regionId eq '%s'\", data.vra_region().this().id()))\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:network:getProfile\n      Arguments:\n        filter: regionId eq '${data.vra_region.this.id}'\n```\n\nA network profile data source supports the following arguments:\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getProfile.\n",
                "properties": {
                    "filter": {
                        "type": "string",
                        "description": "Filter query string that is supported by vRA multi-cloud IaaS API. Example: regionId eq '\u003cregionId\u003e' and cloudAccountId eq '\u003ccloudAccountId\u003e'.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The id of the image profile instance.\n"
                    },
                    "isolatedExternalFabricNetworkId": {
                        "type": "string",
                        "description": "The Id of the fabric network used for outbound access.\n"
                    },
                    "isolatedNetworkDomainId": {
                        "type": "string",
                        "description": "The Id of the network domain used for creating isolated networks.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:network/getProfileTag:getProfileTag"
                        },
                        "description": "A set of tag keys and optional values that were set on this Network Profile.\nexample:[ { \"key\" : \"ownedBy\", \"value\": \"Rainpole\" } ]\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getProfile.\n",
                "properties": {
                    "customProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Additional properties that may be used to extend the Network Profile object that is produced from this specification. For isolationType security group, datastoreId identifies the Compute Resource Edge datastore. computeCluster and resourcePoolId identify the Compute Resource Edge cluster. For isolationType subnet, distributedLogicalRouterStateLink identifies the on-demand network distributed local router. onDemandNetworkIPAssignmentType identifies the on-demand network IP range assignment type static, dynamic, or mixed.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A human-friendly description.\n"
                    },
                    "externalRegionId": {
                        "type": "string",
                        "description": "The external regionId of the resource.\n"
                    },
                    "fabricNetworkIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of fabric network Ids which are assigned to the network profile.\nexample:[ \"6543\" ]\n"
                    },
                    "filter": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "isolatedExternalFabricNetworkId": {
                        "type": "string"
                    },
                    "isolatedNetworkCidrPrefix": {
                        "type": "integer",
                        "description": "The CIDR prefix length to be used for the isolated networks that are created with the network profile.\n"
                    },
                    "isolatedNetworkDomainCidr": {
                        "type": "string",
                        "description": "CIDR of the isolation network domain.\n"
                    },
                    "isolatedNetworkDomainId": {
                        "type": "string"
                    },
                    "isolationType": {
                        "type": "string",
                        "description": "Specifies the isolation type e.g. none, subnet or security group\n"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:network/getProfileLink:getProfileLink"
                        },
                        "description": "HATEOAS of the entity\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The id of the organization this entity belongs to.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Email of the user that owns the entity.\n"
                    },
                    "regionId": {
                        "type": "string",
                        "description": "The id of the region for which this profile is defined as in vRealize Automation(vRA).\n"
                    },
                    "securityGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of security group Ids which are assigned to the network profile.\nexample:[ \"6545\" ]\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:network/getProfileTag:getProfileTag"
                        },
                        "description": "A set of tag keys and optional values that were set on this Network Profile.\nexample:[ { \"key\" : \"ownedBy\", \"value\": \"Rainpole\" } ]\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                    }
                },
                "type": "object",
                "required": [
                    "customProperties",
                    "description",
                    "externalRegionId",
                    "fabricNetworkIds",
                    "id",
                    "isolatedNetworkCidrPrefix",
                    "isolatedNetworkDomainCidr",
                    "isolationType",
                    "links",
                    "name",
                    "organizationId",
                    "owner",
                    "regionId",
                    "securityGroupIds",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "vra:project/getProject:getProject": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\nThis is an example of how to create a project data source.\n\n**Project data source by its id:**\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst thisProject = vra_project_my_project.id.apply(id =\u003e vra.project.getProject({\n    id: id,\n}));\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.project.get_project(id=vra_project[\"my-project\"][\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Project.GetProject.Invoke(new()\n    {\n        Id = vra_project.My_project.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/project\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/project\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := project.LookupProject(ctx, \u0026project.LookupProjectArgs{\n\t\t\tId: pulumi.StringRef(vra_project.My - project.Id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.project.ProjectFunctions;\nimport com.pulumi.vra.project.inputs.GetProjectArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = ProjectFunctions.getProject(GetProjectArgs.builder()\n            .id(vra_project.my-project().id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:project:getProject\n      Arguments:\n        id: ${vra_project\"my-project\"[%!s(MISSING)].id}\n```\n\n**Project data source filter by name:**\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst test_project = vra_project_my_project.name.apply(name =\u003e vra.project.getProject({\n    name: name,\n}));\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\ntest_project = vra.project.get_project(name=vra_project[\"my-project\"][\"name\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test_project = Vra.Project.GetProject.Invoke(new()\n    {\n        Name = vra_project.My_project.Name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/project\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/project\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := project.LookupProject(ctx, \u0026project.LookupProjectArgs{\n\t\t\tName: pulumi.StringRef(vra_project.My - project.Name),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.project.ProjectFunctions;\nimport com.pulumi.vra.project.inputs.GetProjectArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test-project = ProjectFunctions.getProject(GetProjectArgs.builder()\n            .name(vra_project.my-project().name())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test-project:\n    Fn::Invoke:\n      Function: vra:project:getProject\n      Arguments:\n        name: ${vra_project\"my-project\"[%!s(MISSING)].name}\n```\n\nA project data source supports the following arguments:\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getProject.\n",
                "properties": {
                    "administratorRoles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:project/getProjectAdministratorRole:getProjectAdministratorRole"
                        },
                        "description": "Administrator users or groups associated with the project. Only administrators can manage project's configuration.\n"
                    },
                    "administrators": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of administrator users associated with the project. Only administrators can manage project's configuration.\n"
                    },
                    "constraints": {
                        "$ref": "#/types/vra:project/getProjectConstraints:getProjectConstraints",
                        "description": "A list of storage, network and extensibility constraints to be applied when provisioning through this project.\n"
                    },
                    "customProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "The project custom properties which are added to all requests in this project.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A human-friendly description.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The id of the image profile instance.\n"
                    },
                    "machineNamingTemplate": {
                        "type": "string",
                        "description": "The naming template to be used for resources provisioned in this project.\n"
                    },
                    "memberRoles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:project/getProjectMemberRole:getProjectMemberRole"
                        },
                        "description": "Member users or groups associated with the project.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of member users associated with the project.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                    },
                    "operationTimeout": {
                        "type": "integer",
                        "description": "The timeout that should be used for Blueprint operations and Provisioning tasks. The timeout is in seconds.\n"
                    },
                    "placementPolicy": {
                        "type": "string",
                        "description": "The placement policy that will be applied when selecting a cloud zone for provisioning. Must be one of `DEFAULT` or `SPREAD`.\n"
                    },
                    "sharedResources": {
                        "type": "boolean",
                        "description": "The id of the organization this entity belongs to.\n"
                    },
                    "viewerRoles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:project/getProjectViewerRole:getProjectViewerRole"
                        },
                        "description": "Viewer users or groups associated with the project.\n"
                    },
                    "viewers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of viewer users associated with the project.\n"
                    },
                    "zoneAssignments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:project/getProjectZoneAssignment:getProjectZoneAssignment"
                        },
                        "description": "A list of configurations for zone assignment to a project.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getProject.\n",
                "properties": {
                    "administratorRoles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:project/getProjectAdministratorRole:getProjectAdministratorRole"
                        }
                    },
                    "administrators": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "constraints": {
                        "$ref": "#/types/vra:project/getProjectConstraints:getProjectConstraints"
                    },
                    "customProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "machineNamingTemplate": {
                        "type": "string"
                    },
                    "memberRoles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:project/getProjectMemberRole:getProjectMemberRole"
                        }
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "operationTimeout": {
                        "type": "integer"
                    },
                    "placementPolicy": {
                        "type": "string"
                    },
                    "sharedResources": {
                        "type": "boolean"
                    },
                    "viewerRoles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:project/getProjectViewerRole:getProjectViewerRole"
                        }
                    },
                    "viewers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "zoneAssignments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:project/getProjectZoneAssignment:getProjectZoneAssignment"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "administrators",
                    "description",
                    "id",
                    "members",
                    "name",
                    "sharedResources",
                    "viewers"
                ]
            }
        },
        "vra:region/getEnumeration:getEnumeration": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\n\nThis is an example of how to lookup a region enumeration data source.\n\nDeprecationMessage: 'region_enumeration' is deprecated. Use 'region_enumeration_vsphere' instead.\n\n**Region enumeration data source for vSphere**\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst this = vra.region.getEnumerationVSphere({\n    acceptSelfSignedCert: false,\n    dcid: _var.vra_data_collector_id,\n    hostname: _var.hostname,\n    password: _var.password,\n    username: _var.username,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.region.get_enumeration_v_sphere(accept_self_signed_cert=False,\n    dcid=var[\"vra_data_collector_id\"],\n    hostname=var[\"hostname\"],\n    password=var[\"password\"],\n    username=var[\"username\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Region.GetEnumerationVSphere.Invoke(new()\n    {\n        AcceptSelfSignedCert = false,\n        Dcid = @var.Vra_data_collector_id,\n        Hostname = @var.Hostname,\n        Password = @var.Password,\n        Username = @var.Username,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/region\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/region\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := region.GetEnumerationVSphere(ctx, \u0026region.GetEnumerationVSphereArgs{\n\t\t\tAcceptSelfSignedCert: pulumi.BoolRef(false),\n\t\t\tDcid:                 pulumi.StringRef(_var.Vra_data_collector_id),\n\t\t\tHostname:             _var.Hostname,\n\t\t\tPassword:             _var.Password,\n\t\t\tUsername:             _var.Username,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.region.RegionFunctions;\nimport com.pulumi.vra.region.inputs.GetEnumerationVSphereArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = RegionFunctions.getEnumerationVSphere(GetEnumerationVSphereArgs.builder()\n            .acceptSelfSignedCert(false)\n            .dcid(var_.vra_data_collector_id())\n            .hostname(var_.hostname())\n            .password(var_.password())\n            .username(var_.username())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:region:getEnumerationVSphere\n      Arguments:\n        acceptSelfSignedCert: false\n        dcid: ${var.vra_data_collector_id}\n        hostname: ${var.hostname}\n        password: ${var.password}\n        username: ${var.username}\n```\n\nThe region enumeration data source supports the following arguments:\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getEnumeration.\n",
                "properties": {
                    "acceptSelfSignedCert": {
                        "type": "boolean",
                        "description": "Accept self signed certificate when connecting to vSphere. Example: false\n"
                    },
                    "dcid": {
                        "type": "string",
                        "description": "ID of a data collector vm deployed in the on premise infrastructure. Example: d5316b00-f3b8-4895-9e9a-c4b98649c2ca\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "Host name for the cloud account endpoint. Example: dc1-lnd.mycompany.com\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password for the user used to authenticate with the cloud Account\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username to authenticate with the cloud account\n"
                    }
                },
                "type": "object",
                "required": [
                    "hostname",
                    "password",
                    "username"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEnumeration.\n",
                "properties": {
                    "acceptSelfSignedCert": {
                        "type": "boolean"
                    },
                    "dcid": {
                        "type": "string"
                    },
                    "hostname": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "password": {
                        "type": "string"
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of datacenter managed object reference identifiers to enable provisioning on. Example: Datacenter:datacenter-2\n"
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "hostname",
                    "password",
                    "regions",
                    "username",
                    "id"
                ]
            }
        },
        "vra:region/getEnumerationAws:getEnumerationAws": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\n\nThis is an example of how to lookup a region enumeration data source for AWS cloud account.\n\n**Region enumeration data source for AWS, by the AWS account access key and secret key:**\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst this = vra.region.getEnumerationAws({\n    accessKey: _var.access_key,\n    secretKey: _var.secret_key,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.region.get_enumeration_aws(access_key=var[\"access_key\"],\n    secret_key=var[\"secret_key\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Region.GetEnumerationAws.Invoke(new()\n    {\n        AccessKey = @var.Access_key,\n        SecretKey = @var.Secret_key,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/region\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/region\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := region.GetEnumerationAws(ctx, \u0026region.GetEnumerationAwsArgs{\n\t\t\tAccessKey: _var.Access_key,\n\t\t\tSecretKey: _var.Secret_key,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.region.RegionFunctions;\nimport com.pulumi.vra.region.inputs.GetEnumerationAwsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = RegionFunctions.getEnumerationAws(GetEnumerationAwsArgs.builder()\n            .accessKey(var_.access_key())\n            .secretKey(var_.secret_key())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:region:getEnumerationAws\n      Arguments:\n        accessKey: ${var.access_key}\n        secretKey: ${var.secret_key}\n```\n\nThe region enumeration data source for AWS cloud account supports the following arguments:\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getEnumerationAws.\n",
                "properties": {
                    "accessKey": {
                        "type": "string",
                        "description": "Aws Access key ID.\n"
                    },
                    "secretKey": {
                        "type": "string",
                        "description": "Aws Secret Access Key.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accessKey",
                    "secretKey"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEnumerationAws.\n",
                "properties": {
                    "accessKey": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of Region names to enable provisioning on. Example: us-east-2, ap-northeast-1\n"
                    },
                    "secretKey": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "accessKey",
                    "regions",
                    "secretKey",
                    "id"
                ]
            }
        },
        "vra:region/getEnumerationAzure:getEnumerationAzure": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\n\nThis is an example of how to lookup a region enumeration data source for Azure cloud account.\n\n**Region enumeration data source for Azure**\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst this = vra.region.getEnumerationAzure({\n    applicationId: _var.application_id,\n    applicationKey: _var.application_key,\n    subscriptionId: _var.subscription_id,\n    tenantId: _var.tenant_id,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.region.get_enumeration_azure(application_id=var[\"application_id\"],\n    application_key=var[\"application_key\"],\n    subscription_id=var[\"subscription_id\"],\n    tenant_id=var[\"tenant_id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Region.GetEnumerationAzure.Invoke(new()\n    {\n        ApplicationId = @var.Application_id,\n        ApplicationKey = @var.Application_key,\n        SubscriptionId = @var.Subscription_id,\n        TenantId = @var.Tenant_id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/region\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/region\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := region.GetEnumerationAzure(ctx, \u0026region.GetEnumerationAzureArgs{\n\t\t\tApplicationId:  _var.Application_id,\n\t\t\tApplicationKey: _var.Application_key,\n\t\t\tSubscriptionId: _var.Subscription_id,\n\t\t\tTenantId:       _var.Tenant_id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.region.RegionFunctions;\nimport com.pulumi.vra.region.inputs.GetEnumerationAzureArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = RegionFunctions.getEnumerationAzure(GetEnumerationAzureArgs.builder()\n            .applicationId(var_.application_id())\n            .applicationKey(var_.application_key())\n            .subscriptionId(var_.subscription_id())\n            .tenantId(var_.tenant_id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:region:getEnumerationAzure\n      Arguments:\n        applicationId: ${var.application_id}\n        applicationKey: ${var.application_key}\n        subscriptionId: ${var.subscription_id}\n        tenantId: ${var.tenant_id}\n```\n\nThe region enumeration data source for Azure cloud account supports the following arguments:\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getEnumerationAzure.\n",
                "properties": {
                    "applicationId": {
                        "type": "string",
                        "description": "Azure Client Application ID\n"
                    },
                    "applicationKey": {
                        "type": "string",
                        "description": "Azure Client Application Secret Key\n"
                    },
                    "subscriptionId": {
                        "type": "string",
                        "description": "Azure Subscription ID\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "Azure Tenant ID\n"
                    }
                },
                "type": "object",
                "required": [
                    "applicationId",
                    "applicationKey",
                    "subscriptionId",
                    "tenantId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEnumerationAzure.\n",
                "properties": {
                    "applicationId": {
                        "type": "string"
                    },
                    "applicationKey": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of Region names to enable provisioning on. Example: northamerica-northeast1\n"
                    },
                    "subscriptionId": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "applicationId",
                    "applicationKey",
                    "regions",
                    "subscriptionId",
                    "tenantId",
                    "id"
                ]
            }
        },
        "vra:region/getEnumerationGcp:getEnumerationGcp": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\n\nThis is an example of how to lookup a region enumeration data source for GCP cloud account.\n\n**Region enumeration data source for GCP**\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst this = vra.region.getEnumerationGcp({\n    clientEmail: _var.client_email,\n    privateKeyId: _var.private_key_id,\n    privateKey: _var.private_key,\n    projectId: _var.project_id,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.region.get_enumeration_gcp(client_email=var[\"client_email\"],\n    private_key_id=var[\"private_key_id\"],\n    private_key=var[\"private_key\"],\n    project_id=var[\"project_id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Region.GetEnumerationGcp.Invoke(new()\n    {\n        ClientEmail = @var.Client_email,\n        PrivateKeyId = @var.Private_key_id,\n        PrivateKey = @var.Private_key,\n        ProjectId = @var.Project_id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/region\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/region\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := region.GetEnumerationGcp(ctx, \u0026region.GetEnumerationGcpArgs{\n\t\t\tClientEmail:  _var.Client_email,\n\t\t\tPrivateKeyId: _var.Private_key_id,\n\t\t\tPrivateKey:   _var.Private_key,\n\t\t\tProjectId:    _var.Project_id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.region.RegionFunctions;\nimport com.pulumi.vra.region.inputs.GetEnumerationGcpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = RegionFunctions.getEnumerationGcp(GetEnumerationGcpArgs.builder()\n            .clientEmail(var_.client_email())\n            .privateKeyId(var_.private_key_id())\n            .privateKey(var_.private_key())\n            .projectId(var_.project_id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:region:getEnumerationGcp\n      Arguments:\n        clientEmail: ${var.client_email}\n        privateKeyId: ${var.private_key_id}\n        privateKey: ${var.private_key}\n        projectId: ${var.project_id}\n```\n\nThe region enumeration data source for GCP cloud account supports the following arguments:\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getEnumerationGcp.\n",
                "properties": {
                    "clientEmail": {
                        "type": "string",
                        "description": "Client E-mail ID.\n"
                    },
                    "privateKey": {
                        "type": "string",
                        "description": "GCP Private key.\n"
                    },
                    "privateKeyId": {
                        "type": "string",
                        "description": "GCP Private key ID.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "GCP Project ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "clientEmail",
                    "privateKey",
                    "privateKeyId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEnumerationGcp.\n",
                "properties": {
                    "clientEmail": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "privateKey": {
                        "type": "string"
                    },
                    "privateKeyId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of Region names to enable provisioning on. Example: northamerica-northeast1\n"
                    }
                },
                "type": "object",
                "required": [
                    "clientEmail",
                    "privateKey",
                    "privateKeyId",
                    "projectId",
                    "regions",
                    "id"
                ]
            }
        },
        "vra:region/getEnumerationVSphere:getEnumerationVSphere": {
            "description": "{{% examples %}}\n## Example Usage\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getEnumerationVSphere.\n",
                "properties": {
                    "acceptSelfSignedCert": {
                        "type": "boolean",
                        "description": "Accept self signed certificate when connecting to vSphere. Example: false\n"
                    },
                    "dcid": {
                        "type": "string",
                        "description": "ID of a data collector vm deployed in the on premise infrastructure. Example: d5316b00-f3b8-4895-9e9a-c4b98649c2ca\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "Host name for the cloud account endpoint. Example: dc1-lnd.mycompany.com\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password for the user used to authenticate with the cloud Account\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username to authenticate with the cloud account\n"
                    }
                },
                "type": "object",
                "required": [
                    "hostname",
                    "password",
                    "username"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEnumerationVSphere.\n",
                "properties": {
                    "acceptSelfSignedCert": {
                        "type": "boolean"
                    },
                    "dcid": {
                        "type": "string"
                    },
                    "hostname": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "password": {
                        "type": "string"
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of datacenter managed object reference identifiers to enable provisioning on. Example: Datacenter:datacenter-2\n"
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "hostname",
                    "password",
                    "regions",
                    "username",
                    "id"
                ]
            }
        },
        "vra:region/getEnumerationVmc:getEnumerationVmc": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\n\nThis is an example of how to lookup a region enumeration data source for VMC cloud account.\n\n**Region enumeration data source for VMC**\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst this = vra.region.getEnumerationVmc({\n    acceptSelfSignedCert: true,\n    dcId: _var.vra_data_collector_id,\n    apiToken: _var.api_token,\n    sddcName: _var.sddc_name,\n    nsxHostname: _var.nsx_hostname,\n    vcenterHostname: _var.vcenter_hostname,\n    vcenterPassword: _var.vcenter_password,\n    vcenterUsername: _var.vcenter_username,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.region.get_enumeration_vmc(accept_self_signed_cert=True,\n    dc_id=var[\"vra_data_collector_id\"],\n    api_token=var[\"api_token\"],\n    sddc_name=var[\"sddc_name\"],\n    nsx_hostname=var[\"nsx_hostname\"],\n    vcenter_hostname=var[\"vcenter_hostname\"],\n    vcenter_password=var[\"vcenter_password\"],\n    vcenter_username=var[\"vcenter_username\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Region.GetEnumerationVmc.Invoke(new()\n    {\n        AcceptSelfSignedCert = true,\n        DcId = @var.Vra_data_collector_id,\n        ApiToken = @var.Api_token,\n        SddcName = @var.Sddc_name,\n        NsxHostname = @var.Nsx_hostname,\n        VcenterHostname = @var.Vcenter_hostname,\n        VcenterPassword = @var.Vcenter_password,\n        VcenterUsername = @var.Vcenter_username,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/region\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/region\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := region.GetEnumerationVmc(ctx, \u0026region.GetEnumerationVmcArgs{\n\t\t\tAcceptSelfSignedCert: pulumi.BoolRef(true),\n\t\t\tDcId:                 pulumi.StringRef(_var.Vra_data_collector_id),\n\t\t\tApiToken:             _var.Api_token,\n\t\t\tSddcName:             _var.Sddc_name,\n\t\t\tNsxHostname:          _var.Nsx_hostname,\n\t\t\tVcenterHostname:      _var.Vcenter_hostname,\n\t\t\tVcenterPassword:      _var.Vcenter_password,\n\t\t\tVcenterUsername:      _var.Vcenter_username,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.region.RegionFunctions;\nimport com.pulumi.vra.region.inputs.GetEnumerationVmcArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = RegionFunctions.getEnumerationVmc(GetEnumerationVmcArgs.builder()\n            .acceptSelfSignedCert(true)\n            .dcId(var_.vra_data_collector_id())\n            .apiToken(var_.api_token())\n            .sddcName(var_.sddc_name())\n            .nsxHostname(var_.nsx_hostname())\n            .vcenterHostname(var_.vcenter_hostname())\n            .vcenterPassword(var_.vcenter_password())\n            .vcenterUsername(var_.vcenter_username())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:region:getEnumerationVmc\n      Arguments:\n        acceptSelfSignedCert: true\n        dcId: ${var.vra_data_collector_id}\n        apiToken: ${var.api_token}\n        sddcName: ${var.sddc_name}\n        nsxHostname: ${var.nsx_hostname}\n        vcenterHostname: ${var.vcenter_hostname}\n        vcenterPassword: ${var.vcenter_password}\n        vcenterUsername: ${var.vcenter_username}\n```\n\nThe region enumeration data source for VMC cloud account supports the following arguments:\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getEnumerationVmc.\n",
                "properties": {
                    "acceptSelfSignedCert": {
                        "type": "boolean",
                        "description": "Accept self signed certificate when connecting to vSphere. Example: false\n"
                    },
                    "apiToken": {
                        "type": "string",
                        "description": "API Token for the cloud account endpoint.\n"
                    },
                    "dcId": {
                        "type": "string",
                        "description": "ID of a data collector vm deployed in the on premise infrastructure. Refer to the data-collector API to create or list data collectors.\n"
                    },
                    "nsxHostname": {
                        "type": "string",
                        "description": "The IP address of the NSX Manager server in the specified SDDC / FQDN.\n"
                    },
                    "sddcName": {
                        "type": "string",
                        "description": "Identifier of the on-premise SDDC to be used by this cloud account.\n"
                    },
                    "vcenterHostname": {
                        "type": "string",
                        "description": "The IP address or FQDN of the vCenter Server in the specified SDDC. The cloud proxy belongs on this vCenter.\n"
                    },
                    "vcenterPassword": {
                        "type": "string",
                        "description": "Password for the user used to authenticate with the cloud Account\n"
                    },
                    "vcenterUsername": {
                        "type": "string",
                        "description": "vCenter user name for the specified SDDC.The specified user requires CloudAdmin credentials. The user does not require CloudGlobalAdmin credentials.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiToken",
                    "nsxHostname",
                    "sddcName",
                    "vcenterHostname",
                    "vcenterPassword",
                    "vcenterUsername"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEnumerationVmc.\n",
                "properties": {
                    "acceptSelfSignedCert": {
                        "type": "boolean"
                    },
                    "apiToken": {
                        "type": "string"
                    },
                    "dcId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "nsxHostname": {
                        "type": "string"
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of Region names to enable provisioning on. Example: northamerica-northeast1\n"
                    },
                    "sddcName": {
                        "type": "string"
                    },
                    "vcenterHostname": {
                        "type": "string"
                    },
                    "vcenterPassword": {
                        "type": "string"
                    },
                    "vcenterUsername": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "apiToken",
                    "nsxHostname",
                    "regions",
                    "sddcName",
                    "vcenterHostname",
                    "vcenterPassword",
                    "vcenterUsername",
                    "id"
                ]
            }
        },
        "vra:region/getRegion:getRegion": {
            "description": "This is an example of how to lookup a region data source:\n\n**Region data source by id:**\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst this = vra.region.getRegion({\n    id: _var.vra_region_id,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.region.get_region(id=var[\"vra_region_id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Region.GetRegion.Invoke(new()\n    {\n        Id = @var.Vra_region_id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/region\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/region\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := region.GetRegion(ctx, \u0026region.GetRegionArgs{\n\t\t\tId: pulumi.StringRef(_var.Vra_region_id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.region.RegionFunctions;\nimport com.pulumi.vra.region.inputs.GetRegionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = RegionFunctions.getRegion(GetRegionArgs.builder()\n            .id(var_.vra_region_id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:region:getRegion\n      Arguments:\n        id: ${var.vra_region_id}\n```\n\n**Region data source by filter:**\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst thisRegion = pulumi.output(vra.region.getRegion({\n    filter: `name eq '${var_vra_region_name}'`,\n}));\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.region.get_region(filter=f\"name eq '{var['vra_region_name']}'\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Region.GetRegion.Invoke(new()\n    {\n        Filter = $\"name eq '{@var.Vra_region_name}'\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/region\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/region\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := region.GetRegion(ctx, \u0026region.GetRegionArgs{\n\t\t\tFilter: pulumi.StringRef(fmt.Sprintf(\"name eq '%v'\", _var.Vra_region_name)),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.region.RegionFunctions;\nimport com.pulumi.vra.region.inputs.GetRegionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = RegionFunctions.getRegion(GetRegionArgs.builder()\n            .filter(String.format(\"name eq '%s'\", var_.vra_region_name()))\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:region:getRegion\n      Arguments:\n        filter: name eq '${var.vra_region_name}'\n```\n\n**Region data source by cloud account id and region:**\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst this = vra.region.getRegion({\n    cloudAccountId: _var.vra_cloud_account_id,\n    region: _var.vra_region_external_id,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.region.get_region(cloud_account_id=var[\"vra_cloud_account_id\"],\n    region=var[\"vra_region_external_id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Region.GetRegion.Invoke(new()\n    {\n        CloudAccountId = @var.Vra_cloud_account_id,\n        Region = @var.Vra_region_external_id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/region\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/region\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := region.GetRegion(ctx, \u0026region.GetRegionArgs{\n\t\t\tCloudAccountId: pulumi.StringRef(_var.Vra_cloud_account_id),\n\t\t\tRegion:         pulumi.StringRef(_var.Vra_region_external_id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.region.RegionFunctions;\nimport com.pulumi.vra.region.inputs.GetRegionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = RegionFunctions.getRegion(GetRegionArgs.builder()\n            .cloudAccountId(var_.vra_cloud_account_id())\n            .region(var_.vra_region_external_id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:region:getRegion\n      Arguments:\n        cloudAccountId: ${var.vra_cloud_account_id}\n        region: ${var.vra_region_external_id}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRegion.\n",
                "properties": {
                    "cloudAccountId": {
                        "type": "string",
                        "description": "The id of the cloud account the region belongs to.\n"
                    },
                    "filter": {
                        "type": "string",
                        "description": "Search criteria to narrow down Regions.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The id of the region instance.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The specific region associated with the cloud account. On vSphere, this is the external ID.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRegion.\n",
                "properties": {
                    "cloudAccountId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date when the entity was created. The date is in ISO 8601 and UTC.\n"
                    },
                    "externalRegionId": {
                        "type": "string",
                        "description": "Unique identifier of region on the provider side.\n"
                    },
                    "filter": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of region on the provider side. In vSphere, the name of the region is different from its id.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The id of the organization this entity belongs to.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Email of the user that owns the entity.\n"
                    },
                    "region": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                    }
                },
                "type": "object",
                "required": [
                    "cloudAccountId",
                    "createdAt",
                    "externalRegionId",
                    "id",
                    "name",
                    "orgId",
                    "owner",
                    "updatedAt"
                ]
            }
        },
        "vra:securitygroup/getSecurityGroup:getSecurityGroup": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\nThis is an example of how to lookup security groups.\n\n**Security groups by filter query:**\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\n// Lookup Security groups using its name\nconst thisSecurityGroup = pulumi.output(vra.securitygroup.getSecurityGroup({\n    filter: `name eq '${var_name}'`,\n}));\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.securitygroup.get_security_group(filter=f\"name eq '{var['name']}'\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Securitygroup.GetSecurityGroup.Invoke(new()\n    {\n        Filter = $\"name eq '{@var.Name}'\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/securitygroup\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/securitygroup\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := securitygroup.GetSecurityGroup(ctx, \u0026securitygroup.GetSecurityGroupArgs{\n\t\t\tFilter: fmt.Sprintf(\"name eq '%v'\", _var.Name),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.securitygroup.SecuritygroupFunctions;\nimport com.pulumi.vra.securitygroup.inputs.GetSecurityGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = SecuritygroupFunctions.getSecurityGroup(GetSecurityGroupArgs.builder()\n            .filter(String.format(\"name eq '%s'\", var_.name()))\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:securitygroup:getSecurityGroup\n      Arguments:\n        filter: name eq '${var.name}'\n```\n\nA Security group supports the following arguments:\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSecurityGroup.\n",
                "properties": {
                    "filter": {
                        "type": "string",
                        "description": "Search criteria to narrow down the Security groups.\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:securitygroup/getSecurityGroupRule:getSecurityGroupRule"
                        },
                        "description": "List of security rules.\n"
                    }
                },
                "type": "object",
                "required": [
                    "filter"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSecurityGroup.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Date when the entity was created. The date is in ISO 6801 and UTC.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A human-friendly description of the security groups.\n"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "External entity Id on the provider side.\n"
                    },
                    "externalRegionId": {
                        "type": "string",
                        "description": "The id of the region for which this entity is defined.\n"
                    },
                    "filter": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "ID of the security group.\n"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:securitygroup/getSecurityGroupLink:getSecurityGroupLink"
                        },
                        "description": "HATEOAS of the entity\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the security group.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "ID of organization that entity belongs to.\n"
                    },
                    "owner": {
                        "type": "string"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:securitygroup/getSecurityGroupRule:getSecurityGroupRule"
                        },
                        "description": "List of security rules.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "description",
                    "externalId",
                    "externalRegionId",
                    "filter",
                    "id",
                    "links",
                    "name",
                    "organizationId",
                    "owner",
                    "updatedAt"
                ]
            }
        },
        "vra:storageprofile/getAws:getAws": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\nThis is an example of how to create a storage profile aws resource.\n\n**Storage profile aws data source by its id:**\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst this = vra.storageprofile.getAws({\n    id: vra_storage_profile_aws[\"this\"].id,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.storageprofile.get_aws(id=vra_storage_profile_aws[\"this\"][\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Storageprofile.GetAws.Invoke(new()\n    {\n        Id = vra_storage_profile_aws.This.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/storageprofile\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/storageprofile\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := storageprofile.LookupAws(ctx, \u0026storageprofile.LookupAwsArgs{\n\t\t\tId: pulumi.StringRef(vra_storage_profile_aws.This.Id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.storageprofile.StorageprofileFunctions;\nimport com.pulumi.vra.cloudaccount.inputs.GetAwsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = StorageprofileFunctions.getAws(GetAwsArgs.builder()\n            .id(vra_storage_profile_aws.this().id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:storageprofile:getAws\n      Arguments:\n        id: ${vra_storage_profile_aws.this.id}\n```\n\n**Vra storage profile data source filter by external region id:**\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst thisAws = pulumi.output(vra.storageprofile.getAws({\n    filter: \"externalRegionId eq 'foobar'\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.storageprofile.get_aws(filter=\"externalRegionId eq 'foobar'\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Storageprofile.GetAws.Invoke(new()\n    {\n        Filter = \"externalRegionId eq 'foobar'\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/storageprofile\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/storageprofile\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := storageprofile.LookupAws(ctx, \u0026storageprofile.LookupAwsArgs{\n\t\t\tFilter: pulumi.StringRef(\"externalRegionId eq 'foobar'\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.storageprofile.StorageprofileFunctions;\nimport com.pulumi.vra.cloudaccount.inputs.GetAwsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = StorageprofileFunctions.getAws(GetAwsArgs.builder()\n            .filter(\"externalRegionId eq 'foobar'\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:storageprofile:getAws\n      Arguments:\n        filter: externalRegionId eq 'foobar'\n```\n\nA storage profile aws data source supports the following arguments:\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAws.\n",
                "properties": {
                    "filter": {
                        "type": "string",
                        "description": "Filter query string that is supported by vRA multi-cloud IaaS API. Example: regionId eq '\u003cregionId\u003e' and cloudAccountId eq '\u003ccloudAccountId\u003e'.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The id of the image profile instance.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:storageprofile/getAwsTag:getAwsTag"
                        },
                        "description": "A set of tag keys and optional values that were set on this Network Profile.\nexample:[ { \"key\" : \"ownedBy\", \"value\": \"Rainpole\" } ]\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAws.\n",
                "properties": {
                    "cloudAccountId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date when the entity was created. The date is in ISO 6801 and UTC.\n"
                    },
                    "defaultItem": {
                        "type": "boolean",
                        "description": "Indicates if this storage profile is a default profile.\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "deviceType": {
                        "type": "string"
                    },
                    "externalRegionId": {
                        "type": "string",
                        "description": "The id of the region as seen in the cloud provider for which this profile is defined.\n"
                    },
                    "filter": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "iops": {
                        "type": "string"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:storageprofile/getAwsLink:getAwsLink"
                        },
                        "description": "HATEOAS of the entity\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Email of the user that owns the entity.\n"
                    },
                    "supportsEncryption": {
                        "type": "boolean"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:storageprofile/getAwsTag:getAwsTag"
                        }
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                    },
                    "volumeType": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "cloudAccountId",
                    "createdAt",
                    "defaultItem",
                    "description",
                    "deviceType",
                    "externalRegionId",
                    "id",
                    "iops",
                    "links",
                    "name",
                    "orgId",
                    "owner",
                    "supportsEncryption",
                    "tags",
                    "updatedAt",
                    "volumeType"
                ]
            }
        },
        "vra:storageprofile/getAzure:getAzure": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\nThis is an example of how to create a storage profile azure resource.\n\n**Storage profile azure data source by its id:**\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst this = vra.storageprofile.getAzure({\n    id: vra_storage_profile_azure[\"this\"].id,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.storageprofile.get_azure(id=vra_storage_profile_azure[\"this\"][\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Storageprofile.GetAzure.Invoke(new()\n    {\n        Id = vra_storage_profile_azure.This.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/storageprofile\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/storageprofile\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := storageprofile.LookupAzure(ctx, \u0026storageprofile.LookupAzureArgs{\n\t\t\tId: pulumi.StringRef(vra_storage_profile_azure.This.Id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.storageprofile.StorageprofileFunctions;\nimport com.pulumi.vra.cloudaccount.inputs.GetAzureArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = StorageprofileFunctions.getAzure(GetAzureArgs.builder()\n            .id(vra_storage_profile_azure.this().id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:storageprofile:getAzure\n      Arguments:\n        id: ${vra_storage_profile_azure.this.id}\n```\n\n**Vra storage profile data source filter by external region id:**\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst thisAzure = pulumi.output(vra.storageprofile.getAzure({\n    filter: \"externalRegionId eq 'foobar'\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.storageprofile.get_azure(filter=\"externalRegionId eq 'foobar'\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Storageprofile.GetAzure.Invoke(new()\n    {\n        Filter = \"externalRegionId eq 'foobar'\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/storageprofile\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/storageprofile\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := storageprofile.LookupAzure(ctx, \u0026storageprofile.LookupAzureArgs{\n\t\t\tFilter: pulumi.StringRef(\"externalRegionId eq 'foobar'\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.storageprofile.StorageprofileFunctions;\nimport com.pulumi.vra.cloudaccount.inputs.GetAzureArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = StorageprofileFunctions.getAzure(GetAzureArgs.builder()\n            .filter(\"externalRegionId eq 'foobar'\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:storageprofile:getAzure\n      Arguments:\n        filter: externalRegionId eq 'foobar'\n```\n\nA storage profile azure data source supports the following arguments:\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAzure.\n",
                "properties": {
                    "filter": {
                        "type": "string",
                        "description": "Filter query string that is supported by vRA multi-cloud IaaS API. Example: regionId eq '\u003cregionId\u003e' and cloudAccountId eq '\u003ccloudAccountId\u003e'.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The id of the image profile instance.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:storageprofile/getAzureTag:getAzureTag"
                        },
                        "description": "A set of tag keys and optional values that were set on this Network Profile.\nexample:[ { \"key\" : \"ownedBy\", \"value\": \"Rainpole\" } ]\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAzure.\n",
                "properties": {
                    "cloudAccountId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date when the entity was created. The date is in ISO 6801 and UTC.\n"
                    },
                    "dataDiskCaching": {
                        "type": "string",
                        "description": "Indicates the caching mechanism for additional disk.\n"
                    },
                    "defaultItem": {
                        "type": "boolean",
                        "description": "Indicates if this storage profile is a default profile.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A human-friendly description.\n"
                    },
                    "diskType": {
                        "type": "string",
                        "description": "Indicates the performance tier for the storage type. Premium disks are SSD backed and Standard disks are HDD backed.\n"
                    },
                    "externalRegionId": {
                        "type": "string",
                        "description": "The id of the region as seen in the cloud provider for which this profile is defined.\n"
                    },
                    "filter": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:storageprofile/getAzureLink:getAzureLink"
                        },
                        "description": "HATEOAS of the entity\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "osDiskCaching": {
                        "type": "string",
                        "description": "Indicates the caching mechanism for OS disk. Default policy for OS disks is Read/Write.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Email of the user that owns the entity.\n"
                    },
                    "supportsEncryption": {
                        "type": "boolean",
                        "description": "Indicates whether this storage policy should support encryption or not.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:storageprofile/getAzureTag:getAzureTag"
                        },
                        "description": "A set of tag keys and optional values that were set on this Network Profile.\nexample:[ { \"key\" : \"ownedBy\", \"value\": \"Rainpole\" } ]\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                    }
                },
                "type": "object",
                "required": [
                    "cloudAccountId",
                    "createdAt",
                    "dataDiskCaching",
                    "defaultItem",
                    "description",
                    "diskType",
                    "externalRegionId",
                    "id",
                    "links",
                    "name",
                    "orgId",
                    "osDiskCaching",
                    "owner",
                    "supportsEncryption",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "vra:storageprofile/getStorageProfile:getStorageProfile": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\nThis is an example of how to create a storage profile data source.\n\n**Storage profile data source by its id:**\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst this = vra.storageprofile.getStorageProfile({\n    id: vra_storage_profile[\"this\"].id,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.storageprofile.get_storage_profile(id=vra_storage_profile[\"this\"][\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Storageprofile.GetStorageProfile.Invoke(new()\n    {\n        Id = vra_storage_profile.This.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/storageprofile\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/storageprofile\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := storageprofile.LookupStorageProfile(ctx, \u0026storageprofile.LookupStorageProfileArgs{\n\t\t\tId: pulumi.StringRef(vra_storage_profile.This.Id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.storageprofile.StorageprofileFunctions;\nimport com.pulumi.vra.storageprofile.inputs.GetStorageProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = StorageprofileFunctions.getStorageProfile(GetStorageProfileArgs.builder()\n            .id(vra_storage_profile.this().id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:storageprofile:getStorageProfile\n      Arguments:\n        id: ${vra_storage_profile.this.id}\n```\n\n**Vra storage profile data source filter by external region id:**\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst thisStorageProfile = pulumi.output(vra.storageprofile.getStorageProfile({\n    filter: \"externalRegionId eq 'foobar'\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.storageprofile.get_storage_profile(filter=\"externalRegionId eq 'foobar'\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Storageprofile.GetStorageProfile.Invoke(new()\n    {\n        Filter = \"externalRegionId eq 'foobar'\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/storageprofile\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/storageprofile\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := storageprofile.LookupStorageProfile(ctx, \u0026storageprofile.LookupStorageProfileArgs{\n\t\t\tFilter: pulumi.StringRef(\"externalRegionId eq 'foobar'\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.storageprofile.StorageprofileFunctions;\nimport com.pulumi.vra.storageprofile.inputs.GetStorageProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = StorageprofileFunctions.getStorageProfile(GetStorageProfileArgs.builder()\n            .filter(\"externalRegionId eq 'foobar'\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:storageprofile:getStorageProfile\n      Arguments:\n        filter: externalRegionId eq 'foobar'\n```\n\nA storage profile data source supports the following arguments:\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getStorageProfile.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A human-friendly description.\n"
                    },
                    "diskProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Map of storage properties that are to be applied on disk while provisioning.\n"
                    },
                    "filter": {
                        "type": "string",
                        "description": "Filter query string that is supported by vRA multi-cloud IaaS API. Example: regionId eq '\u003cregionId\u003e' and cloudAccountId eq '\u003ccloudAccountId\u003e'.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The id of the image profile instance.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:storageprofile/getStorageProfileTag:getStorageProfileTag"
                        },
                        "description": "A set of tag keys and optional values that were set on this Network Profile.\nexample:[ { \"key\" : \"ownedBy\", \"value\": \"Rainpole\" } ]\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getStorageProfile.\n",
                "properties": {
                    "cloudAccountId": {
                        "type": "string",
                        "description": "Id of the cloud account this storage profile belongs to.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date when the entity was created. The date is in ISO 6801 and UTC.\n"
                    },
                    "defaultItem": {
                        "type": "boolean",
                        "description": "Indicates if this storage profile is a default profile.\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "diskProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "externalRegionId": {
                        "type": "string",
                        "description": "The id of the region as seen in the cloud provider for which this profile is defined.\n"
                    },
                    "filter": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:storageprofile/getStorageProfileLink:getStorageProfileLink"
                        },
                        "description": "HATEOAS of the entity\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The id of the organization this entity belongs to.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Email of the user that owns the entity.\n"
                    },
                    "supportsEncryption": {
                        "type": "boolean",
                        "description": "Indicates whether this storage profile supports encryption or not.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:storageprofile/getStorageProfileTag:getStorageProfileTag"
                        },
                        "description": "A set of tag keys and optional values that were set on this Network Profile.\nexample:[ { \"key\" : \"ownedBy\", \"value\": \"Rainpole\" } ]\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                    }
                },
                "type": "object",
                "required": [
                    "cloudAccountId",
                    "createdAt",
                    "defaultItem",
                    "diskProperties",
                    "externalRegionId",
                    "id",
                    "links",
                    "name",
                    "orgId",
                    "owner",
                    "supportsEncryption",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "vra:storageprofile/getVSphere:getVSphere": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\nThis is an example of how to create a storage profile vsphere data source.\n\n**Storage profile vsphere data source by its id:**\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst this = vra.storageprofile.getVSphere({\n    id: vra_storage_profile_vsphere[\"this\"].id,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.storageprofile.get_v_sphere(id=vra_storage_profile_vsphere[\"this\"][\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Storageprofile.GetVSphere.Invoke(new()\n    {\n        Id = vra_storage_profile_vsphere.This.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/storageprofile\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/storageprofile\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := storageprofile.LookupVSphere(ctx, \u0026storageprofile.LookupVSphereArgs{\n\t\t\tId: pulumi.StringRef(vra_storage_profile_vsphere.This.Id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.storageprofile.StorageprofileFunctions;\nimport com.pulumi.vra.cloudaccount.inputs.GetVSphereArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = StorageprofileFunctions.getVSphere(GetVSphereArgs.builder()\n            .id(vra_storage_profile_vsphere.this().id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:storageprofile:getVSphere\n      Arguments:\n        id: ${vra_storage_profile_vsphere.this.id}\n```\n\n**Vra storage profile data source filter by external region id:**\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst thisVSphere = pulumi.output(vra.storageprofile.getVSphere({\n    filter: \"externalRegionId eq 'foobar'\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\nthis = vra.storageprofile.get_v_sphere(filter=\"externalRegionId eq 'foobar'\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Vra.Storageprofile.GetVSphere.Invoke(new()\n    {\n        Filter = \"externalRegionId eq 'foobar'\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/storageprofile\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/storageprofile\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := storageprofile.LookupVSphere(ctx, \u0026storageprofile.LookupVSphereArgs{\n\t\t\tFilter: pulumi.StringRef(\"externalRegionId eq 'foobar'\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.storageprofile.StorageprofileFunctions;\nimport com.pulumi.vra.cloudaccount.inputs.GetVSphereArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = StorageprofileFunctions.getVSphere(GetVSphereArgs.builder()\n            .filter(\"externalRegionId eq 'foobar'\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: vra:storageprofile:getVSphere\n      Arguments:\n        filter: externalRegionId eq 'foobar'\n```\n\nA storage profile vsphere data source supports the following arguments:\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getVSphere.\n",
                "properties": {
                    "filter": {
                        "type": "string",
                        "description": "Filter query string that is supported by vRA multi-cloud IaaS API. Example: regionId eq '\u003cregionId\u003e' and cloudAccountId eq '\u003ccloudAccountId\u003e'.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The id of the image profile instance.\n"
                    },
                    "sharesLevel": {
                        "type": "string",
                        "description": "Indicates whether this storage profile supports encryption or not.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:storageprofile/getVSphereTag:getVSphereTag"
                        },
                        "description": "A set of tag keys and optional values that were set on this Network Profile.\nexample:[ { \"key\" : \"ownedBy\", \"value\": \"Rainpole\" } ]\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVSphere.\n",
                "properties": {
                    "cloudAccountId": {
                        "type": "string",
                        "description": "Id of the cloud account this storage profile belongs to.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date when the entity was created. The date is in ISO 6801 and UTC.\n"
                    },
                    "defaultItem": {
                        "type": "boolean",
                        "description": "Indicates if this storage profile is a default profile.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A human-friendly description.\n"
                    },
                    "diskMode": {
                        "type": "string",
                        "description": "Type of mode for the disk.\n"
                    },
                    "diskType": {
                        "type": "string",
                        "description": "Indicates the performance tier for the storage type. Premium disks are SSD backed and Standard disks are HDD backed.\n"
                    },
                    "externalRegionId": {
                        "type": "string",
                        "description": "The id of the region as seen in the cloud provider for which this profile is defined.\n"
                    },
                    "filter": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "limitIops": {
                        "type": "string",
                        "description": "The upper bound for the I/O operations per second allocated for each virtual disk.\n"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:storageprofile/getVSphereLink:getVSphereLink"
                        },
                        "description": "HATEOAS of the entity\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A human-friendly name used as an identifier in APIs that support this option.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The id of the organization this entity belongs to.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Email of the user that owns the entity.\n"
                    },
                    "provisioningType": {
                        "type": "string",
                        "description": "Type of provisioning policy for the disk.\n"
                    },
                    "shares": {
                        "type": "string",
                        "description": "A specific number of shares assigned to each virtual machine.\n"
                    },
                    "sharesLevel": {
                        "type": "string"
                    },
                    "supportsEncryption": {
                        "type": "boolean",
                        "description": "Indicates whether this storage policy should support encryption or not.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:storageprofile/getVSphereTag:getVSphereTag"
                        },
                        "description": "A set of tag keys and optional values that were set on this Network Profile.\nexample:[ { \"key\" : \"ownedBy\", \"value\": \"Rainpole\" } ]\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                    }
                },
                "type": "object",
                "required": [
                    "cloudAccountId",
                    "createdAt",
                    "defaultItem",
                    "description",
                    "diskMode",
                    "diskType",
                    "externalRegionId",
                    "id",
                    "limitIops",
                    "links",
                    "name",
                    "orgId",
                    "owner",
                    "provisioningType",
                    "shares",
                    "supportsEncryption",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "vra:zone/getZone:getZone": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n### S\n\nThis is an example of how to read a zone data source.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vra from \"@pulumi/vra\";\n\nconst test-zone = vra.zone.getZone({\n    name: _var.zone_name,\n});\n```\n```python\nimport pulumi\nimport pulumi_vra as vra\n\ntest_zone = vra.zone.get_zone(name=var[\"zone_name\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Vra = Pulumi.Vra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test_zone = Vra.Zone.GetZone.Invoke(new()\n    {\n        Name = @var.Zone_name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vra/sdk/go/vra/zone\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-vra/sdk/go/vra/zone\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zone.LookupZone(ctx, \u0026zone.LookupZoneArgs{\n\t\t\tName: pulumi.StringRef(_var.Zone_name),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.vra.zone.ZoneFunctions;\nimport com.pulumi.vra.zone.inputs.GetZoneArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test-zone = ZoneFunctions.getZone(GetZoneArgs.builder()\n            .name(var_.zone_name())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test-zone:\n    Fn::Invoke:\n      Function: vra:zone:getZone\n      Arguments:\n        name: ${var.zone_name}\n```\n\nA zone data source supports the following arguments:\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getZone.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the zone resource instance.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A human-friendly name used as an identifier for the zone resource instance.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:zone/getZoneTag:getZoneTag"
                        },
                        "description": "A set of tag keys and optional values that were set on this resource:\n"
                    },
                    "tagsToMatches": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:zone/getZoneTagsToMatch:getZoneTagsToMatch"
                        },
                        "description": "A set of tag keys and optional values for compute resource filtering:\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getZone.\n",
                "properties": {
                    "cloudAccountId": {
                        "type": "string",
                        "description": "The ID of the cloud account this zone belongs to.\n"
                    },
                    "computeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The ids of the compute resources that has been explicitly assigned to this zone.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date when the entity was created. The date is in ISO 8601 and UTC.\n"
                    },
                    "customProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "A list of key value pair of properties that will be used.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A human-friendly description.\n"
                    },
                    "externalRegionId": {
                        "type": "string",
                        "description": "The id of the region for which this zone is defined.\n"
                    },
                    "folder": {
                        "type": "string",
                        "description": "The folder relative path to the datacenter where resources are deployed to (only applicable for vSphere cloud zones).\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:zone/getZoneLink:getZoneLink"
                        },
                        "description": "HATEOAS of the entity.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The id of the organization this entity belongs to.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Email of the user that owns the entity.\n"
                    },
                    "placementPolicy": {
                        "type": "string",
                        "description": "The placement policy for the zone. One of `DEFAULT`, `SPREAD` or `BINPACK`.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:zone/getZoneTag:getZoneTag"
                        },
                        "description": "A set of tag keys and optional values that were set on this resource:\n"
                    },
                    "tagsToMatches": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vra:zone/getZoneTagsToMatch:getZoneTagsToMatch"
                        },
                        "description": "A set of tag keys and optional values for compute resource filtering:\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date when the entity was last updated. The date is ISO 8601 and UTC.\n"
                    }
                },
                "type": "object",
                "required": [
                    "cloudAccountId",
                    "computeIds",
                    "createdAt",
                    "customProperties",
                    "description",
                    "externalRegionId",
                    "folder",
                    "id",
                    "links",
                    "name",
                    "orgId",
                    "owner",
                    "placementPolicy",
                    "tags",
                    "tagsToMatches",
                    "updatedAt"
                ]
            }
        }
    }
}