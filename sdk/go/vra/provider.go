// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vra

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The provider type for the vra package. By default, resources use package-wide configuration
// settings, however an explicit `Provider` instance may be created and passed during resource
// construction to achieve fine-grained programmatic control over provider settings. See the
// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
type Provider struct {
	pulumi.ProviderResourceState

	// The access token for API operations.
	AccessToken pulumi.StringPtrOutput `pulumi:"accessToken"`
	// Specify timeout for how often to reauthorize the access token
	ReauthorizeTimeout pulumi.StringPtrOutput `pulumi:"reauthorizeTimeout"`
	// The refresh token for API operations.
	RefreshToken pulumi.StringPtrOutput `pulumi:"refreshToken"`
	// The base url for API operations.
	Url pulumi.StringPtrOutput `pulumi:"url"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		args = &ProviderArgs{}
	}

	if isZero(args.AccessToken) {
		args.AccessToken = pulumi.StringPtr(getEnvOrDefault("", nil, "VRA_ACCESS_TOKEN").(string))
	}
	if isZero(args.Insecure) {
		args.Insecure = pulumi.BoolPtr(getEnvOrDefault(false, parseEnvBool, "VRA_INSECURE", "VRA7_INSECURE").(bool))
	}
	if isZero(args.RefreshToken) {
		args.RefreshToken = pulumi.StringPtr(getEnvOrDefault("", nil, "VRA_REFRESH_TOKEN").(string))
	}
	if isZero(args.Url) {
		args.Url = pulumi.StringPtr(getEnvOrDefault("", nil, "VRA_URL").(string))
	}
	if args.AccessToken != nil {
		args.AccessToken = pulumi.ToSecret(args.AccessToken).(pulumi.StringPtrOutput)
	}
	if args.RefreshToken != nil {
		args.RefreshToken = pulumi.ToSecret(args.RefreshToken).(pulumi.StringPtrOutput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"accessToken",
		"refreshToken",
	})
	opts = append(opts, secrets)
	opts = pkgResourceDefaultOpts(opts)
	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:vra", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	// The access token for API operations.
	AccessToken *string `pulumi:"accessToken"`
	// Specify whether to validate TLS certificates.
	Insecure *bool `pulumi:"insecure"`
	// Specify timeout for how often to reauthorize the access token
	ReauthorizeTimeout *string `pulumi:"reauthorizeTimeout"`
	// The refresh token for API operations.
	RefreshToken *string `pulumi:"refreshToken"`
	// The base url for API operations.
	Url *string `pulumi:"url"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	// The access token for API operations.
	AccessToken pulumi.StringPtrInput
	// Specify whether to validate TLS certificates.
	Insecure pulumi.BoolPtrInput
	// Specify timeout for how often to reauthorize the access token
	ReauthorizeTimeout pulumi.StringPtrInput
	// The refresh token for API operations.
	RefreshToken pulumi.StringPtrInput
	// The base url for API operations.
	Url pulumi.StringPtrInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

type ProviderInput interface {
	pulumi.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOutput)
}

type ProviderOutput struct{ *pulumi.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

// The access token for API operations.
func (o ProviderOutput) AccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.AccessToken }).(pulumi.StringPtrOutput)
}

// Specify timeout for how often to reauthorize the access token
func (o ProviderOutput) ReauthorizeTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.ReauthorizeTimeout }).(pulumi.StringPtrOutput)
}

// The refresh token for API operations.
func (o ProviderOutput) RefreshToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.RefreshToken }).(pulumi.StringPtrOutput)
}

// The base url for API operations.
func (o ProviderOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Url }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderInput)(nil)).Elem(), &Provider{})
	pulumi.RegisterOutputType(ProviderOutput{})
}
